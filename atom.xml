<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小强斋太-Study Notes</title>
  <subtitle>Stay hungry. Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangshengzhuang.com/"/>
  <updated>2017-06-29T15:46:52.027Z</updated>
  <id>http://wangshengzhuang.com/</id>
  
  <author>
    <name>小强斋太</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cat命令</title>
    <link href="http://wangshengzhuang.com/2017/05/31/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/cat%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/31/Linux/每天一个Linux命令/cat命令/</id>
    <published>2017-05-31T14:55:56.000Z</published>
    <updated>2017-06-29T15:46:52.027Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: cat (concatenate，连接)命令将[文件]或标准输入组合输出到标准输出，如果没有指定文件，或者文件为”-“，则从标准输入读取。</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>cat </strong>(concatenate，连接)命令将[文件]或标准输入组合输出到标准输出，如果没有指定文件，或者文件为”-“，则从标准输入读取。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat [选项]... [文件]...</div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-A, --show-all           等于-vET</div><div class="line">-b, --number-nonblank    对非空输出行编号</div><div class="line"><span class="_">-e</span>                       等于-vE</div><div class="line">-E, --show-ends          在每行结束处显示<span class="string">"$"</span></div><div class="line">-n, --number             对所有行编号，包括空行</div><div class="line"><span class="_">-s</span>, --squeeze-blank      压缩多行空行为一空行</div><div class="line">-t                       与-vT 等价</div><div class="line">-T, --show-tabs          将跳格(TAB)字符显示为^I</div><div class="line">-u                       (被忽略)</div><div class="line">-v, --show-nonprinting   使用^ 和M- 引用，除了LFD和 TAB 之外</div><div class="line">--help        显示此帮助信息并退出</div><div class="line">--version        显示版本信息并退出</div></pre></td></tr></table></figure>
<h3 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h3><h5 id="示例1：显示文件内容"><a href="#示例1：显示文件内容" class="headerlink" title="示例1：显示文件内容"></a>示例1：显示文件内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@oracledb ~]<span class="comment"># cat test1.log </span></div><div class="line">2011</div><div class="line">2012</div><div class="line">2013</div></pre></td></tr></table></figure>
<h5 id="示例2：显示文件内容及行号"><a href="#示例2：显示文件内容及行号" class="headerlink" title="示例2：显示文件内容及行号"></a>示例2：显示文件内容及行号</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@oracledb ~]<span class="comment"># cat -b test1.log </span></div><div class="line">     1    2011</div><div class="line">     2    2012</div><div class="line">     3    2013</div><div class="line"></div><div class="line"></div><div class="line">     4    2014</div><div class="line">     5    2015</div><div class="line">[root@oracledb ~]<span class="comment"># cat -n test1.log </span></div><div class="line">     1    2011</div><div class="line">     2    2012</div><div class="line">     3    2013</div><div class="line">     4    </div><div class="line">     5    </div><div class="line">     6    2014</div><div class="line">     7    2015</div><div class="line">[root@oracledb ~]<span class="comment"># cat -s test1.log </span></div><div class="line">2011</div><div class="line">2012</div><div class="line">2013</div><div class="line"></div><div class="line">2014</div><div class="line">2015</div><div class="line">[root@oracledb ~]<span class="comment"># cat -ns test1.log </span></div><div class="line">     1    2011</div><div class="line">     2    2012</div><div class="line">     3    2013</div><div class="line">     4    </div><div class="line">     5    2014</div><div class="line">     6    2015</div></pre></td></tr></table></figure>
<h5 id="示例3：-T选项"><a href="#示例3：-T选项" class="headerlink" title="示例3：-T选项"></a>示例3：-T选项</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@oracledb ~]<span class="comment"># cat -T test1.log </span></div><div class="line">2011</div><div class="line">2012</div><div class="line">2013</div><div class="line"></div><div class="line"></div><div class="line">^I行前面为tab</div><div class="line">2014</div><div class="line"></div><div class="line">2015</div></pre></td></tr></table></figure>
<h5 id="示例4：顺序连接两个文件log1，log2-，并将结果输出到log3"><a href="#示例4：顺序连接两个文件log1，log2-，并将结果输出到log3" class="headerlink" title="示例4：顺序连接两个文件log1，log2 ，并将结果输出到log3"></a>示例4：顺序连接两个文件log1，log2 ，并将结果输出到log3</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@oracledb ~]</span># <span class="selector-tag">cat</span> <span class="selector-tag">test1</span><span class="selector-class">.log</span>  <span class="selector-tag">test2</span><span class="selector-class">.log</span> &gt;<span class="selector-tag">test3</span><span class="selector-class">.log</span></div></pre></td></tr></table></figure>
<h5 id="示例5：将标准输入的内容定向输出到文件"><a href="#示例5：将标准输入的内容定向输出到文件" class="headerlink" title="示例5：将标准输入的内容定向输出到文件"></a>示例5：将标准输入的内容定向输出到文件</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@oracledb</span> ~]<span class="meta"># cat &gt;test4.log</span></div></pre></td></tr></table></figure>
<p>按ctrl+D结束输入or EOF（End Of File）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@oracledb ~]<span class="comment"># cat &gt;log.txt &lt;&lt;EOF</span></div><div class="line">&gt; Hello</div><div class="line">&gt; World</div><div class="line">&gt; Linux</div><div class="line">&gt; PWD=$(<span class="built_in">pwd</span>)</div><div class="line">&gt; EOF</div><div class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># ls -l log.txt </span></div><div class="line">-rw-r--r-- 1 root root 37 10-28 17:07 log.txt</div><div class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># cat log.txt </span></div><div class="line">Hello</div><div class="line">World</div><div class="line">Linux</div><div class="line">PWD=/opt/soft/<span class="built_in">test</span></div></pre></td></tr></table></figure>
<h5 id="示例6：tac-反向列示"><a href="#示例6：tac-反向列示" class="headerlink" title="示例6：tac (反向列示)"></a>示例6：tac (反向列示)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@oracledb ~]<span class="comment"># cat test2.log </span></div><div class="line">2016</div><div class="line">2017</div><div class="line">2018</div><div class="line">[root@oracledb ~]<span class="comment"># tac test2.log </span></div><div class="line">2018</div><div class="line">2017</div><div class="line">2016</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: cat (concatenate，连接)命令将[文件]或标准输入组合输出到标准输出，如果没有指定文件，或者文件为”-“，则从标准输入读取。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="touch" scheme="http://wangshengzhuang.com/tags/touch/"/>
    
  </entry>
  
  <entry>
    <title>touch命令</title>
    <link href="http://wangshengzhuang.com/2017/05/30/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/touch%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/30/Linux/每天一个Linux命令/touch命令/</id>
    <published>2017-05-30T14:55:56.000Z</published>
    <updated>2017-06-29T15:36:30.682Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: touch命令将每个文件的访问时间和修改时间改为当前时间。</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>touch</strong>命令将每个文件的访问时间和修改时间改为当前时间。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch [选项]... 文件...</div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span>            只更改访问时间</div><div class="line">-c, --no-create    不创建任何文件</div><div class="line"><span class="_">-d</span>, --date=字符串    使用指定字符串表示时间而非当前时间</div><div class="line"><span class="_">-f</span>            (忽略)</div><div class="line">-h, --no-dereference        会影响符号链接本身，而非符号链接所指示的目的地(当系统支持更改符号链接的所有者时，此选项才有用)</div><div class="line">-m            只更改修改时间</div><div class="line">-r, --reference=文件    使用指定文件的时间属性而非当前时间</div><div class="line">-t STAMP        使用[[CC]YY]MMDDhhmm[.ss] 格式的时间而非当前时间</div><div class="line">--time=WORD        使用WORD 指定的时间：access、atime、use 都等于<span class="_">-a</span>选项的效果，而modify、mtime 等于-m 选项的效果</div></pre></td></tr></table></figure>
<h3 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h3><h4 id="实例1：在当前目录下建立一个空文件a-log"><a href="#实例1：在当前目录下建立一个空文件a-log" class="headerlink" title="实例1：在当前目录下建立一个空文件a.log"></a>实例1：在当前目录下建立一个空文件a.log</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># touch a.log</span></div><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:06 a.log</div></pre></td></tr></table></figure>
<h4 id="实例2：更新a-log的修改时间为当前时间"><a href="#实例2：更新a-log的修改时间为当前时间" class="headerlink" title="实例2：更新a.log的修改时间为当前时间"></a>实例2：更新a.log的修改时间为当前时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:06 a.log</div><div class="line">[root@oracledb dir1]<span class="comment"># touch a.log </span></div><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 a.log</div></pre></td></tr></table></figure>
<h4 id="实例3：更新log1-log的时间和log2-log时间戳相同"><a href="#实例3：更新log1-log的时间和log2-log时间戳相同" class="headerlink" title="实例3：更新log1.log的时间和log2.log时间戳相同"></a>实例3：更新log1.log的时间和log2.log时间戳相同</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 a.log</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:12 b.log</div><div class="line">[root@oracledb dir1]<span class="comment"># touch -r a.log   b.log </span></div><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 a.log</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 b.log</div></pre></td></tr></table></figure>
<h4 id="实例4：设定文件的时间戳"><a href="#实例4：设定文件的时间戳" class="headerlink" title="实例4：设定文件的时间戳"></a>实例4：设定文件的时间戳</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 a.log</div><div class="line">[root@oracledb dir1]<span class="comment"># touch -t 201601011200.50 log.log</span></div><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 21:08 a.log</div><div class="line">-rw-r--r-- 1 root root 0 1月   1 12:00 log.log</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: touch命令将每个文件的访问时间和修改时间改为当前时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="touch" scheme="http://wangshengzhuang.com/tags/touch/"/>
    
  </entry>
  
  <entry>
    <title>mv命令</title>
    <link href="http://wangshengzhuang.com/2017/05/29/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/mv%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/29/Linux/每天一个Linux命令/mv命令/</id>
    <published>2017-05-29T14:55:56.000Z</published>
    <updated>2017-06-29T15:48:19.772Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: mv（Move file）将源文件重命名为目标文件，或将源文件移动至指定目录。</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>mv</strong>（Move file）将源文件重命名为目标文件，或将源文件移动至指定目录。。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv [选项]<span class="keyword">...</span> [-<span class="literal">T</span>] 源文件 目标文件</div><div class="line">　或：mv [选项]<span class="keyword">...</span> 源文件<span class="keyword">...</span> 目录</div><div class="line">　或：mv [选项]<span class="keyword">...</span> -t 目录 源文件<span class="keyword">...</span></div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--backup[=CONTROL]       为每个已存在的目标文件创建备份</div><div class="line">-b                           类似--backup 但不接受参数</div><div class="line"><span class="_">-f</span>, --force                  覆盖前不询问</div><div class="line">-i, --interactive            覆盖前询问</div><div class="line">-n, –nechoo-clobber             不覆盖已存在文件 如果您指定了-i、<span class="_">-f</span>、-n 中的多个，仅最后一个生效。</div><div class="line">    --strip-trailing-slashes  去掉每个源文件参数尾部的斜线</div><div class="line">-S, --suffix=SUFFIX           替换常用的备份文件后缀</div><div class="line">-t, --target-directory=DIRECTORY    将所有参数指定的源文件或目录 移动至 指定目录</div><div class="line">-T, --no-target-directory    将目标文件视作普通文件处理</div><div class="line">-u, --update            只在源文件文件比目标文件新，或目标文件不存在时才进行移动</div><div class="line">-v, --verbose        详细显示进行的步骤</div></pre></td></tr></table></figure>
<h3 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h3><h4 id="实例1：文件改名"><a href="#实例1：文件改名" class="headerlink" title="实例1：文件改名"></a>实例1：文件改名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv a.txt  b.txt</span></div></pre></td></tr></table></figure>
<h4 id="实例2：-v显示详细信息"><a href="#实例2：-v显示详细信息" class="headerlink" title="实例2：-v显示详细信息"></a>实例2：-v显示详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -v b.txt  a.txt</span></div><div class="line"><span class="string">"b.txt"</span> -&gt; <span class="string">"a.txt"</span></div></pre></td></tr></table></figure>
<h4 id="实例3：将单个文件移动至目录"><a href="#实例3：将单个文件移动至目录" class="headerlink" title="实例3：将单个文件移动至目录"></a>实例3：将单个文件移动至目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -v a.txt  dir2/"a.txt" -&gt; "dir2/a.txt"</span></div></pre></td></tr></table></figure>
<h5 id="实例4：将多个文件移动至目录"><a href="#实例4：将多个文件移动至目录" class="headerlink" title="实例4：将多个文件移动至目录"></a>实例4：将多个文件移动至目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -v a.txt  b.txt  dir2/</span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"dir2/a.txt"</span></div><div class="line"><span class="string">"b.txt"</span> -&gt; <span class="string">"dir2/b.txt"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -vt dir2/ a.txt  b.txt </span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"dir2/a.txt"</span></div><div class="line"><span class="string">"b.txt"</span> -&gt; <span class="string">"dir2/b.txt"</span></div></pre></td></tr></table></figure>
<h5 id="实例5：将文件a-txt改名为b-txt，如果a-txt已经存在，则询问是否覆盖"><a href="#实例5：将文件a-txt改名为b-txt，如果a-txt已经存在，则询问是否覆盖" class="headerlink" title="实例5：将文件a.txt改名为b.txt，如果a.txt已经存在，则询问是否覆盖"></a>实例5：将文件a.txt改名为b.txt，如果a.txt已经存在，则询问是否覆盖</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -vi a.txt  b.txt</span></div><div class="line">mv：是否覆盖<span class="string">"b.txt"</span>？ y</div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"b.txt"</span></div></pre></td></tr></table></figure>
<h5 id="实例6：将文件a-txt改名为b-txt，即使b-txt存在，也是直接覆盖掉。"><a href="#实例6：将文件a-txt改名为b-txt，即使b-txt存在，也是直接覆盖掉。" class="headerlink" title="实例6：将文件a.txt改名为b.txt，即使b.txt存在，也是直接覆盖掉。"></a>实例6：将文件a.txt改名为b.txt，即使b.txt存在，也是直接覆盖掉。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -fv a.txt  b.txt</span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"b.txt"</span></div></pre></td></tr></table></figure>
<h5 id="实例7：重命名dir1为dir2（dir2不存在）"><a href="#实例7：重命名dir1为dir2（dir2不存在）" class="headerlink" title="实例7：重命名dir1为dir2（dir2不存在）"></a>实例7：重命名dir1为dir2（dir2不存在）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -v dir1 dir2</span></div><div class="line"><span class="string">"dir1"</span> -&gt; <span class="string">"dir2"</span></div></pre></td></tr></table></figure>
<h5 id="实例8：将dir1移动到dir2中（dir2存在）。"><a href="#实例8：将dir1移动到dir2中（dir2存在）。" class="headerlink" title="实例8：将dir1移动到dir2中（dir2存在）。"></a>实例8：将dir1移动到dir2中（dir2存在）。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -v dir1 dir2</span></div><div class="line"><span class="string">"dir1"</span> -&gt; <span class="string">"dir2/dir1"</span></div></pre></td></tr></table></figure>
<h5 id="实例9：文件被覆盖前做简单备份，前面加参数-b"><a href="#实例9：文件被覆盖前做简单备份，前面加参数-b" class="headerlink" title="实例9：文件被覆盖前做简单备份，前面加参数-b"></a>实例9：文件被覆盖前做简单备份，前面加参数-b</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># mv -vb a.txt  b.txt </span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"b.txt"</span> (备份：<span class="string">"b.txt~"</span>)</div><div class="line">[root@oracledb dir1]<span class="comment"># ls</span></div><div class="line">b.txt  b.txt~</div></pre></td></tr></table></figure>
<h5 id="实例10：只在源文件比目标文件新时才移动"><a href="#实例10：只在源文件比目标文件新时才移动" class="headerlink" title="实例10：只在源文件比目标文件新时才移动"></a>实例10：只在源文件比目标文件新时才移动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 20:48 a.txt</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 20:43 b.txt</div><div class="line">[root@oracledb dir1]<span class="comment"># mv -uv   b.txt  a.txt </span></div><div class="line">[root@oracledb dir1]<span class="comment"># mv -uv   a.txt  b.txt </span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"b.txt"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: mv（Move file）将源文件重命名为目标文件，或将源文件移动至指定目录。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="mv" scheme="http://wangshengzhuang.com/tags/mv/"/>
    
  </entry>
  
  <entry>
    <title>rm命令</title>
    <link href="http://wangshengzhuang.com/2017/05/28/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/rm%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/28/Linux/每天一个Linux命令/rm命令/</id>
    <published>2017-05-28T14:55:56.000Z</published>
    <updated>2017-06-29T15:48:56.267Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: rm（Remove file 删除目录或文件）删除文件，对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>rm</strong>（Remove file 删除目录或文件）删除文件，对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm [选项]... 文件..</div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="_">-f</span>, –force            强制删除。忽略不存在的文件，不提示确认</div><div class="line">-i                    在删除前需要确认</div><div class="line">-r, -R, --recursive    递归删除目录及其内容</div><div class="line">-v, –verbose            详细显示进行的步骤</div></pre></td></tr></table></figure>
<h3 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h3><h4 id="实例1：删除文件，显示详细信息"><a href="#实例1：删除文件，显示详细信息" class="headerlink" title="实例1：删除文件，显示详细信息"></a>实例1：删除文件，显示详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># rm -v b.txt </span></div><div class="line">rm：是否删除普通空文件 <span class="string">"b.txt"</span>？y</div><div class="line">已删除<span class="string">"b.txt"</span></div></pre></td></tr></table></figure>
<h4 id="实例2：删除前确认"><a href="#实例2：删除前确认" class="headerlink" title="实例2：删除前确认"></a>实例2：删除前确认</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># rm  -vi a.txt </span></div><div class="line">rm：是否删除普通空文件 <span class="string">"a.txt"</span>？y</div><div class="line">已删除<span class="string">"a.txt"</span></div></pre></td></tr></table></figure>
<h4 id="实例3：强制删除"><a href="#实例3：强制删除" class="headerlink" title="实例3：强制删除"></a>实例3：强制删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># rm -fv a.txt </span></div><div class="line">已删除<span class="string">"a.txt"</span></div></pre></td></tr></table></figure>
<h4 id="实例4：递归删除"><a href="#实例4：递归删除" class="headerlink" title="实例4：递归删除"></a>实例4：递归删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># rm -rfv dir2/</span></div><div class="line">已删除<span class="string">"dir2/a.txt"</span></div><div class="line">已删除<span class="string">"dir2/dir3/c.txt"</span></div><div class="line">已删除目录：<span class="string">"dir2/dir3"</span></div><div class="line">已删除目录：<span class="string">"dir2"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: rm（Remove file 删除目录或文件）删除文件，对于链接文件，只是删除整个链接文件，而原有文件保持不变。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="rm" scheme="http://wangshengzhuang.com/tags/rm/"/>
    
  </entry>
  
  <entry>
    <title>LVM基础及在线扩容</title>
    <link href="http://wangshengzhuang.com/2017/05/27/Linux/Linux%E5%9F%BA%E7%A1%80/LVM%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9C%A8%E7%BA%BF%E6%89%A9%E5%AE%B9/"/>
    <id>http://wangshengzhuang.com/2017/05/27/Linux/Linux基础/LVM基础及在线扩容/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2017-06-29T15:25:25.711Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了LVM的基本概念及磁盘扩容操作。</p>
<p><img src="http://image.wangshengzhuang.com/17-6-23/4466666.jpg" alt=""></p>
<a id="more"></a>
<h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h3><p>​    每个Linux使用者在安装linux时都会遇到这样的困境：在为系统分区时，如何精确评估和分配各个硬盘分区的容量，因为系统管理员不但要考虑到当前某个分区需要的容量，还要预见该分区以后可能需要的容量的最大值。因为如果估计不准确，当遇到某个分区不够用时管理员可能甚至要备份整个系统、清除硬盘、重新对硬盘分区，然后恢复数据到新分区。</p>
<p>​    虽然现在有很多动态调整磁盘的工具可以使用，例如Partation Magic等等，但是它并不能完全解决问题，因为某个分区可能会再次被耗尽；另外一个方面这需要重新引导系统才能实现，对于很多关键的服务器，停机是不可接受的，而且对于添加新硬盘，希望一个能跨越多个硬盘驱动器的文件系统时，分区调整程序就不能解决问题。</p>
<p>​    因此完美的解决方法应该是在零停机前提下可以自如对文件系统的大小进行调整，可以方便实现文件系统跨越不同磁盘和分区。幸运的是Linux提供的逻辑盘卷管理（LVM，Logical Volume Manager）机制就是一个完美的解决方案。</p>
<p>​    LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组（volume group），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配，例如按照使用用途进行定义：“development”和“sales”，而不是使用物理磁盘名“sda”和“sdb”。而且当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。</p>
<h3 id="二、使用LVM的好处"><a href="#二、使用LVM的好处" class="headerlink" title="二、使用LVM的好处"></a>二、使用LVM的好处</h3><p>传统的文件系统是基于分区的，一个文件系统对应一个分区。这种方式比较直观，但不易改动：</p>
<p>1.不同的分区相对独立，无相互联系，各分区空间非常易利用不平衡，空间不能充分利用；</p>
<p>2.当一个文件系统／分区已满时，无法对其扩充，只能采用重新分区／建立文件系统，非常麻烦；或把分区中的数据移到另一个更大的分区中；或采用符号连接的方式使用其他分区的空间。</p>
<p>3.如果要把硬盘上的多个分区合并在一起使用，只能采用再分区的方式，这个过程需要数据的备份和恢复。</p>
<p>当采用LVM时，情况有所不同：</p>
<p>1.硬盘的多个分区由LVM统一为卷组管理，能方便的加入或移走分区以扩大或减小卷组的可用容量，充分利用硬盘空间；</p>
<p>2.文件系统建立在逻辑卷上，而逻辑卷可根据需要改动大小(在卷组容量范围内)以满足需求；</p>
<p>3.当系统空间不足而加入新的硬盘时，不必把用户的数据从原硬盘迁移到新硬盘，而只须把新的分区加入卷组并扩充逻辑卷即可。</p>
<h3 id="三、-LVM基本术语"><a href="#三、-LVM基本术语" class="headerlink" title="三、 LVM基本术语"></a>三、 LVM基本术语</h3><p>​    前面谈到，LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：</p>
<ul>
<li><strong>物理存储介质（The physical media）</strong><br>这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。 </li>
<li><strong>物理卷（physical volume）</strong><br>物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。 </li>
<li><strong>卷组（Volume Group）</strong><br>LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。 </li>
<li><strong>逻辑卷（logical volume）</strong><br>LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。 </li>
<li><strong>PE（physical extent）</strong><br>每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。 </li>
<li><strong>LE（logical extent）</strong>逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>
</ul>
<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/steelren/318037/o_061219150067671.jpg" alt="img"></p>
<p>​    首先可以看到，物理卷（PV）被由大小等同的基本单元PE组成。</p>
<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/steelren/318037/o_061219150067672.jpg" alt="img"></p>
<p>​    一个卷组由一个或多个物理卷组成，</p>
<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/steelren/318037/o_061219150067673.jpg" alt="img"></p>
<p>​    从上图可以看到，PE和LE有着一一对应的关系。逻辑卷建立在卷组上。逻辑卷就相当于非LVM系统的磁盘分区，可以在其上创建文件系统。</p>
<p>​    下图是磁盘分区、卷组、逻辑卷和文件系统之间的逻辑关系的示意图：</p>
<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/steelren/318037/o_061219150067674.jpg" alt="img"></p>
<p>​    和非LVM系统将包含分区信息的元数据保存在位于分区的起始位置的分区表中一样，逻辑卷以及卷组相关的元数据也是保存在位于物理卷起始处的VGDA(卷组描述符区域)中。VGDA包括以下内容： PV描述符、VG描述符、LV描述符、和一些PE描述符 。</p>
<p>​    系统启动LVM时激活VG，并将VGDA加载至内存，来识别LV的实际物理存储位置。当系统进行I/O操作时，就会根据VGDA建立的映射机制来访问实际的物理位置。</p>
<h3 id="四、-安装LVM"><a href="#四、-安装LVM" class="headerlink" title="四、 安装LVM"></a>四、 安装LVM</h3><p>​    首先确定系统中是否安装了lvm工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  rpm –qa|grep lvm</span></div><div class="line">RPM version 4.11.3</div></pre></td></tr></table></figure>
<p>如果命令结果输入类似于上例，那么说明系统已经安装了LVM管理工具；如果命令没有输出则说明没有安装LVM管理工具，则需要从网络下载或者从光盘装LVM rpm工具包。安装了LVM的RPM软件包以后，要使用LVM还需要配置内核支持LVM。RedHat默认内核是支持LVM的</p>
<h3 id="五：-LVM基本操作"><a href="#五：-LVM基本操作" class="headerlink" title="五： LVM基本操作"></a>五： LVM基本操作</h3><h4 id="新建一个逻辑卷并挂载"><a href="#新建一个逻辑卷并挂载" class="headerlink" title="新建一个逻辑卷并挂载"></a>新建一个逻辑卷并挂载</h4><p>1.为运行的虚拟机增加一块磁盘，在虚拟机中fdisk -l，可以看到新增加磁盘sdb</p>
<p>2.创建物理卷PV</p>
<p>   创建物理卷的命令为pvcreate，利用该命令将希望添加到卷组的分区或者整个磁盘创建为物理卷。</p>
<p>将整个磁盘创建为物理卷的命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pvcreate /dev/sdb</div></pre></td></tr></table></figure>
<p>查看创建好的PV</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># pvdisplay </span></div><div class="line"></div><div class="line">  --- Physical volume ---</div><div class="line">  PV Name               /dev/sdb</div><div class="line">  VG Name               vg_name</div><div class="line">  PV Size               10.00 GiB / not usable 4.00 MiB</div><div class="line">  Allocatable           yes </div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              2559</div><div class="line">  Free PE               2559</div><div class="line">  Allocated PE          0</div><div class="line">  PV UUID               NvZnOF-jtaG-KFcf-nlqg-0LJp-fzw8-qsO9EL</div></pre></td></tr></table></figure>
<p>3.创建卷组VG</p>
<p>（如果已近存在逻辑卷组，可以直接省去此步，直接到4，当然也可以继续创建）</p>
<p>   vgcreate命令第一个参数是指定该卷组的逻辑名：vg_name。后面参数是指定希望添加到该卷组的物理卷PV。vgcreate在创建卷组 vg_name以外，还设置使用大小为4 MB的PE（默认为4MB），这表示卷组上创建的所有逻辑卷都以 4 MB 为增量单位来进行扩充或缩减。由于内核原因，PE大小决定了逻辑卷的最大大小，4 MB 的PE决定了单个逻辑卷最大容量为 256 GB，若希望使用大于256G的逻辑卷则创建卷组时指定更大的PE。PE大小范围为8 KB 到 512 MB，并且必须总是 2 的倍数（使用-s指定，具体请参考man vgcreate）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vgcreate vg_name /dev/sdb</div></pre></td></tr></table></figure>
<p>通过<code>vgdisplay</code>查看，可以看到包含2559个PE,大小  10.00 GiB，未分配的PE数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># vgdisplay </span></div><div class="line">   </div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               vg_name</div><div class="line">  System ID             </div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        1</div><div class="line">  Metadata Sequence No  1</div><div class="line">  VG Access             <span class="built_in">read</span>/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                0</div><div class="line">  Open LV               0</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                1</div><div class="line">  Act PV                1</div><div class="line">  VG Size               10.00 GiB</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              2559</div><div class="line">  Alloc PE / Size       0 / 0   </div><div class="line">  Free  PE / Size       2559 / 10.00 GiB</div><div class="line">  VG UUID               0XdJE4-OJJy-R6R3-IsmZ-DnOT-9P2L-E80rSS</div></pre></td></tr></table></figure>
<p>4.创建逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvcreate -L 10G -n lvm_name vg_name</div></pre></td></tr></table></figure>
<p>-L指定最终大小大小，或者-l指定PE的个数均可</p>
<p>5.创建文件系统</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs.xfs /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<p>6.挂载在系统直接使用(需要/etc/fstab)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mount /dev/vg_name/lvm_name /mnt</div><div class="line">[root@mysql001 ~]<span class="comment"># df -h |grep mnt</span></div><div class="line">/dev/mapper/vg_name-lvm_name   10G   33M   10G   1% /mnt</div></pre></td></tr></table></figure>
<h4 id="扩展逻辑卷大小"><a href="#扩展逻辑卷大小" class="headerlink" title="扩展逻辑卷大小"></a>扩展逻辑卷大小</h4><p>1.新增磁盘vdc</p>
<p>2.创建物理卷</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pvcreate /dev/sdc</div></pre></td></tr></table></figure>
<p>3.扩展物理卷至卷组vg_name</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vgextend vg_name /dev/sdc</div></pre></td></tr></table></figure>
<p>查看新的VG</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># vgdisplay </span></div><div class="line">   </div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               vg_name</div><div class="line">  System ID             </div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        2</div><div class="line">  Metadata Sequence No  3</div><div class="line">  VG Access             <span class="built_in">read</span>/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                1</div><div class="line">  Open LV               1</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                2</div><div class="line">  Act PV                2</div><div class="line">  VG Size               19.99 GiB</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              5118</div><div class="line">  Alloc PE / Size       2559 / 10.00 GiB</div><div class="line">  Free  PE / Size       2559 / 10.00 GiB</div><div class="line">  VG UUID               0XdJE4-OJJy-R6R3-IsmZ-DnOT-9P2L-E80rSS</div></pre></td></tr></table></figure>
<p>5.增加逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvextend -L 19.5G /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<p>-L指定要扩展到的目标大小，或者-l指定PE的个数均可，也可以使用+号，表示增加的大小</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvextend -L +9.5G /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<p>6.调整文件系统大小</p>
<p>ext4 文件系统</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resize2fs /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<p>如果是xfs格式的文件系统 需要使用  xfs_growfs</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xfs_growfs /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<h4 id="减小逻辑卷大小"><a href="#减小逻辑卷大小" class="headerlink" title="减小逻辑卷大小"></a>减小逻辑卷大小</h4><p>增加是先增容量，再resize，减小是先resize，再reduce</p>
<p>使用lvreduce即可缩小逻辑卷的容量，同样需要首先将文件系统卸载：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">umount /mnt</div><div class="line">resize2fs <span class="_">-s</span> -10G /dev/vg_name/lvm_name</div><div class="line">lvreduce -L -10G /dev/vg_name/lvm_name</div></pre></td></tr></table></figure>
<h4 id="删除逻辑卷"><a href="#删除逻辑卷" class="headerlink" title="删除逻辑卷"></a>删除逻辑卷</h4><p>删除逻辑卷以前首先需要将其卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">umount /mnt</div><div class="line">lvremove /dev/vg_name/lvm_namebash</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/steelren/article/details/1931363" target="_blank" rel="external">Linux逻辑盘卷管理LVM详解</a></p>
<p><a href="http://wiki.tldp.org/LVM-HOWTO" target="_blank" rel="external">http://wiki.tldp.org/LVM-HOWTO</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了LVM的基本概念及磁盘扩容操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wangshengzhuang.com/17-6-23/4466666.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="Linux基础" scheme="http://wangshengzhuang.com/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="LVM" scheme="http://wangshengzhuang.com/tags/LVM/"/>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor简介、安装、配置</title>
    <link href="http://wangshengzhuang.com/2017/05/26/Linux/Supervisor/Supervisor%E7%AE%80%E4%BB%8B/"/>
    <id>http://wangshengzhuang.com/2017/05/26/Linux/Supervisor/Supervisor简介/</id>
    <published>2017-05-25T16:00:00.000Z</published>
    <updated>2017-06-29T15:25:40.583Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了supervisor的安装、使用。</p>
<p><img src="http://image.wangshengzhuang.com/17-5-11/27833402-file_1494510301732_82f7.jpg" alt=""></p>
<a id="more"></a>
<h3 id="1-什么是supervisor"><a href="#1-什么是supervisor" class="headerlink" title="1. 什么是supervisor"></a>1. <strong>什么是supervisor</strong></h3><p> Supervisor是一个Python开发的client/server系统，可以管理和监控类unix上面的进程。类似daemontools</p>
<p>什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式执行的程序，比如一个后台任务，如经常会碰到要写一些守护进程，简单做法放入后台：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shell&gt; nohup python xxx.py &amp;</div></pre></td></tr></table></figure>
<p>除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。</p>
<h3 id="2-为啥用supervisor"><a href="#2-为啥用supervisor" class="headerlink" title="2. 为啥用supervisor"></a>2. 为啥用supervisor</h3><p><strong>方便</strong></p>
<p>为啥简单呢？因为咱们通常管理linux进程的时候，一般来说都需要自己编写一个能够实现进程start/stop/restart/reload功能的脚本，然后丢到/etc/init.d/下面。这么做有很多不好的地方，第一我们要编写这个脚本，这就很耗时耗力了。第二，当这个进程挂掉的时候，linux不会自动重启它的，想要自动重启的话，我们还要自己写一个监控重启脚本。而supervisor则可以完美的解决这些问题。supervisor管理进程，是通过fork/exec的方式把这些被管理的进程，当作supervisor的子进程来启动。这样的话，我们只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去就OK了。这样就省下了我们如同linux管理进程的时自己写控制脚本的麻烦了。第二，被管理进程作为supervisor的子进程，当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，所以当然也就可以对挂掉的子进程进行自动重启了，当然重启还是不重启，也要看你的配置文件里面有木有设置autostart=true了。</p>
<p><strong>精确</strong></p>
<p> Supervisord将进程作为子进程启动，因此可以一直知晓子进程的状态，可以方便查询。而基于pid文件文件获取进程状态有时候不靠谱</p>
<p><strong>权限代理</strong></p>
<p>某些进程需要root或者sudo权限运行，而又不方便把机器的root权限和sudo权限开放给用户的时候，普通用户可以借助supervisor的命令和web UI进行进程的启动和关闭</p>
<p><strong>进程组</strong></p>
<p>linux系统没有批量启动关闭进程的功能，我们想要停止多个进程，只能一个一个的去停止，要么就自己写个脚本去批量停止。Supervisor 允许赋予进程优先级，可以使用supervisorctl 的“start all”, and “restart all”，按照优先级顺序启动。并且进程可以分组，相关的进程可以作为一个单元启动。</p>
<h3 id="3-supervisor特点"><a href="#3-supervisor特点" class="headerlink" title="3. supervisor特点"></a>3. supervisor特点</h3><ul>
<li><strong>简单</strong> :supervisor通过一个 INI-style的文件配置，简单易学。提供了许多诸如重启失败进程、自动日子归档的功能</li>
<li><strong>中心化</strong>:    可以在在同一个地方启动 停止 监控子进程，进程可以单独控制，也可以分组控制，并提供命令行和web接口配置supervisor</li>
<li><strong>高效</strong>:    通过 fork/exec启动子进程</li>
<li><strong>可扩展</strong>:  提供了simple event notification protocol和XML-RPC interface，方便通过各种语言进行配置管理</li>
<li><strong>兼容性强</strong>: 类Unix都支持，不支持windows，基于Python</li>
<li><strong>作为一款已经被使用了十多年的软件，可用性已经被广泛证明</strong></li>
</ul>
<h3 id="4-Supervisor-组成"><a href="#4-Supervisor-组成" class="headerlink" title="4. Supervisor 组成"></a>4. Supervisor 组成</h3><ol>
<li><strong>supervisord</strong>：supervisord是supervisor的服务端程序。负责启动子程序，应答客户端命令，重启crash进程，子程序日志记录，对进程变化发送事件通知等</li>
<li><strong>supervisorctl：</strong>  客户端命令行工具，可以连接服务器端，进行进程的启动、关闭、重启、状态查看等。重要的一点是，supervisorctl不仅可以连接到本机上的supervisord，还可以连接到远程的supervisord，当然在本机上面是通过UNIX socket连接的，远程是通过TCP socket连接的。supervisorctl和supervisord之间的通信，是通过xml_rpc完成的。    相应的配置在[supervisorctl]块里面</li>
<li><strong>Web Server</strong>   可以在界面上管理进程的WEB UI, 通过[inet_http_server] section配置，默认<a href="http://localhost:9001/`" target="_blank" rel="external">http://localhost:9001/`</a></li>
<li><strong>XML-RPC Interface</strong> XML-RPC接口，提供XML-RPC服务来对子进程进行管理，监控，参照 <a href="http://supervisord.org/api.html#xml-rpc" target="_blank" rel="external"><em>XML-RPC API Documentation</em></a>.</li>
</ol>
<h3 id="5-安装"><a href="#5-安装" class="headerlink" title="5 安装"></a>5 安装</h3><h4 id="5-1-yum-安装-推荐"><a href="#5-1-yum-安装-推荐" class="headerlink" title="5.1 yum 安装(推荐)"></a>5.1 yum 安装(推荐)</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> supervisor</div></pre></td></tr></table></figure>
<p>会自动安装成服务形式，可以使用systemctl进行管理</p>
<h4 id="5-2-使用Setuptools安装"><a href="#5-2-使用Setuptools安装" class="headerlink" title="5.2 使用Setuptools安装"></a>5.2 使用Setuptools安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -q http://peak.telecommunity.com/dist/ez_setup.py</div><div class="line">python ez_setup.py</div><div class="line">easy_install supervisor</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools</div><div class="line">easy_install supervisor</div></pre></td></tr></table></figure>
<h4 id="5-3-安装方式3"><a href="#5-3-安装方式3" class="headerlink" title="5.3 安装方式3"></a>5.3 安装方式3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://pypi.python.org/packages/80/37/964c0d53cbd328796b1aeb7abea4c0f7b0e8c7197ea9b0b9967b7d004def/supervisor-3.3.1.tar.gz</div><div class="line">tar -zxvf supervisor-3.3.1.tar.gz </div><div class="line"><span class="built_in">cd</span> supervisor-3.3.1</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<h4 id="5-4生成配置文件"><a href="#5-4生成配置文件" class="headerlink" title="5.4生成配置文件"></a>5.4生成配置文件</h4><p><code>yum 安装方式不需要此步骤，因为已经自动生产了supervisord.conf 和supervisord.d文件夹</code></p>
<p>安装完 supervisor 之后，可以运行<code>echo_supervisord_conf</code> 命令输出默认的配置项，也可以重定向到一个配置文件里：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure>
<h4 id="5-5启动"><a href="#5-5启动" class="headerlink" title="5.5启动"></a>5.5启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c /etc/supervisord.conf</div></pre></td></tr></table></figure>
<h3 id="6-配置文件-etc-supervisord-conf"><a href="#6-配置文件-etc-supervisord-conf" class="headerlink" title="6. 配置文件/etc/supervisord.conf"></a>6. 配置文件/etc/supervisord.conf</h3><p>上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。yum方式安装，会自动配置。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[include]</span></div><div class="line"><span class="attr">files</span> = supervisord.d/*.ini    ; 可以是 *.conf 或 *.ini</div></pre></td></tr></table></figure>
<p>/etc/supervisord.conf 参数说明</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</div><div class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</div><div class="line"><span class="section">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</span></div><div class="line"> </div><div class="line">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class="line"><span class="section">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span></div><div class="line">;username=user              ; 登录管理后台的用户名</div><div class="line">;password=123               ; 登录管理后台的密码</div><div class="line"> </div><div class="line">[supervisord]</div><div class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</div><div class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</div><div class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</div><div class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</div><div class="line">pidfile=/tmp/supervisord.pid ; pid 文件</div><div class="line">nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动</div><div class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</div><div class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</div><div class="line"> </div><div class="line">; the below section must remain in the config file for RPC</div><div class="line">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class="line">; added by defining them in separate rpcinterface: sections</div><div class="line"><span class="section">[rpcinterface:supervisor]</span></div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"> </div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</div><div class="line"><span class="section">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span></div><div class="line"> </div><div class="line">; 包含其他的配置文件</div><div class="line">[<span class="keyword">include</span>]</div><div class="line">files = /etc/supervisord.d/*.ini    ; 可以是 *.conf 或 *.ini</div></pre></td></tr></table></figure>
<h3 id="7-添加一个被管理的进程"><a href="#7-添加一个被管理的进程" class="headerlink" title="7. 添加一个被管理的进程"></a>7. 添加一个被管理的进程</h3><p>我们假如有一个hello.py</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import web</div><div class="line">urls = (     <span class="string">'/(.*)'</span>,<span class="string">'hello'</span> )</div><div class="line">app = web.application(urls, globals())</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'hello: '</span> + name</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>所以直接在命令行启动的方式可能是这样的：(需要先安装web.py <code>easy_install web.py</code>)</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span>  /<span class="keyword">opt</span>/hello.<span class="keyword">py</span></div></pre></td></tr></table></figure>
<p>现在编写一份配置文件<code>/etc/supervisord.d/hello.ini</code>来管理这个进程</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">[program:hello]</span></div><div class="line"><span class="attr">directory</span> = /opt    ; 程序的启动目录</div><div class="line"><span class="attr">command</span> = python /opt/hello.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</div><div class="line"><span class="attr">autostart</span> = <span class="literal">true</span>     ; 在 supervisord 启动的时候也自动启动</div><div class="line"><span class="attr">startsecs</span> = <span class="number">5</span>        ; 启动 <span class="number">5</span> 秒后没有异常退出，就当作已经正常启动了</div><div class="line"><span class="attr">autorestart</span> = <span class="literal">true</span>   ; 程序异常退出后自动重启</div><div class="line"><span class="attr">startretries</span> = <span class="number">3</span>     ; 启动失败自动重试次数，默认是 <span class="number">3</span></div><div class="line"><span class="attr">user</span> = xqzt          ; 用哪个用户启动</div><div class="line"><span class="attr">redirect_stderr</span> = <span class="literal">true</span>  ; 把 stderr 重定向到 stdout，默认 <span class="literal">false</span></div><div class="line"><span class="attr">stdout_logfile_maxbytes</span> = <span class="number">20</span>MB  ; stdout 日志文件大小，默认 <span class="number">50</span>MB</div><div class="line"><span class="attr">stdout_logfile_backups</span> = <span class="number">20</span>     ; stdout 日志文件备份数</div><div class="line"><span class="comment">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span></div><div class="line"><span class="attr">stdout_logfile</span> = /var/log/supervisor/hello.log</div></pre></td></tr></table></figure>
<p>一份配置文件至少需要一个 <code>[program:x]</code> 部分的配置，来告诉 supervisord 需要管理那个进程。<code>[program:x]</code> 语法中的 <code>x</code> 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">supervisor</span>&gt; <span class="selector-tag">status</span></div><div class="line"><span class="selector-tag">hello</span>                            <span class="selector-tag">RUNNING</span>   <span class="selector-tag">pid</span> 2809, <span class="selector-tag">uptime</span> 0<span class="selector-pseudo">:00</span><span class="selector-pseudo">:06</span></div></pre></td></tr></table></figure>
<h3 id="8-使用-supervisorctl"><a href="#8-使用-supervisorctl" class="headerlink" title="8. 使用 supervisorctl"></a>8. 使用 supervisorctl</h3><p>Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。supervisorctl 这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了，也可以直接在 bash 终端运行。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># supervisorctl --<span class="keyword">help</span></div><div class="line">supervisorctl -- control applications run by supervisord from the cmd <span class="built_in">line</span>.</div><div class="line"></div><div class="line">Usage: /usr/bin/supervisorctl [<span class="keyword">options</span>] [action [arguments]]</div><div class="line"></div><div class="line">Option<span class="variable">s:</span></div><div class="line">-<span class="keyword">c</span>/--configuration -- configuration <span class="keyword">file</span> path (default /etc/supervisord.<span class="keyword">conf</span>)</div><div class="line">-h/--<span class="keyword">help</span> -- <span class="keyword">print</span> usage message <span class="built_in">and</span> <span class="keyword">exit</span></div><div class="line">-i/--interactive -- start <span class="keyword">an</span> interactive <span class="keyword">shell</span> after executing commands</div><div class="line">-s/--serverurl URL -- URL <span class="keyword">on</span> which supervisord server <span class="keyword">is</span> listening</div><div class="line">     (default <span class="string">"http://localhost:9001"</span>).</div><div class="line">-<span class="keyword">u</span>/--username -- username <span class="keyword">to</span> use <span class="keyword">for</span> authentication with server</div><div class="line">-<span class="keyword">p</span>/--password -- password <span class="keyword">to</span> use <span class="keyword">for</span> authentication with server</div><div class="line">-r/--<span class="keyword">history</span>-<span class="keyword">file</span> -- keep <span class="keyword">a</span> readline <span class="keyword">history</span> (<span class="keyword">if</span> readline <span class="keyword">is</span> available)</div></pre></td></tr></table></figure>
<p>输入help,可以查看支持的命令及用法</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">supervisor&gt; <span class="keyword">help</span></div><div class="line"></div><div class="line">default commands (<span class="built_in">type</span> <span class="keyword">help</span> <span class="symbol">&lt;topic&gt;</span>):</div><div class="line">=====================================</div><div class="line"><span class="built_in">add</span>    clear  fg        <span class="keyword">open</span>  <span class="keyword">quit</span>    <span class="built_in">remove</span>  restart   start   <span class="keyword">stop</span>  <span class="keyword">update</span> </div><div class="line">avail  <span class="keyword">exit</span>   maintail  pid   reload  reread  shutdown  status  tail  <span class="keyword">version</span></div><div class="line"></div><div class="line">supervisor&gt; <span class="keyword">help</span> start</div><div class="line">start <span class="symbol">&lt;name&gt;</span>		Start <span class="keyword">a</span> process</div><div class="line">start <span class="symbol">&lt;gname&gt;</span>:*		Start <span class="keyword">all</span> processes in <span class="keyword">a</span> group</div><div class="line">start <span class="symbol">&lt;name&gt;</span> <span class="symbol">&lt;name&gt;</span>	Start multiple processes <span class="built_in">or</span> groups</div><div class="line">start <span class="keyword">all</span>		Start <span class="keyword">all</span> processes</div></pre></td></tr></table></figure>
<p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 停止某一个进程，program_name 为 [program:x] 里的 x</span></div><div class="line">supervisorctl stop program_name</div><div class="line"><span class="meta">#</span><span class="bash"> 启动某个进程</span></div><div class="line">supervisorctl start program_name</div><div class="line"><span class="meta">#</span><span class="bash"> 重启某个进程</span></div><div class="line">supervisorctl restart program_name</div><div class="line"><span class="meta">#</span><span class="bash"> 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)</span></div><div class="line">supervisorctl stop groupworker:</div><div class="line"><span class="meta">#</span><span class="bash"> 结束 groupworker:name1 这个进程 (start，restart 同理)</span></div><div class="line">supervisorctl stop groupworker:name1</div><div class="line"><span class="meta">#</span><span class="bash"> 停止全部进程，注：start、restart、stop 都不会载入最新的配置文件</span></div><div class="line">supervisorctl stop all</div><div class="line"><span class="meta">#</span><span class="bash"> 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span></div><div class="line">supervisorctl reload</div><div class="line"><span class="meta">#</span><span class="bash"> 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span></div><div class="line">supervisorctl update</div></pre></td></tr></table></figure>
<h3 id="9-supervisor-Web-UI"><a href="#9-supervisor-Web-UI" class="headerlink" title="9. supervisor Web UI"></a>9. supervisor Web UI</h3><p>除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。将supervisord.conf中[inet_http_server]部分做相应配置，在supervisorctl中reload即可启动web管理界面</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">[inet_http_server]</span> <span class="comment">; HTTP 服务器，提供 web 管理界面</span></div><div class="line"><span class="attr">port</span>=<span class="number">172.17</span>.<span class="number">84.64</span>:<span class="number">9001</span> ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class="line"><span class="attr">username</span>=user ; 登录管理后台的用户名</div><div class="line"><span class="attr">password</span>=<span class="number">123</span> ; 登录管理后台的密码</div></pre></td></tr></table></figure>
<p>在浏览器中输入<a href="http://127.0.0.1:9001，可进入web管理界面" target="_blank" rel="external">http://127.0.0.1:9001，可进入web管理界面</a></p>
<p><img src="http://image.wangshengzhuang.com/17-5-11/65946564-file_1494502213044_176b5.png" alt=""></p>
<h3 id="10-将多个进程按组管理"><a href="#10-将多个进程按组管理" class="headerlink" title="10.  将多个进程按组管理"></a>10.  将多个进程按组管理</h3><p>Supervisor 同时还提供了另外一种进程组的管理方式，通过这种方式，可以使用 supervisorctl 命令来管理一组进程。跟 [program:x] 的进程组不同的是，这里的进程是一个个的 [program:x] 。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">group</span>:thegroupname]</div><div class="line">programs=progname1,progname2  ; each refers <span class="keyword">to</span> <span class="string">'x'</span> <span class="built_in">in</span> [program:x] definitions</div><div class="line"><span class="built_in">priority</span>=<span class="number">999</span>                  ; the relative start <span class="built_in">priority</span> (<span class="keyword">default</span> <span class="number">999</span>)</div></pre></td></tr></table></figure>
<p>当添加了上述配置后，<code>progname1</code> 和 <code>progname2</code> 的进程名就会变成 <code>thegroupname:progname1</code> 和 <code>thegroupname:progname2</code> 以后就要用这个名字来管理进程了，而不是之前的 <code>progname1</code>。</p>
<p>以后执行 <code>supervisorctl stop thegroupname:</code> 就能同时结束 <code>progname1</code> 和 <code>progname2</code>，执行 <code>supervisorctl stop thegroupname:progname1</code> 就能结束 <code>progname1</code>。如下所示</p>
<p><code>/etc/supervisord.d/hello.ini</code>文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[group:group1]</div><div class="line">programs=hello</div><div class="line"></div><div class="line">[program:hello]</div><div class="line">directory = /opt    ; 程序的启动目录</div><div class="line">command = python /opt/hello.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</div><div class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</div><div class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</div><div class="line">autorestart = true   ; 程序异常退出后自动重启</div><div class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</div><div class="line">user = xqzt          ; 用哪个用户启动</div><div class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</div><div class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</div><div class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</div><div class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</div><div class="line">; stdout_logfile = /var/log/supervisor/hello.log</div></pre></td></tr></table></figure>
<p>进程状态</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@centos7 etc]</span># <span class="selector-tag">supervisorctl</span> </div><div class="line"><span class="selector-tag">group1</span><span class="selector-pseudo">:hello</span>                     <span class="selector-tag">RUNNING</span>   <span class="selector-tag">pid</span> 2842, <span class="selector-tag">uptime</span> 0<span class="selector-pseudo">:02</span><span class="selector-pseudo">:53</span></div></pre></td></tr></table></figure>
<h3 id="11-Subprocesses进程状态变化"><a href="#11-Subprocesses进程状态变化" class="headerlink" title="11. Subprocesses进程状态变化"></a>11. Subprocesses进程状态变化</h3><p><img src="http://supervisord.org/_images/subprocess-transitions.png" alt="http://supervisord.org/_images/subprocess-transitions.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://supervisord.org/#" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了supervisor的安装、使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wangshengzhuang.com/17-5-11/27833402-file_1494510301732_82f7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="Supervisor" scheme="http://wangshengzhuang.com/categories/Linux/Supervisor/"/>
    
    
      <category term="supervisor" scheme="http://wangshengzhuang.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>nslookup命令</title>
    <link href="http://wangshengzhuang.com/2017/05/25/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/nslookup%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/25/Linux/每天一个Linux命令/nslookup命令/</id>
    <published>2017-05-25T14:55:56.000Z</published>
    <updated>2017-06-29T15:08:22.847Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: nslookup命令简介</p>
<a id="more"></a>
<h3 id="1-命令简介"><a href="#1-命令简介" class="headerlink" title="1. 命令简介"></a>1. 命令简介</h3><p> nslookup命令是常用域名查询工具，就是查DNS信息用的命令。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install <span class="built_in">bind</span>-utils</div></pre></td></tr></table></figure>
<h3 id="3-工作模式"><a href="#3-工作模式" class="headerlink" title="3. 工作模式"></a>3. 工作模式</h3><p>nslookup有两种工作模式，即“交互模式”和“非交互模式”。在“交互模式”下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。而在“非交互模式”下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。</p>
<h4 id="3-1-交互模式"><a href="#3-1-交互模式" class="headerlink" title="3.1. 交互模式"></a>3.1. 交互模式</h4><p>进入交互模式，总共有两种方法。</p>
<p>第一种方法，直接输入nslookup命令，不加任何参数，则直接进入交互模式，此时nslookup会连接到默认的域名服务器（即/etc/resolv.conf的第一个dns地址）。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nslookup</div><div class="line">&gt; www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></div><div class="line">Server:         <span class="number">192.168</span>.<span class="number">0.1</span> <span class="comment">//上连的DNS服务器</span></div><div class="line">Address:        <span class="number">192.168</span>.<span class="number">0.1</span>#<span class="number">53</span> <span class="comment">//上连的DNS服务器的IP地址与端口号</span></div><div class="line"></div><div class="line">Non-authoritative answer: <span class="comment">//非权威答案，即从上连DNS服务器的本地缓存中读取出的值，而非实际去查询到的值</span></div><div class="line">www<span class="selector-class">.baidu</span><span class="selector-class">.com</span>   canonical name = www<span class="selector-class">.a</span><span class="selector-class">.shifen</span><span class="selector-class">.com</span>. <span class="comment">//说明www.baidu.com有个别名叫www.a.shifen.com</span></div><div class="line">Name:   www<span class="selector-class">.a</span><span class="selector-class">.shifen</span><span class="selector-class">.com</span> <span class="comment">//域名www.a.shifen.com</span></div><div class="line">Address: <span class="number">119.75</span>.<span class="number">217.56</span> <span class="comment">//对应的IP地址之一</span></div><div class="line">Name:   www<span class="selector-class">.a</span><span class="selector-class">.shifen</span><span class="selector-class">.com</span></div><div class="line">Address: <span class="number">119.75</span>.<span class="number">218.77</span><span class="comment">//对应的IP地址之二</span></div></pre></td></tr></table></figure>
<p>如果想更换DNS, 使用Server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># nslookup</span></div><div class="line">&gt; www.baidu.com</div><div class="line">Server:		192.168.0.1</div><div class="line">Address:	192.168.0.1<span class="comment">#53</span></div><div class="line"></div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 183.232.231.172</div><div class="line">&gt; server 8.8.8.8</div><div class="line">Default server: 8.8.8.8</div><div class="line">Address: 8.8.8.8<span class="comment">#53</span></div><div class="line">&gt; www.baidu.com</div><div class="line">Server:		8.8.8.8</div><div class="line">Address:	8.8.8.8<span class="comment">#53</span></div><div class="line"></div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.91</div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.92</div></pre></td></tr></table></figure>
<p>第二种方法，是支持选定不同域名服务器的。需要设置第一个参数为“-”，然后第二个参数是设置要连接的域名服务器主机名或IP地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># nslookup - 8.8.8.8</span></div><div class="line">&gt; www.baidu.com</div><div class="line">Server:		8.8.8.8</div><div class="line">Address:	8.8.8.8<span class="comment">#53</span></div><div class="line"></div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.92</div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.91</div></pre></td></tr></table></figure>
<h4 id="3-2-非交互模式"><a href="#3-2-非交互模式" class="headerlink" title="3.2. 非交互模式"></a>3.2. 非交互模式</h4><p>直接在nslookup命令后加上所要查询的IP或主机名，那么就进入了非交互模式。当然，这个时候你也可以在第二个参数位置设置所要连接的域名服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@mysql001 ~]<span class="comment"># nslookup www.baidu.com - 8.8.8.8</span></div><div class="line">Server:		8.8.8.8</div><div class="line">Address:	8.8.8.8<span class="comment">#53</span></div><div class="line"></div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.92</div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.91</div><div class="line"></div><div class="line">[root@mysql001 ~]<span class="comment"># nslookup www.baidu.com 8.8.8.8</span></div><div class="line">Server:		8.8.8.8</div><div class="line">Address:	8.8.8.8<span class="comment">#53</span></div><div class="line"></div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.91</div><div class="line">Name:	www.baidu.com</div><div class="line">Address: 111.13.100.92</div></pre></td></tr></table></figure>
<h3 id="4-常见的DNS服务器推荐"><a href="#4-常见的DNS服务器推荐" class="headerlink" title="4. 常见的DNS服务器推荐"></a>4. 常见的DNS服务器推荐</h3><table>
<thead>
<tr>
<th>DNS</th>
<th>地址</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Google DNS</td>
<td>8.8.8.8</td>
<td></td>
</tr>
<tr>
<td>114 DNS</td>
<td>114.114.114.114</td>
<td>国内用户量巨大的DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户，可以有效预防劫持</td>
</tr>
<tr>
<td>阿里DNS</td>
<td>223.5.5.5        223.6.6.6</td>
<td>全球数百台服务器组成的集群 稳定性好</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: nslookup命令简介&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="nslookup" scheme="http://wangshengzhuang.com/tags/nslookup/"/>
    
  </entry>
  
  <entry>
    <title>cp命令</title>
    <link href="http://wangshengzhuang.com/2017/05/24/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/cp%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/24/Linux/每天一个Linux命令/cp命令/</id>
    <published>2017-05-24T14:55:56.000Z</published>
    <updated>2017-06-29T15:49:26.169Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: cp（Copy file）：将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>
<a id="more"></a>
<h2 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h2><p><strong>cp</strong>（Copy file）：将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>
<h2 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp [选项]... [-T] 源文件 目标文件</div><div class="line">　或：cp [选项]... 源文件... 目录</div><div class="line">　或：cp [选项]... -t 目录 源文件...</div></pre></td></tr></table></figure>
<h2 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  <span class="_">-a</span>, --archive       等于<span class="_">-d</span>R --preserve=all,与同时指定 -dpR 这三个选项效果一样，用于复制整个目录，包括目录中的子目录等都递归的复制，而且还要保持文件的访问模式，所有者，时间戳等属性与原文件一样。</div><div class="line">      --backup[=CONTROL        为每个已存在的目标文件创建备份</div><div class="line">  -b                类似--backup 但不接受参数</div><div class="line">      --copy-contents        在递归处理是复制特殊文件内容</div><div class="line">  <span class="_">-d</span>                等于--no-dereference --preserve=links</div><div class="line">  <span class="_">-f</span>, --force            如果目标文件无法打开则将其移除并重试(当 -n 选项存在时则不需再选此项)</div><div class="line">  -i, --interactive        覆盖前询问(使前面的 -n 选项失效),默认cp命令覆盖目标文件时是不会提示的，很多Linux发行版里的cp都被设置别名`cp -i`,其实作用就是给用户一个提醒。如果你不想被提示，那么请这样输入：\cp <span class="built_in">source</span> target，或者使用cp命令的绝对路径/bin/cp</div><div class="line">  -H                跟随源文件中的命令行符号链接</div><div class="line">  <span class="_">-l</span>, --link            对源文件建立硬链接，而非复制文件</div><div class="line">-L, --dereference        总是跟随符号链接</div><div class="line">  -n, --no-clobber        不要覆盖已存在的文件(使前面的 -i 选项失效)</div><div class="line">  -P, --no-dereference        不跟随源文件中的符号链接</div><div class="line">  -p                等于--preserve=模式,所有权,时间戳</div><div class="line">      --preserve[=属性列表    保持指定的属性(默认：模式,所有权,时间戳)，如果可能保持附加属性：环境、链接、xattr 等</div><div class="line">  -c                           same as --preserve=context</div><div class="line">      --sno-preserve=属性列表    不保留指定的文件属性</div><div class="line">      --parents            复制前在目标目录创建来源文件路径中的所有目录</div><div class="line">  -R, -r, --recursive        递归复制目录及其子目录内的所有内容</div><div class="line">      --reflink[=WHEN]        控制克隆/CoW 副本。请查看下面的内如。</div><div class="line">      --remove-destination    尝试打开目标文件前先删除已存在的目的地文件 (相对于 --force 选项)</div><div class="line">      --sparse=WHEN        控制创建稀疏文件的方式</div><div class="line">      --strip-trailing-slashes    删除参数中所有源文件/目录末端的斜杠</div><div class="line">  <span class="_">-s</span>, --symbolic-link        只创建符号链接而不复制文件</div><div class="line">  -S, --suffix=后缀        自行指定备份文件的后缀</div><div class="line">  -t,  --target-directory=目录    将所有参数指定的源文件/目录 复制至目标目录</div><div class="line">  -T, --no-target-directory    将目标目录视作普通文件</div><div class="line">  -u, --update                 使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</div><div class="line">  -v, --verbose                详细显示命令执行的操作。</div><div class="line">  -x, --one-file-system        复制的文件或目录存放的文件系统，必须与cp指令执行时所处的文件系统相同，否则不复制，亦不处理位于其他分区的文件</div><div class="line">  -Z, --context=CONTEXT        <span class="built_in">set</span> security context of copy to CONTEXT</div></pre></td></tr></table></figure>
<h2 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h2><h4 id="实例1：将文件a-txt复制成文件b-txt"><a href="#实例1：将文件a-txt复制成文件b-txt" class="headerlink" title="实例1：将文件a.txt复制成文件b.txt"></a>实例1：将文件a.txt复制成文件b.txt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp a.txt  b.txt</span></div></pre></td></tr></table></figure>
<h4 id="实例2：将文件a-txt复制成文件b-txt，显示详细信息"><a href="#实例2：将文件a-txt复制成文件b-txt，显示详细信息" class="headerlink" title="实例2：将文件a.txt复制成文件b.txt，显示详细信息"></a>实例2：将文件a.txt复制成文件b.txt，显示详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -v a.txt  b.txt</span></div><div class="line">`a.txt<span class="string">' -&gt; `b.txt'</span></div></pre></td></tr></table></figure>
<h4 id="实例3：复制文件，只有源文件较目的文件的修改时间新时，才复制文件"><a href="#实例3：复制文件，只有源文件较目的文件的修改时间新时，才复制文件" class="headerlink" title="实例3：复制文件，只有源文件较目的文件的修改时间新时，才复制文件"></a>实例3：复制文件，只有源文件较目的文件的修改时间新时，才复制文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -uv  a.txt  c.txt</span></div></pre></td></tr></table></figure>
<h4 id="实例4：采用交互方式将文件a-txt复制成文件d-txt"><a href="#实例4：采用交互方式将文件a-txt复制成文件d-txt" class="headerlink" title="实例4：采用交互方式将文件a.txt复制成文件d.txt"></a>实例4：采用交互方式将文件a.txt复制成文件d.txt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -iv a.txt  d.txt</span></div><div class="line">cp: overwrite `d.txt<span class="string">'? y</span></div><div class="line">`a.txt' -&gt; `d.txt<span class="string">'</span></div></pre></td></tr></table></figure>
<h4 id="实例5：将文件a-txt复制成d-txt，因为目的文件已经存在，所以指定使用强制复制的模式"><a href="#实例5：将文件a-txt复制成d-txt，因为目的文件已经存在，所以指定使用强制复制的模式" class="headerlink" title="实例5：将文件a.txt复制成d.txt，因为目的文件已经存在，所以指定使用强制复制的模式"></a>实例5：将文件a.txt复制成d.txt，因为目的文件已经存在，所以指定使用强制复制的模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -fv a.txt  d.txt</span></div><div class="line">`a.txt<span class="string">' -&gt; `d.txt'</span></div></pre></td></tr></table></figure>
<h4 id="实例6：递归将目录dir1复制到目录dir2下面（此时dir2不存在）"><a href="#实例6：递归将目录dir1复制到目录dir2下面（此时dir2不存在）" class="headerlink" title="实例6：递归将目录dir1复制到目录dir2下面（此时dir2不存在）"></a>实例6：递归将目录dir1复制到目录dir2下面（此时dir2不存在）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -rv dir1 dir2</span></div><div class="line">`dir1<span class="string">' -&gt; `dir2'</span></div><div class="line">`dir1/c.txt<span class="string">' -&gt; `dir2/c.txt'</span></div><div class="line">`dir1/a.txt<span class="string">' -&gt; `dir2/a.txt'</span></div><div class="line">`dir1/b.txt<span class="string">' -&gt; `dir2/b.txt'</span></div><div class="line">`dir1/d.txt<span class="string">' -&gt; `dir2/d.txt'</span></div></pre></td></tr></table></figure>
<h4 id="实例7：递归将目录dir1复制到目录dir2下面（此时dir2已经存在）"><a href="#实例7：递归将目录dir1复制到目录dir2下面（此时dir2已经存在）" class="headerlink" title="实例7：递归将目录dir1复制到目录dir2下面（此时dir2已经存在）"></a>实例7：递归将目录dir1复制到目录dir2下面（此时dir2已经存在）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -rv  dir1  dir2</span></div><div class="line">`dir1/c.txt<span class="string">' -&gt; `dir2/dir1/c.txt'</span></div><div class="line">`dir1/a.txt<span class="string">' -&gt; `dir2/dir1/a.txt'</span></div><div class="line">`dir1/b.txt<span class="string">' -&gt; `dir2/dir1/b.txt'</span></div><div class="line">`dir1/d.txt<span class="string">' -&gt; `dir2/dir1/d.txt'</span></div></pre></td></tr></table></figure>
<h4 id="实例8：复制时保留文件属性"><a href="#实例8：复制时保留文件属性" class="headerlink" title="实例8：复制时保留文件属性"></a>实例8：复制时保留文件属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># ll</span></div><div class="line">total 0</div><div class="line">-rwxrwxrwx 1 root root 0 Apr 16 16:54 a.txt</div><div class="line">[root@cent6 directory]<span class="comment"># cp a.txt  /tmp/a1.txt</span></div><div class="line">[root@cent6 directory]<span class="comment"># cp -p a.txt  /tmp/a2.txt</span></div><div class="line">[root@cent6 directory]<span class="comment"># ll /tmp</span></div><div class="line">total 12</div><div class="line">-rwxr-xr-x  1 root  root     0 Apr 16 16:56 a1.txt</div><div class="line">-rwxrwxrwx  1 root  root     0 Apr 16 16:54 a2.txt</div></pre></td></tr></table></figure>
<h4 id="实例9：复制时产生备份文件"><a href="#实例9：复制时产生备份文件" class="headerlink" title="实例9：复制时产生备份文件"></a>实例9：复制时产生备份文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -bv a.txt  /tmp/</span></div><div class="line">`a.txt<span class="string">' -&gt; `/tmp/a.txt'</span></div><div class="line">[root@cent6 directory]<span class="comment"># cp -bv a.txt  /tmp/</span></div><div class="line">`a.txt<span class="string">' -&gt; `/tmp/a.txt'</span> (backup: `/tmp/a.txt~<span class="string">')</span></div><div class="line">[root@cent6 directory]# ll /tmp</div><div class="line">total 0</div><div class="line">-rwxr-xr-x 1 root root 0 Apr 16 17:02 a.txt</div><div class="line">-rwxr-xr-x 1 root root 0 Apr 16 17:02 a.txt~</div></pre></td></tr></table></figure>
<h4 id="实例10：创建文件的硬链接（有同样的inode），而不是拷贝它们"><a href="#实例10：创建文件的硬链接（有同样的inode），而不是拷贝它们" class="headerlink" title="实例10：创建文件的硬链接（有同样的inode），而不是拷贝它们"></a>实例10：创建文件的硬链接（有同样的inode），而不是拷贝它们</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># cp -l a.txt  b.txt</span></div><div class="line">[root@oracledb dir1]<span class="comment"># cp a.txt  c.txt</span></div><div class="line">[root@oracledb dir1]<span class="comment"># ls -li</span></div><div class="line">总用量 0</div><div class="line">4718769 -rw-r--r--<span class="number"> 2 </span>root root<span class="number"> 0 </span>4月 <span class="number"> 16 </span>17:18 a.txt</div><div class="line">4718769 -rw-r--r--<span class="number"> 2 </span>root root<span class="number"> 0 </span>4月 <span class="number"> 16 </span>17:18 b.txt</div><div class="line">4718772 -rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>4月 <span class="number"> 16 </span>17:28 c.txt</div></pre></td></tr></table></figure>
<h4 id="实例11：复制的-a-txt-建立一个连结档-a-link-txt"><a href="#实例11：复制的-a-txt-建立一个连结档-a-link-txt" class="headerlink" title="实例11：复制的 a.txt 建立一个连结档 a_link.txt"></a>实例11：复制的 a.txt 建立一个连结档 a_link.txt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@cent6 directory]<span class="comment"># cp -sv a.txt  a_link.txt</span></div><div class="line">`a.txt<span class="string">' -&gt; `a_link.txt'</span></div><div class="line">[root@cent6 directory]<span class="comment"># ll</span></div><div class="line">total 0</div><div class="line">lrwxrwxrwx 1 root root 5 Apr 16 17:06 a_link.txt -&gt; a.txt</div><div class="line">-rwxrwxrwx 1 root root 0 Apr 16 16:54 a.txt</div></pre></td></tr></table></figure>
<h4 id="实例12-不随符号链接拷贝原文件"><a href="#实例12-不随符号链接拷贝原文件" class="headerlink" title="实例12:不随符号链接拷贝原文件"></a>实例12:不随符号链接拷贝原文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">lrwxrwxrwx 1 root root 5 4月  16 17:30 a_link.txt -&gt; a.txt</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 17:18 a.txt</div><div class="line">[root@oracledb dir1]<span class="comment"># cp -P a_link.txt  c.txt</span></div><div class="line">[root@oracledb dir1]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">lrwxrwxrwx 1 root root 5 4月  16 17:30 a_link.txt -&gt; a.txt</div><div class="line">-rw-r--r-- 1 root root 0 4月  16 17:18 a.txt</div><div class="line">lrwxrwxrwx 1 root root 5 4月  16 17:31 c.txt -&gt; a.txt</div></pre></td></tr></table></figure>
<h4 id="实例13-指定备份文件尾标"><a href="#实例13-指定备份文件尾标" class="headerlink" title="实例13:指定备份文件尾标"></a>实例13:指定备份文件尾标</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@oracledb dir1]<span class="comment"># cp -v -S _bak a.txt   /tmp/</span></div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"/tmp/a.txt"</span></div><div class="line">[root@oracledb dir1]<span class="comment"># cp -v -S _bak a.txt   /tmp/</span></div><div class="line">cp：是否覆盖<span class="string">"/tmp/a.txt"</span>？ y</div><div class="line"><span class="string">"a.txt"</span> -&gt; <span class="string">"/tmp/a.txt"</span> (备份：<span class="string">"/tmp/a.txt_bak"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: cp（Copy file）：将源文件复制至目标文件，或将多个源文件复制至目标目录。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="cp" scheme="http://wangshengzhuang.com/tags/cp/"/>
    
  </entry>
  
  <entry>
    <title>使用Sysbench进行MySQL压力测试</title>
    <link href="http://wangshengzhuang.com/2017/05/23/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/Sysbench%E8%BF%9B%E8%A1%8CMySQL%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>http://wangshengzhuang.com/2017/05/23/MySQL/性能测试/Sysbench进行MySQL压力测试/</id>
    <published>2017-05-23T14:29:25.000Z</published>
    <updated>2017-06-28T14:59:22.327Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何使用Sysbench进行MySQL压力测试。</p>
<a id="more"></a>
<p>安装完sysbench后,<code>/usr/share/sysbench</code>下对数据库压力测试的lua文件：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. bulk_insert<span class="selector-class">.lua</span>  批量写入操作</div><div class="line"></div><div class="line"><span class="number">2</span>. oltp_delete<span class="selector-class">.lua</span> 写入和删除并行操作</div><div class="line"></div><div class="line"><span class="number">3</span>. oltp_insert<span class="selector-class">.lua</span>  纯写入操作</div><div class="line"></div><div class="line"><span class="number">4</span>. oltp_point_select<span class="selector-class">.lua</span>  只读操作，条件为唯一索引列</div><div class="line"></div><div class="line"><span class="number">5</span>. oltp_read_only<span class="selector-class">.lua</span>  只读操作，包含聚合，去重等操作</div><div class="line"></div><div class="line"><span class="number">6</span>. oltp_read_write<span class="selector-class">.lua</span> 读写混合操作，最常用的脚本</div><div class="line"></div><div class="line"><span class="number">7</span>. oltp_update_index<span class="selector-class">.lua</span> 更新操作，通过主键进行更新</div><div class="line"></div><div class="line"><span class="number">8</span>. oltp_update_non_index<span class="selector-class">.lua</span> 更新操作，不通过索引列</div><div class="line"></div><div class="line"><span class="number">9</span>. oltp_write_only<span class="selector-class">.lua</span> 纯写操作，常用脚本，包括insert update delete</div><div class="line"></div><div class="line"><span class="number">10</span>. select_random_points<span class="selector-class">.lua</span> 随机集合只读操作，常用脚本，聚集索引列的selete <span class="keyword">in</span>操作</div><div class="line"></div><div class="line"><span class="number">11</span>. select_random_ranges<span class="selector-class">.lua</span> 随机范围只读操作，常用脚本，聚集索引列的selete between操作</div></pre></td></tr></table></figure>
<p>数据库测试分为3步：prepare(准备测试数据)，run(开始测试),cleanup(清除测试数据)</p>
<p>​    参数解析：</p>
<p>​        –db-driver：用到的数据库类型</p>
<p>​        –mysql-host：数据库的IP</p>
<p>​        –mysql-port：数据库的端口</p>
<p>​        –mysql-socket：socket的路径</p>
<p>​        –mysql-user：数据库用户名</p>
<p>​        –mysql-password：用户密码</p>
<p>​        –mysql-db：数据库名字，默认为sysbench，需要提前创建创好</p>
<p>​        –tables：生成表的个数</p>
<p>​        –table-size：每个表的行数</p>
<p>​        –report-interval：每隔多久在屏幕打印一次信息</p>
<p>​        –time：压测时间</p>
<p>​        –threads：启动多少个线程，即模拟多少个用户</p>
<p>创建测试数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">sample</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</div><div class="line"></div><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span>  sample.*  <span class="keyword">TO</span> <span class="string">'app_user'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'admin_123'</span></div></pre></td></tr></table></figure>
<p>准备测试数据： 在本地数据库的dba_test库中，初始化10张表（sbtest1~sbtest10），存储引擎是innodb，每张表50万数据。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@localhost sysbench]# sysbench /usr/share/sysbench/oltp_read_write.lua --db-driver=mysql --mysql-host=10.10.14.10 --mysql-port=3306  --mysql-user=app_user --mysql-password=admin_123 --mysql-db=sample --tables=10 --table-size=500000 --time=120 --report-interval=10 --threads=100 prepare</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Creating table 'sbtest4'...</div><div class="line">Creating table 'sbtest6'...</div><div class="line">Creating table 'sbtest5'...</div><div class="line">Creating table 'sbtest8'...</div><div class="line">Creating table 'sbtest1'...</div><div class="line">Creating table 'sbtest2'...</div><div class="line">Creating table 'sbtest9'...</div><div class="line">Creating table 'sbtest3'...</div><div class="line">Creating table 'sbtest10'...</div><div class="line">Creating table 'sbtest7'...</div><div class="line">Inserting 500000 records into 'sbtest5'</div><div class="line">Inserting 500000 records into 'sbtest6'</div><div class="line">Inserting 500000 records into 'sbtest8'</div><div class="line">Inserting 500000 records into 'sbtest9'</div><div class="line">Inserting 500000 records into 'sbtest4'</div><div class="line">Inserting 500000 records into 'sbtest10'</div><div class="line">Inserting 500000 records into 'sbtest1'</div><div class="line">Inserting 500000 records into 'sbtest3'</div><div class="line">Inserting 500000 records into 'sbtest2'</div><div class="line">Inserting 500000 records into 'sbtest7'</div><div class="line">Creating a secondary index on 'sbtest9'...</div><div class="line">Creating a secondary index on 'sbtest2'...</div><div class="line">Creating a secondary index on 'sbtest3'...</div><div class="line">Creating a secondary index on 'sbtest6'...</div><div class="line">Creating a secondary index on 'sbtest10'...</div><div class="line">Creating a secondary index on 'sbtest5'...</div><div class="line">Creating a secondary index on 'sbtest8'...</div><div class="line">Creating a secondary index on 'sbtest4'...</div><div class="line">Creating a secondary index on 'sbtest1'...</div><div class="line">Creating a secondary index on 'sbtest7'...</div></pre></td></tr></table></figure>
<p>压测数据库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">[root@localhost sysbench]# sysbench /usr/share/sysbench/oltp_read_write.lua --db-driver=mysql --mysql-host=10.10.14.10 --mysql-port=3306  --mysql-user=app_user --mysql-password=admin_123 --mysql-db=sample --tables=10 --table-size=500000 --time=120 --report-interval=10 --threads=100 prepare</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Creating table 'sbtest4'...</div><div class="line">Creating table 'sbtest6'...</div><div class="line">Creating table 'sbtest5'...</div><div class="line">Creating table 'sbtest8'...</div><div class="line">Creating table 'sbtest1'...</div><div class="line">Creating table 'sbtest2'...</div><div class="line">Creating table 'sbtest9'...</div><div class="line">Creating table 'sbtest3'...</div><div class="line">Creating table 'sbtest10'...</div><div class="line">Creating table 'sbtest7'...</div><div class="line">Inserting 500000 records into 'sbtest5'</div><div class="line">Inserting 500000 records into 'sbtest6'</div><div class="line">Inserting 500000 records into 'sbtest8'</div><div class="line">Inserting 500000 records into 'sbtest9'</div><div class="line">Inserting 500000 records into 'sbtest4'</div><div class="line">Inserting 500000 records into 'sbtest10'</div><div class="line">Inserting 500000 records into 'sbtest1'</div><div class="line">Inserting 500000 records into 'sbtest3'</div><div class="line">Inserting 500000 records into 'sbtest2'</div><div class="line">Inserting 500000 records into 'sbtest7'</div><div class="line">Creating a secondary index on 'sbtest9'...</div><div class="line">Creating a secondary index on 'sbtest2'...</div><div class="line">Creating a secondary index on 'sbtest3'...</div><div class="line">Creating a secondary index on 'sbtest6'...</div><div class="line">Creating a secondary index on 'sbtest10'...</div><div class="line">Creating a secondary index on 'sbtest5'...</div><div class="line">Creating a secondary index on 'sbtest8'...</div><div class="line">Creating a secondary index on 'sbtest4'...</div><div class="line">Creating a secondary index on 'sbtest1'...</div><div class="line">Creating a secondary index on 'sbtest7'...</div><div class="line">[root@localhost sysbench]# sysbench /usr/share/sysbench/oltp_read_write.lua --db-driver=mysql --mysql-host=10.10.14.10 --mysql-port=3306  --mysql-user=app_user --mysql-password=admin_123 --mysql-db=sample --tables=10 --table-size=500000 --time=120 --report-interval=10 --threads=100 run</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 100</div><div class="line">Report intermediate results every 10 second(s)</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">[ 10s ] thds: 100 tps: 1463.35 qps: 29420.80 (r/w/o: 20611.00/5872.80/2937.00) lat (ms,95%): 118.92 err/s: 0.40 reconn/s: 0.00</div><div class="line">[ 20s ] thds: 100 tps: 1606.45 qps: 32128.43 (r/w/o: 22493.22/6422.31/3212.90) lat (ms,95%): 102.97 err/s: 0.00 reconn/s: 0.00</div><div class="line">[ 30s ] thds: 100 tps: 1621.80 qps: 32395.26 (r/w/o: 22665.67/6486.49/3243.10) lat (ms,95%): 104.84 err/s: 0.20 reconn/s: 0.00</div><div class="line">[ 40s ] thds: 100 tps: 1587.60 qps: 31800.89 (r/w/o: 22270.26/6354.62/3176.01) lat (ms,95%): 106.75 err/s: 0.30 reconn/s: 0.00</div><div class="line">[ 50s ] thds: 100 tps: 1621.99 qps: 32449.93 (r/w/o: 22716.28/6489.07/3244.58) lat (ms,95%): 101.13 err/s: 0.40 reconn/s: 0.00</div><div class="line">[ 60s ] thds: 100 tps: 1668.01 qps: 33364.65 (r/w/o: 23354.81/6673.73/3336.12) lat (ms,95%): 97.55 err/s: 0.30 reconn/s: 0.00</div><div class="line">[ 70s ] thds: 100 tps: 1639.89 qps: 32784.79 (r/w/o: 22947.13/6557.88/3279.79) lat (ms,95%): 101.13 err/s: 0.10 reconn/s: 0.00</div><div class="line">[ 80s ] thds: 100 tps: 1658.80 qps: 33172.77 (r/w/o: 23223.95/6630.91/3317.91) lat (ms,95%): 99.33 err/s: 0.10 reconn/s: 0.00</div><div class="line">[ 90s ] thds: 100 tps: 1592.40 qps: 31900.02 (r/w/o: 22325.71/6388.90/3185.40) lat (ms,95%): 102.97 err/s: 0.40 reconn/s: 0.00</div><div class="line">[ 100s ] thds: 100 tps: 1621.90 qps: 32414.24 (r/w/o: 22690.53/6480.01/3243.70) lat (ms,95%): 101.13 err/s: 0.20 reconn/s: 0.00</div><div class="line">[ 110s ] thds: 100 tps: 1646.10 qps: 32945.10 (r/w/o: 23069.93/6582.08/3293.09) lat (ms,95%): 99.33 err/s: 0.60 reconn/s: 0.00</div><div class="line">[ 120s ] thds: 100 tps: 1594.00 qps: 31879.15 (r/w/o: 22311.53/6379.41/3188.20) lat (ms,95%): 104.84 err/s: 0.20 reconn/s: 0.00</div><div class="line">SQL statistics:</div><div class="line">    queries performed:</div><div class="line">        read:                            2707040</div><div class="line">        write:                           773344</div><div class="line">        other:                           386688</div><div class="line">        total:                           3867072</div><div class="line">    transactions:                        193328 (1610.51 per sec.)</div><div class="line">    queries:                             3867072 (32214.55 per sec.)</div><div class="line">    ignored errors:                      32     (0.27 per sec.)</div><div class="line">    reconnects:                          0      (0.00 per sec.)</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          120.0398s</div><div class="line">    total number of events:              193328</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                 11.97</div><div class="line">         avg:                                 62.08</div><div class="line">         max:                                360.82</div><div class="line">         95th percentile:                    102.97</div><div class="line">         sum:                            12001678.41</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           1933.2800/32.79</div><div class="line">    execution time (avg/stddev):   120.0168/0.01</div></pre></td></tr></table></figure>
<p>删除测试数据：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysbench <span class="string">/usr/share/sysbench/oltp_read_only.lua</span> <span class="params">--db-driver=mysql</span> <span class="params">--mysql-host=10</span>.10.14.10 <span class="params">--mysql-port=3306</span>  <span class="params">--mysql-user=app_user</span> <span class="params">--mysql-password=admin_123</span> <span class="params">--mysql-db=sample</span> <span class="params">--tables=10</span> <span class="params">--table-size=500000</span> <span class="params">--time=120</span> <span class="params">--report-interval=10</span> <span class="params">--threads=100</span> cleanup</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.cnblogs.com/zhoujinyi/archive/2013/04/19/3029134.html" target="_blank" rel="external">sysbench 安装、使用和测试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何使用Sysbench进行MySQL压力测试。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/categories/MySQL/"/>
    
      <category term="性能测试" scheme="http://wangshengzhuang.com/categories/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Sysbench" scheme="http://wangshengzhuang.com/tags/Sysbench/"/>
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用Sysbench进行CPU、 内存、 IO 、线程、 mutex压力测试</title>
    <link href="http://wangshengzhuang.com/2017/05/22/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/Sysbench%E8%BF%9B%E8%A1%8CCPU%20%E5%86%85%E5%AD%98%20IO%20%E7%BA%BF%E7%A8%8B%20mutex%E6%B5%8B%E8%AF%95%E4%BE%8B%E5%AD%90/"/>
    <id>http://wangshengzhuang.com/2017/05/22/MySQL/性能测试/Sysbench进行CPU 内存 IO 线程 mutex测试例子/</id>
    <published>2017-05-22T14:29:25.000Z</published>
    <updated>2017-06-28T14:59:44.911Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何使用Sysbench进行CPU、 内存、 IO 、线程、 mutex压力测试。</p>
<a id="more"></a>
<h3 id="CPU测试"><a href="#CPU测试" class="headerlink" title="CPU测试"></a>CPU测试</h3><p><strong>sysbench  cpu help</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sysbench  cpu <span class="built_in">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">cpu options:</div><div class="line">  --cpu-max-prime=N upper <span class="built_in">limit</span> <span class="keyword">for</span> primes generator [10000] 最大质数发生器数量。默认是10000</div></pre></td></tr></table></figure>
<p>测试结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">➜  ~  sysbench cpu --cpu-max-prime=2000 run</div><div class="line"></div><div class="line"></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the <span class="built_in">test</span> with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers <span class="built_in">limit</span>: 2000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0001s</div><div class="line">    total number of events:              73827</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  0.12</div><div class="line">         avg:                                  0.13</div><div class="line">         max:                                  5.69</div><div class="line">         95th percentile:                      0.19</div><div class="line">         sum:                               9961.81</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           73827.0000/0.00</div><div class="line">    execution time (avg/stddev):   9.9618/0.00</div></pre></td></tr></table></figure>
<h3 id="内存测试"><a href="#内存测试" class="headerlink" title="内存测试"></a>内存测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sysbench  memory <span class="built_in">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">memory options:</div><div class="line">  --memory-block-size=SIZE    size of memory block <span class="keyword">for</span> <span class="built_in">test</span> [1K]  测试时内存块大小。默认是1K</div><div class="line">  --memory-total-size=SIZE    total size of data to transfer [100G] 传输数据的总大小。默认是100G</div><div class="line">  --memory-scope=STRING       memory access scope &#123;global,<span class="built_in">local</span>&#125; [global] 内存访问范围&#123;global,<span class="built_in">local</span>&#125;。默认是global</div><div class="line">  --memory-oper=STRING        <span class="built_in">type</span> of memory operations &#123;<span class="built_in">read</span>, write, none&#125; [write]     内存操作类型。&#123;<span class="built_in">read</span>, write, none&#125; 默认是write</div><div class="line">  --memory-access-mode=STRING memory access mode &#123;seq,rnd&#125; [seq] 存储器存取方式&#123;seq,rnd&#125; 默认是seq</div></pre></td></tr></table></figure>
<p>测试结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">sysbench memory --memory-block-size=8k --memory-total-size=1G run</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the <span class="built_in">test</span> with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Running memory speed <span class="built_in">test</span> with the following options:</div><div class="line">  block size: 8KiB</div><div class="line">  total size: 1024MiB</div><div class="line">  operation: write</div><div class="line">  scope: global</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">Total operations: 131072 (940750.90 per second)</div><div class="line"></div><div class="line">1024.00 MiB transferred (7349.62 MiB/sec)</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          0.1369s</div><div class="line">    total number of events:              131072</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  0.00</div><div class="line">         avg:                                  0.00</div><div class="line">         max:                                  1.18</div><div class="line">         95th percentile:                      0.00</div><div class="line">         sum:                                100.88</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           131072.0000/0.00</div><div class="line">    execution time (avg/stddev):   0.1009/0.00</div></pre></td></tr></table></figure>
<h3 id="I-O测试"><a href="#I-O测试" class="headerlink" title="I/O测试"></a>I/O测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sysbench fileio <span class="built_in">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">fileio options:</div><div class="line">  --file-num=N              number of files to create [128]  创建测试文件的数量。默认是128</div><div class="line">  --file-block-size=N       block size to use <span class="keyword">in</span> all IO operations [16384]  测试时文件块的大小。默认是16384(16K)</div><div class="line">  --file-total-size=SIZE    total size of files to create [2G]  测试文件的总大小。默认是2G</div><div class="line">  --file-test-mode=STRING   <span class="built_in">test</span> mode &#123;seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw&#125;  文件测试模式&#123;seqwr(顺序写), seqrewr(顺序读写), seqrd(顺序读), rndrd(随机读), rndwr(随机写), rndrw(随机读写)&#125;</div><div class="line">  --file-io-mode=STRING     file operations mode &#123;sync,async,mmap&#125; [sync] 文件操作模式&#123;sync(同步),async(异步),fastmmap(快速map映射),slowmmap(慢map映射)&#125;。默认是sync</div><div class="line">  --file-extra-flags=STRING additional flags to use on opening files &#123;sync,dsync,direct&#125; []  使用额外的标志来打开文件&#123;sync,dsync,direct&#125; 。默认为空</div><div class="line">  --file-fsync-freq=N       <span class="keyword">do</span> fsync() after this number of requests (0 - don<span class="string">'t use fsync()) [100]   执行fsync()的频率。(0 – 不使用fsync())。默认是100</span></div><div class="line">  --file-fsync-all[=on|off] do fsync() after each write operation [off]  每执行完一次写操作就执行一次fsync。默认是off</div><div class="line">  --file-fsync-end[=on|off] do fsync() at the end of test [on]  在测试结束时才执行fsync。默认是on</div><div class="line">  --file-fsync-mode=STRING  which method to use for synchronization &#123;fsync, fdatasync&#125; [fsync]使用哪种方法进行同步&#123;fsync, fdatasync&#125;。默认是fsync</div><div class="line">  --file-merged-requests=N  merge at most this number of IO requests if possible (0 - don't merge) [0]如果可以，合并最多的IO请求数(0 – 表示不合并)。默认是0</div><div class="line">  --file-rw-ratio=N         reads/writes ratio <span class="keyword">for</span> combined <span class="built_in">test</span> [1.5]     测试时的读写比例。默认是1.5</div></pre></td></tr></table></figure>
<p>1，prepare阶段，生成需要的测试文件，完成后会在当前目录下生成很多小文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysbench  fileio --threads=16 --file-total-size=2G --file-test-mode=rndrw prepare</div></pre></td></tr></table></figure>
<p>2，run阶段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysbench  fileio --threads=20 --file-total-size=2G --file-test-mode=rndrw run</div></pre></td></tr></table></figure>
<p>3，清理测试时生成的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysbench  fileio --threads=20 --file-total-size=2G --file-test-mode=rndrw cleanup</div></pre></td></tr></table></figure>
<p>执行过程如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line">sysbench  fileio --threads=16 --file-total-size=2G --file-test-mode=rndrw prepare</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">128 files, 16384Kb each, 2048Mb total</div><div class="line">Creating files <span class="keyword">for</span> the test...</div><div class="line">Extra file open flags: 0</div><div class="line">Creating file test_file.0</div><div class="line">Creating file test_file.1</div><div class="line">Creating file test_file.2</div><div class="line">Creating file test_file.3</div><div class="line">Creating file test_file.4</div><div class="line">Creating file test_file.5</div><div class="line">Creating file test_file.6</div><div class="line">Creating file test_file.7</div><div class="line">Creating file test_file.8</div><div class="line">Creating file test_file.9</div><div class="line">Creating file test_file.10</div><div class="line">Creating file test_file.11</div><div class="line">Creating file test_file.12</div><div class="line">Creating file test_file.13</div><div class="line">Creating file test_file.14</div><div class="line">Creating file test_file.15</div><div class="line">Creating file test_file.16</div><div class="line">Creating file test_file.17</div><div class="line">Creating file test_file.18</div><div class="line">Creating file test_file.19</div><div class="line">Creating file test_file.20</div><div class="line">Creating file test_file.21</div><div class="line">Creating file test_file.22</div><div class="line">Creating file test_file.23</div><div class="line">Creating file test_file.24</div><div class="line">Creating file test_file.25</div><div class="line">Creating file test_file.26</div><div class="line">Creating file test_file.27</div><div class="line">Creating file test_file.28</div><div class="line">Creating file test_file.29</div><div class="line">Creating file test_file.30</div><div class="line">Creating file test_file.31</div><div class="line">Creating file test_file.32</div><div class="line">Creating file test_file.33</div><div class="line">Creating file test_file.34</div><div class="line">Creating file test_file.35</div><div class="line">Creating file test_file.36</div><div class="line">Creating file test_file.37</div><div class="line">Creating file test_file.38</div><div class="line">Creating file test_file.39</div><div class="line">Creating file test_file.40</div><div class="line">Creating file test_file.41</div><div class="line">Creating file test_file.42</div><div class="line">Creating file test_file.43</div><div class="line">Creating file test_file.44</div><div class="line">Creating file test_file.45</div><div class="line">Creating file test_file.46</div><div class="line">Creating file test_file.47</div><div class="line">Creating file test_file.48</div><div class="line">Creating file test_file.49</div><div class="line">Creating file test_file.50</div><div class="line">Creating file test_file.51</div><div class="line">Creating file test_file.52</div><div class="line">Creating file test_file.53</div><div class="line">Creating file test_file.54</div><div class="line">Creating file test_file.55</div><div class="line">Creating file test_file.56</div><div class="line">Creating file test_file.57</div><div class="line">Creating file test_file.58</div><div class="line">Creating file test_file.59</div><div class="line">Creating file test_file.60</div><div class="line">Creating file test_file.61</div><div class="line">Creating file test_file.62</div><div class="line">Creating file test_file.63</div><div class="line">Creating file test_file.64</div><div class="line">Creating file test_file.65</div><div class="line">Creating file test_file.66</div><div class="line">Creating file test_file.67</div><div class="line">Creating file test_file.68</div><div class="line">Creating file test_file.69</div><div class="line">Creating file test_file.70</div><div class="line">Creating file test_file.71</div><div class="line">Creating file test_file.72</div><div class="line">Creating file test_file.73</div><div class="line">Creating file test_file.74</div><div class="line">Creating file test_file.75</div><div class="line">Creating file test_file.76</div><div class="line">Creating file test_file.77</div><div class="line">Creating file test_file.78</div><div class="line">Creating file test_file.79</div><div class="line">Creating file test_file.80</div><div class="line">Creating file test_file.81</div><div class="line">Creating file test_file.82</div><div class="line">Creating file test_file.83</div><div class="line">Creating file test_file.84</div><div class="line">Creating file test_file.85</div><div class="line">Creating file test_file.86</div><div class="line">Creating file test_file.87</div><div class="line">Creating file test_file.88</div><div class="line">Creating file test_file.89</div><div class="line">Creating file test_file.90</div><div class="line">Creating file test_file.91</div><div class="line">Creating file test_file.92</div><div class="line">Creating file test_file.93</div><div class="line">Creating file test_file.94</div><div class="line">Creating file test_file.95</div><div class="line">Creating file test_file.96</div><div class="line">Creating file test_file.97</div><div class="line">Creating file test_file.98</div><div class="line">Creating file test_file.99</div><div class="line">Creating file test_file.100</div><div class="line">Creating file test_file.101</div><div class="line">Creating file test_file.102</div><div class="line">Creating file test_file.103</div><div class="line">Creating file test_file.104</div><div class="line">Creating file test_file.105</div><div class="line">Creating file test_file.106</div><div class="line">Creating file test_file.107</div><div class="line">Creating file test_file.108</div><div class="line">Creating file test_file.109</div><div class="line">Creating file test_file.110</div><div class="line">Creating file test_file.111</div><div class="line">Creating file test_file.112</div><div class="line">Creating file test_file.113</div><div class="line">Creating file test_file.114</div><div class="line">Creating file test_file.115</div><div class="line">Creating file test_file.116</div><div class="line">Creating file test_file.117</div><div class="line">Creating file test_file.118</div><div class="line">Creating file test_file.119</div><div class="line">Creating file test_file.120</div><div class="line">Creating file test_file.121</div><div class="line">Creating file test_file.122</div><div class="line">Creating file test_file.123</div><div class="line">Creating file test_file.124</div><div class="line">Creating file test_file.125</div><div class="line">Creating file test_file.126</div><div class="line">Creating file test_file.127</div><div class="line">2147483648 bytes written <span class="keyword">in</span> 2.48 seconds (826.62 MiB/sec).</div><div class="line">➜  ~</div><div class="line">➜  ~</div><div class="line">➜  ~ sysbench  fileio --threads=20 --file-total-size=2G --file-test-mode=rndrw run</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the <span class="built_in">test</span> with following options:</div><div class="line">Number of threads: 20</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Extra file open flags: 0</div><div class="line">128 files, 16MiB each</div><div class="line">2GiB total file size</div><div class="line">Block size 16KiB</div><div class="line">Number of IO requests: 0</div><div class="line">Read/Write ratio <span class="keyword">for</span> combined random IO <span class="built_in">test</span>: 1.50</div><div class="line">Periodic FSYNC enabled, calling fsync() each 100 requests.</div><div class="line">Calling fsync() at the end of <span class="built_in">test</span>, Enabled.</div><div class="line">Using synchronous I/O mode</div><div class="line">Doing random r/w <span class="built_in">test</span></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line"></div><div class="line">File operations:</div><div class="line">    reads/s:                      15512.76</div><div class="line">    writes/s:                     10341.51</div><div class="line">    fsyncs/s:                     33093.17</div><div class="line"></div><div class="line">Throughput:</div><div class="line">    <span class="built_in">read</span>, MiB/s:                  242.39</div><div class="line">    written, MiB/s:               161.59</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0005s</div><div class="line">    total number of events:              589605</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  0.00</div><div class="line">         avg:                                  0.22</div><div class="line">         max:                                  6.39</div><div class="line">         95th percentile:                      0.50</div><div class="line">         sum:                             130617.03</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           29480.2500/81.36</div><div class="line">    execution time (avg/stddev):   6.5309/0.01</div><div class="line"></div><div class="line">➜  ~ sysbench  fileio --threads=20 --file-total-size=2G --file-test-mode=rndrw cleanup</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Removing <span class="built_in">test</span> files...</div></pre></td></tr></table></figure>
<h3 id="线程测试"><a href="#线程测试" class="headerlink" title="线程测试"></a>线程测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sysbench  threads <span class="built_in">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">threads options:</div><div class="line">  --thread-yields=N number of yields to <span class="keyword">do</span> per request [1000] 每个请求产生多少个线程。默认是1000</div><div class="line">  --thread-locks=N  number of locks per thread [8] 每个线程的锁的数量。默认是8</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">sysbench threads --num-threads=500 --thread-yields=100 --thread-locks=4 run</div><div class="line">WARNING: --num-threads is deprecated, use --threads instead</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the <span class="built_in">test</span> with following options:</div><div class="line">Number of threads: 500</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0902s</div><div class="line">    total number of events:              25095</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                 78.56</div><div class="line">         avg:                                200.33</div><div class="line">         max:                                258.32</div><div class="line">         95th percentile:                    235.74</div><div class="line">         sum:                            5027387.63</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           50.1900/0.40</div><div class="line">    execution time (avg/stddev):   10.0548/0.02</div></pre></td></tr></table></figure>
<h3 id="mutex测试"><a href="#mutex测试" class="headerlink" title="mutex测试"></a>mutex测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sysbench  mutex <span class="built_in">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">mutex options:</div><div class="line">  --mutex-num=N   total size of mutex array [4096] 数组互斥的总大小。默认是4096</div><div class="line">  --mutex-locks=N number of mutex locks to <span class="keyword">do</span> per thread [50000] 每个线程互斥锁的数量。默认是50000</div><div class="line">  --mutex-loops=N number of empty loops to <span class="keyword">do</span> outside mutex lock [10000] 内部互斥锁的空循环数量。默认是10000</div></pre></td></tr></table></figure>
<p>执行过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sysbench mutex --num-threads=100 --mutex-num=1000 --mutex-locks=100000 --mutex-loops=10000 run</div><div class="line"></div><div class="line"></div><div class="line">WARNING: --num-threads is deprecated, use --threads instead</div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">Running the <span class="built_in">test</span> with following options:</div><div class="line">Number of threads: 100</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          17.9762s</div><div class="line">    total number of events:              100</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                              15479.16</div><div class="line">         avg:                              17200.68</div><div class="line">         max:                              17910.48</div><div class="line">         95th percentile:                  17752.80</div><div class="line">         sum:                            1720067.67</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           1.0000/0.00</div><div class="line">    execution time (avg/stddev):   17.2007/0.59</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/zhoujinyi/archive/2013/04/19/3029134.html" target="_blank" rel="external">sysbench 安装、使用和测试</a></p>
<p><a href="https://github.com/akopytov/sysbench" target="_blank" rel="external">https://github.com/akopytov/sysbench</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何使用Sysbench进行CPU、 内存、 IO 、线程、 mutex压力测试。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/categories/MySQL/"/>
    
      <category term="性能测试" scheme="http://wangshengzhuang.com/categories/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Sysbench" scheme="http://wangshengzhuang.com/tags/Sysbench/"/>
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>sysbench压力测试工具的安装和使用</title>
    <link href="http://wangshengzhuang.com/2017/05/21/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/sysbench%20%E7%AE%80%E4%BB%8B%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://wangshengzhuang.com/2017/05/21/MySQL/性能测试/sysbench 简介、安装、使用说明/</id>
    <published>2017-05-21T14:29:25.000Z</published>
    <updated>2017-06-28T15:00:13.871Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了sysbench的安装和使用。</p>
<a id="more"></a>
<h1 id="1-sysbench简介"><a href="#1-sysbench简介" class="headerlink" title="1. sysbench简介"></a>1. sysbench简介</h1><p>sysbench is a scriptable multi-threaded benchmark tool based on LuaJIT. It is most frequently used for database benchmarks, but can also be used to create arbitrarily complex workloads that do not involve a database server.</p>
<p>sysbench 支持如下的基准测试：</p>
<ul>
<li><code>oltp_*.lua</code>: a collection of OLTP-like database benchmarks   （OLTP数据库 如MySQL、Oracle、PostgreSQL）</li>
<li><code>fileio</code>: a filesystem-level benchmark    (文件I/O性能）</li>
<li><code>cpu</code>: a simple CPU benchmark                    （CPU性能测试）</li>
<li><code>memory</code>: a memory access benchmark    （内存访问）</li>
<li><code>threads</code>: a thread-based scheduler benchmark   （基于线程的调度性能）</li>
<li><code>mutex</code>: a POSIX mutex benchmark</li>
</ul>
<h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h1><ul>
<li>extensive statistics about rate(速率) and latency(延迟) is available, including latency percentiles（统计） and histograms（直方图）;</li>
<li>low overhead even with thousands of concurrent threads. sysbench is capable of generating and tracking hundreds of millions of events per second;</li>
<li>new benchmarks can be easily created by implementing pre-defined hooks in user-provided Lua scripts;</li>
</ul>
<h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h1><h2 id="3-1-二进制安装"><a href="#3-1-二进制安装" class="headerlink" title="3.1 二进制安装"></a>3.1 二进制安装</h2><ul>
<li><p>Debian/Ubuntu</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -s <span class="symbol">https:</span>/<span class="regexp">/packagecloud.io/install</span><span class="regexp">/repositories/akopytov</span><span class="regexp">/sysbench/script</span>.deb.sh | sudo bash</div><div class="line">sudo apt -y install sysbench</div></pre></td></tr></table></figure>
</li>
<li><p>RHEL/CentOS:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -s <span class="symbol">https:</span>/<span class="regexp">/packagecloud.io/install</span><span class="regexp">/repositories/akopytov</span><span class="regexp">/sysbench/script</span>.rpm.sh | sudo bash</div><div class="line">sudo yum -y install sysbench</div></pre></td></tr></table></figure>
</li>
<li><p>Fedora:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -s <span class="symbol">https:</span>/<span class="regexp">/packagecloud.io/install</span><span class="regexp">/repositories/akopytov</span><span class="regexp">/sysbench/script</span>.rpm.sh | sudo bash	</div><div class="line">sudo dnf -y install sysbench</div></pre></td></tr></table></figure>
</li>
<li><p>macOS:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add --with-postgresql if you need PostgreSQL support</span></div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>sysbench</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-2-源码构建"><a href="#3-2-源码构建" class="headerlink" title="3.2 源码构建"></a>3.2 源码构建</h2><p>推荐使用二进制安装</p>
<h3 id="3-2-1-Build-Requirements"><a href="#3-2-1-Build-Requirements" class="headerlink" title="3.2.1 Build Requirements"></a>3.2.1 Build Requirements</h3><p><strong>Debian</strong>/<strong>Ubuntu</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt -y <span class="keyword">install </span>make automake libtool pkg-<span class="built_in">config</span> libaio-dev vim-common</div><div class="line"><span class="comment"># For MySQL support</span></div><div class="line">apt -y <span class="keyword">install </span>libmysqlclient-dev</div><div class="line"><span class="comment"># For PostgreSQL support</span></div><div class="line">apt -y <span class="keyword">install </span>libpq-dev</div></pre></td></tr></table></figure>
<p><strong>RHEL/CentOS</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum -y <span class="keyword">install</span> make automake libtool pkgconfig libaio-devel vim-common</div><div class="line"># <span class="keyword">For</span> MySQL support, <span class="keyword">replace</span> <span class="keyword">with</span> mysql-devel <span class="keyword">on</span> RHEL/CentOS <span class="number">5</span></div><div class="line">yum -y <span class="keyword">install</span> mariadb-devel</div><div class="line"># <span class="keyword">For</span> PostgreSQL support</div><div class="line">yum -y <span class="keyword">install</span> postgresql-devel</div></pre></td></tr></table></figure>
<p><strong>Fedora</strong></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dnf -y <span class="keyword">install</span> make automake libtool pkgconfig libaio-devel vim-common</div><div class="line"><span class="comment"># For MySQL support</span></div><div class="line">dnf -y <span class="keyword">install</span> mariadb-devel</div><div class="line"><span class="comment"># For PostgreSQL support</span></div><div class="line">dnf -y <span class="keyword">install</span> postgresql-devel</div></pre></td></tr></table></figure>
<p><strong>macOS</strong></p>
<p><em>**</em>Assuming you have Xcode (or Xcode Command Line Tools) and Homebrew installed:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>automake pkg-<span class="built_in">config</span></div><div class="line"><span class="comment"># For MySQL support</span></div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</div><div class="line"><span class="comment"># For PostgreSQL support</span></div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>postgresql</div></pre></td></tr></table></figure>
<h3 id="3-2-2-Build-and-Install"><a href="#3-2-2-Build-and-Install" class="headerlink" title="3.2.2 Build and Install"></a>3.2.2 Build and Install</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/akopytov/sysbench.git</div><div class="line"><span class="keyword">cd</span> sysbench</div><div class="line">./autogen.<span class="keyword">sh</span></div><div class="line"># Add --with-pgsql <span class="keyword">to</span> build with PostgreSQL support</div><div class="line">./configure</div><div class="line"><span class="keyword">make</span></div><div class="line"><span class="keyword">make</span> install</div></pre></td></tr></table></figure>
<p>The above will build sysbench with MySQL support by default. If you have MySQL headers and libraries in non-standard locations (and no <code>mysql_config</code> can be found in the <code>PATH</code>), you can specify them explicitly with <code>--with-mysql-includes</code> and <code>--with-mysql-libs</code> options to <code>./configure</code>.</p>
<p>To compile sysbench without MySQL support, use <code>--without-mysql</code>. If no database drivers are available database-related scripts will not work, but other benchmarks will be functional.</p>
<p>See <a href="https://github.com/akopytov/sysbench/blob/master/README-Oracle.md" target="_blank" rel="external">README-Oracle.md</a> for instructions on building with Oracle client libraries.</p>
<h1 id="4-语法说明"><a href="#4-语法说明" class="headerlink" title="4. 语法说明"></a>4. 语法说明</h1><h2 id="4-1-sysbench-–help"><a href="#4-1-sysbench-–help" class="headerlink" title="4.1 sysbench –help"></a>4.1 sysbench –help</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# sysbench --help</div><div class="line">Usage:</div><div class="line">  sysbench [options]... [testname] [command]</div><div class="line"></div><div class="line">Commands implemented by most tests: prepare run cleanup help</div><div class="line"></div><div class="line">General options:</div><div class="line">  --threads=N                     number of threads to use [1]</div><div class="line">  --events=N                      limit for total number of events [0]</div><div class="line">  --time=N                        limit for total execution time in seconds [10]</div><div class="line">  --forced-shutdown=STRING        number of seconds to wait after the --time limit before forcing shutdown, or 'off' to disable [off]</div><div class="line">  --thread-stack-size=SIZE        size of stack per thread [64K]</div><div class="line">  --rate=N                        average transactions rate. 0 for unlimited rate [0]</div><div class="line">  --report-interval=N             periodically report intermediate statistics with a specified interval in seconds. 0 disables intermediate reports [0]</div><div class="line">  --report-checkpoints=[LIST,...] dump full statistics and reset all counters at specified points in time. The argument is a list of comma-separated values representing the amount of time in seconds elapsed from start of test when report checkpoint(s) must be performed. Report checkpoints are off by default. []</div><div class="line">  --debug[=on|off]                print more debugging info [off]</div><div class="line">  --validate[=on|off]             perform validation checks where possible [off]</div><div class="line">  --help[=on|off]                 print help and exit [off]</div><div class="line">  --version[=on|off]              print version and exit [off]</div><div class="line">  --config-file=FILENAME          File containing command line options</div><div class="line">  --tx-rate=N                     deprecated alias for --rate [0]</div><div class="line">  --max-requests=N                deprecated alias for --events [0]</div><div class="line">  --max-time=N                    deprecated alias for --time [0]</div><div class="line">  --num-threads=N                 deprecated alias for --threads [1]</div><div class="line"></div><div class="line">Pseudo-Random Numbers Generator options:</div><div class="line">  --rand-type=STRING random numbers distribution &#123;uniform,gaussian,special,pareto&#125; [special]</div><div class="line">  --rand-spec-iter=N number of iterations used for numbers generation [12]</div><div class="line">  --rand-spec-pct=N  percentage of values to be treated as 'special' (for special distribution) [1]</div><div class="line">  --rand-spec-res=N  percentage of 'special' values to use (for special distribution) [75]</div><div class="line">  --rand-seed=N      seed for random number generator. When 0, the current time is used as a RNG seed. [0]</div><div class="line">  --rand-pareto-h=N  parameter h for pareto distibution [0.2]</div><div class="line"></div><div class="line">Log options:</div><div class="line">  --verbosity=N verbosity level &#123;5 - debug, 0 - only critical messages&#125; [3]</div><div class="line"></div><div class="line">  --percentile=N       percentile to calculate in latency statistics (1-100). Use the special value of 0 to disable percentile calculations [95]</div><div class="line">  --histogram[=on|off] print latency histogram in report [off]</div><div class="line"></div><div class="line">General database options:</div><div class="line"></div><div class="line">  --db-driver=STRING  specifies database driver to use ('help' to get list of available drivers)</div><div class="line">  --db-ps-mode=STRING prepared statements usage mode &#123;auto, disable&#125; [auto]</div><div class="line">  --db-debug[=on|off] print database-specific debug information [off]</div><div class="line"></div><div class="line"></div><div class="line">Compiled-in database drivers:</div><div class="line">  mysql - MySQL driver</div><div class="line">  pgsql - PostgreSQL driver</div><div class="line"></div><div class="line">mysql options:</div><div class="line">  --mysql-host=[LIST,...]          MySQL server host [localhost]</div><div class="line">  --mysql-port=[LIST,...]          MySQL server port [3306]</div><div class="line">  --mysql-socket=[LIST,...]        MySQL socket</div><div class="line">  --mysql-user=STRING              MySQL user [sbtest]</div><div class="line">  --mysql-password=STRING          MySQL password []</div><div class="line">  --mysql-db=STRING                MySQL database name [sbtest]</div><div class="line">  --mysql-ssl[=on|off]             use SSL connections, if available in the client library [off]</div><div class="line">  --mysql-ssl-cipher=STRING        use specific cipher for SSL connections []</div><div class="line">  --mysql-compression[=on|off]     use compression, if available in the client library [off]</div><div class="line">  --mysql-debug[=on|off]           trace all client library calls [off]</div><div class="line">  --mysql-ignore-errors=[LIST,...] list of errors to ignore, or "all" [1213,1020,1205]</div><div class="line">  --mysql-dry-run[=on|off]         Dry run, pretend that all MySQL client API calls are successful without executing them [off]</div><div class="line"></div><div class="line">pgsql options:</div><div class="line">  --pgsql-host=STRING     PostgreSQL server host [localhost]</div><div class="line">  --pgsql-port=N          PostgreSQL server port [5432]</div><div class="line">  --pgsql-user=STRING     PostgreSQL user [sbtest]</div><div class="line">  --pgsql-password=STRING PostgreSQL password []</div><div class="line">  --pgsql-db=STRING       PostgreSQL database name [sbtest]</div><div class="line"></div><div class="line">Compiled-in tests:</div><div class="line">  fileio - File I/O test</div><div class="line">  cpu - CPU performance test</div><div class="line">  memory - Memory functions speed test</div><div class="line">  threads - Threads subsystem performance test</div><div class="line">  mutex - Mutex performance test</div><div class="line"></div><div class="line">See 'sysbench <span class="tag">&lt;<span class="name">testname</span>&gt;</span> help' for a list of options for each test.</div></pre></td></tr></table></figure>
<h2 id="4-2-命令说明"><a href="#4-2-命令说明" class="headerlink" title="4.2 命令说明"></a>4.2 命令说明</h2><p>通用语法</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysbench <span class="string">[options]</span>... <span class="string">[testname]</span> <span class="string">[command]</span></div></pre></td></tr></table></figure>
<h3 id="4-2-1-testname"><a href="#4-2-1-testname" class="headerlink" title="4.2.1 testname"></a>4.2.1 testname</h3><blockquote>
<p><em>testname</em> is an optional name of a built-in test (e.g. <code>fileio</code>, <code>memory</code>, <code>cpu</code>, etc.), or a name of one of the bundled Lua scripts (e.g. <code>oltp_read_only</code>), or a <em>path</em> to a custom Lua script. If no test name is specified on the command line (and thus, there is no <em>command</em> too, as in that case it would be parsed as a <em>testname</em>), or the test name is a dash (“<code>-</code>“), then sysbench expects a Lua script to execute on its standard input.</p>
</blockquote>
<ul>
<li>testname 可以是一个内置的测试 ( 当前支持5种 <code>fileio</code>,<code>memory</code>, <code>cpu</code>,<code>threads</code>, <code>mutex</code>.), </li>
<li>也可以是一个内置的lua脚本名 (e.g. <code>oltp_read_only</code>), </li>
<li>a <em>path</em> to a custom Lua script. </li>
<li>不指定的情况, then sysbench expects a Lua script to execute on its standard input.</li>
</ul>
<h3 id="4-2-2-command"><a href="#4-2-2-command" class="headerlink" title="4.2.2 command"></a>4.2.2 command</h3><blockquote>
<p><em>command</em> is an optional argument that will be passed by sysbench to the built-in test or script specified with <em>testname</em>. <em>command</em> defines the <em>action</em> that must be performed by the test. The list of available commands depends on a particular test. Some tests also implement their own custom commands.</p>
</blockquote>
<p>Below is a description of typical test commands and their purpose:</p>
<ul>
<li><code>prepare</code>: performs preparative actions for those tests which need them, e.g. creating the necessary files on disk for the <code>fileio</code> test, or filling the test database for database benchmarks.</li>
<li><code>run</code>: runs the actual test specified with the <em>testname</em> argument. This command is provided by all tests.</li>
<li><code>cleanup</code>: removes temporary data after the test run in those tests which create one.</li>
<li><code>help</code>: displays usage information for the test specified with the <em>testname</em> argument. This includes the full list of commands provided by the test, so it should be used to get the available commands.</li>
</ul>
<h3 id="4-2-3-options"><a href="#4-2-3-options" class="headerlink" title="4.2.3 options"></a>4.2.3 options</h3><p>options 包括通用的选项，另外不同的testname也包含特定的option，如mysql测试包含的数据库连接信息。特定测试的option可以通过<code>sysbench testname help</code> 查看。<code>sysbench --help</code>可以查看通用的option</p>
<h4 id="通用命令行选项"><a href="#通用命令行选项" class="headerlink" title="通用命令行选项"></a>通用命令行选项</h4><p>The table below lists the supported common options, their descriptions and default values:</p>
<table>
<thead>
<tr>
<th><em>Option</em></th>
<th><em>Description</em></th>
<th></th>
<th><em>Default value</em></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--threads</code></td>
<td>The total number of worker threads to create</td>
<td>创建测试线程的数目。默认为1.</td>
<td>1</td>
</tr>
<tr>
<td><code>--events</code></td>
<td>Limit for total number of requests. 0 (the default) means no limit</td>
<td>请求的最大数目。0代表不限制</td>
<td>0</td>
</tr>
<tr>
<td><code>--time</code></td>
<td>Limit for total execution time in seconds. 0 means no limit</td>
<td>最大执行时间，单位是s。</td>
<td>10</td>
</tr>
<tr>
<td>–forced-shutdown=STRING</td>
<td>number of seconds to wait after the –time limit before forcing shutdown, or ‘off’ to disable [off]</td>
<td>超过–time强制中断。默认是off</td>
<td>off</td>
</tr>
<tr>
<td><code>--thread-stack-size</code></td>
<td>Size of stack for each thread</td>
<td>每个线程的堆栈大小。</td>
<td>64K</td>
</tr>
<tr>
<td><code>--rate</code></td>
<td>Average transactions rate. The number specifies how many events (transactions) per seconds should be executed by all threads on average. 0 (default) means unlimited rate, i.e. events are executed as fast as possible</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td><code>--report-interval</code></td>
<td>periodically report intermediate statistics with a specified interval in seconds. 0 disables intermediate reports [0]</td>
<td>执行过程中，显示执行结果的时间间隔</td>
<td>0</td>
</tr>
<tr>
<td><code>--debug</code></td>
<td>Print more debug info</td>
<td>是否显示debug信息</td>
<td>off</td>
</tr>
<tr>
<td><code>--validate</code></td>
<td>Perform validation of test results where possible</td>
<td>在可能情况下执行验证检查。</td>
<td>off</td>
</tr>
<tr>
<td><code>--help</code></td>
<td>Print help on general syntax or on a specified test, and exit</td>
<td>查看帮助</td>
<td>off</td>
</tr>
<tr>
<td><code>--verbosity</code></td>
<td>verbosity level {5 - debug, 0 - only critical messages} [3]</td>
<td>日志详细级别</td>
<td>3</td>
</tr>
<tr>
<td><code>--percentile</code></td>
<td>percentile to calculate in latency statistics (1-100). Use the special value of 0 to disable percentile calculations [95]</td>
<td>表示设定采样比例，默认是 95%，即丢弃5%的长请求，在剩余的99%里取最大值</td>
<td>95</td>
</tr>
<tr>
<td>–histogram[=on\</td>
<td>off]</td>
<td>print latency histogram in report [off]</td>
<td>report延迟直方图</td>
<td>off</td>
</tr>
<tr>
<td><code>--luajit-cmd</code></td>
<td>perform a LuaJIT control command. This option is equivalent to <code>luajit -j</code>. See <a href="http://luajit.org/running.html" target="_blank" rel="external">LuaJIT documentation</a> for more information</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="特定测试相关的选项"><a href="#特定测试相关的选项" class="headerlink" title="特定测试相关的选项"></a>特定测试相关的选项</h4><p>可以通过<code>sysbench testname help</code> 查看</p>
<p><strong>sysbench  fileio help</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sysbench fileio <span class="keyword">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">fileio options:</div><div class="line">  --<span class="keyword">file</span>-num=<span class="keyword">N</span>              number of files to create [128]创建测试文件的数量。默认是128</div><div class="line">  --<span class="keyword">file</span>-block-size=<span class="keyword">N</span>       block size to <span class="keyword">use</span> <span class="keyword">in</span> all IO operations [16384]测试时文件块的大小。默认是16384(16K)</div><div class="line">  --<span class="keyword">file</span>-<span class="keyword">total</span>-size=SIZE    <span class="keyword">total</span> size of files to create [2G]测试文件的总大小。默认是2G</div><div class="line">  --<span class="keyword">file</span>-<span class="keyword">test</span>-mode=STRING   <span class="keyword">test</span> mode &#123;seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw&#125;文件测试模式&#123;seqwr(顺序写), seqrewr(顺序读写), seqrd(顺序读), rndrd(随机读), rndwr(随机写), rndrw(随机读写)&#125;</div><div class="line">  --<span class="keyword">file</span>-io-mode=STRING     <span class="keyword">file</span> operations mode &#123;sync,async,mmap&#125; [sync] 文件操作模式&#123;sync(同步),async(异步),fastmmap(快速map映射),slowmmap(慢map映射)&#125;。默认是sync</div><div class="line">  --<span class="keyword">file</span>-extra-flags=STRING additional flags to <span class="keyword">use</span> <span class="keyword">on</span> opening files &#123;sync,dsync,direct&#125; []使用额外的标志来打开文件&#123;sync,dsync,direct&#125; 。默认为空</div><div class="line">  --<span class="keyword">file</span>-fsync-freq=<span class="keyword">N</span>       <span class="keyword">do</span> fsync() after this number of requests (0 - don't <span class="keyword">use</span> fsync()) [100]执行fsync()的频率。(0 – 不使用fsync())。默认是100</div><div class="line">  --<span class="keyword">file</span>-fsync-all[=<span class="keyword">on</span>|off] <span class="keyword">do</span> fsync() after each write operation [off]每执行完一次写操作就执行一次fsync。默认是off</div><div class="line">  --<span class="keyword">file</span>-fsync-end[=<span class="keyword">on</span>|off] <span class="keyword">do</span> fsync() at the end of <span class="keyword">test</span> [<span class="keyword">on</span>]在测试结束时才执行fsync。默认是<span class="keyword">on</span></div><div class="line">  --<span class="keyword">file</span>-fsync-mode=STRING  <span class="keyword">which</span> method to <span class="keyword">use</span> <span class="keyword">for</span> synchronization &#123;fsync, fdatasync&#125; [fsync]使用哪种方法进行同步&#123;fsync, fdatasync&#125;。默认是fsync</div><div class="line">  --<span class="keyword">file</span>-merged-requests=<span class="keyword">N</span>  <span class="keyword">merge</span> at most this number of IO requests <span class="keyword">if</span> possible (0 - don't <span class="keyword">merge</span>) [0]如果可以，合并最多的IO请求数(0 – 表示不合并)。默认是0</div><div class="line">  --<span class="keyword">file</span>-rw-<span class="keyword">ratio</span>=<span class="keyword">N</span>         reads/writes <span class="keyword">ratio</span> <span class="keyword">for</span> combined <span class="keyword">test</span> [1.5]     测试时的读写比例。默认是1.5</div></pre></td></tr></table></figure>
<p><strong>sysbench  cpu help</strong></p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sysbench  <span class="meta">cpu</span> help</div><div class="line">sysbench <span class="number">1.0</span><span class="meta">.7</span> (using bundled LuaJIT <span class="number">2.1</span><span class="meta">.0</span>-beta2)</div><div class="line"></div><div class="line"><span class="meta">cpu</span> options:</div><div class="line">  --<span class="meta">cpu</span>-max-prime=N upper limit for primes generator [<span class="number">10000</span>] 最大质数发生器数量。默认是<span class="number">10000</span></div></pre></td></tr></table></figure>
<p><strong>sysbench  memory help</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--<span class="keyword">memory</span>-block-size=SIZE    size of <span class="keyword">memory</span> block <span class="keyword">for</span> <span class="keyword">test</span> [1K]  测试时内存块大小。默认是1K</div><div class="line">--<span class="keyword">memory</span>-<span class="keyword">total</span>-size=SIZE    <span class="keyword">total</span> size of data to transfer [100G] 传输数据的总大小。默认是100G</div><div class="line">--<span class="keyword">memory</span>-scope=STRING       <span class="keyword">memory</span> access scope &#123;<span class="keyword">global</span>,<span class="keyword">local</span>&#125; [<span class="keyword">global</span>] 内存访问范围&#123;<span class="keyword">global</span>,<span class="keyword">local</span>&#125;。默认是<span class="keyword">global</span></div><div class="line">--<span class="keyword">memory</span>-oper=STRING        <span class="keyword">type</span> of <span class="keyword">memory</span> operations &#123;<span class="keyword">read</span>, write, none&#125; [write]     内存操作类型。&#123;<span class="keyword">read</span>, write, none&#125; 默认是write</div><div class="line">--<span class="keyword">memory</span>-access-mode=STRING <span class="keyword">memory</span> access mode &#123;seq,rnd&#125; [seq] 存储器存取方式&#123;seq,rnd&#125; 默认是seq</div></pre></td></tr></table></figure>
<p><strong>sysbench  threads help</strong></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sysbench  threads <span class="keyword">help</span></div><div class="line">sysbench <span class="number">1.0</span>.<span class="number">7</span> (using bundled LuaJIT <span class="number">2.1</span>.<span class="number">0</span>-beta2)</div><div class="line"></div><div class="line">threads option<span class="variable">s:</span></div><div class="line">  --thread-yields=<span class="keyword">N</span> <span class="keyword">number</span> of yields <span class="keyword">to</span> <span class="keyword">do</span> per request [<span class="number">1000</span>] 每个请求产生多少个线程。默认是<span class="number">1000</span></div><div class="line">  --thread-locks=<span class="keyword">N</span>  <span class="keyword">number</span> of locks per thread [<span class="number">8</span>] 每个线程的锁的数量。默认是<span class="number">8</span></div></pre></td></tr></table></figure>
<p><strong>sysbench  mutex help</strong></p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sysbench  mutex help</div><div class="line">sysbench <span class="number">1.0</span>.<span class="number">7</span> (<span class="keyword">using</span> bundled LuaJIT <span class="number">2.1</span>.<span class="number">0</span>-beta2)</div><div class="line"></div><div class="line">mutex options:</div><div class="line">  --mutex-num=N   total size <span class="keyword">of</span> mutex <span class="keyword">array</span> [<span class="number">4096</span>] 数组互斥的总大小。默认是<span class="number">4096</span></div><div class="line">  --mutex-locks=N number <span class="keyword">of</span> mutex locks <span class="keyword">to</span> <span class="keyword">do</span> per thread [<span class="number">50000</span>] 每个线程互斥锁的数量。默认是<span class="number">50000</span></div><div class="line">  --mutex-loops=N number <span class="keyword">of</span> <span class="keyword">empty</span> loops <span class="keyword">to</span> <span class="keyword">do</span> outside mutex lock [<span class="number">10000</span>] 内部互斥锁的空循环数量。默认是<span class="number">10000</span></div></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# sysbench --<span class="keyword">test</span>=cpu <span class="keyword">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">cpu options:</div><div class="line">  --cpu-max-prime=<span class="keyword">N</span> upper limit <span class="keyword">for</span> primes generator [10000]</div><div class="line"></div><div class="line">[root@localhost ~]# sysbench fileio <span class="keyword">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">fileio options:</div><div class="line">  --<span class="keyword">file</span>-num=<span class="keyword">N</span>              number of files to create [128]</div><div class="line">  --<span class="keyword">file</span>-block-size=<span class="keyword">N</span>       block size to <span class="keyword">use</span> <span class="keyword">in</span> all IO operations [16384]</div><div class="line">  --<span class="keyword">file</span>-<span class="keyword">total</span>-size=SIZE    <span class="keyword">total</span> size of files to create [2G]</div><div class="line">  --<span class="keyword">file</span>-<span class="keyword">test</span>-mode=STRING   <span class="keyword">test</span> mode &#123;seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw&#125;</div><div class="line">  --<span class="keyword">file</span>-io-mode=STRING     <span class="keyword">file</span> operations mode &#123;sync,async,mmap&#125; [sync]</div><div class="line">  --<span class="keyword">file</span>-async-backlog=<span class="keyword">N</span>    number of asynchronous operatons to queue per thread [128]</div><div class="line">  --<span class="keyword">file</span>-extra-flags=STRING additional flags to <span class="keyword">use</span> <span class="keyword">on</span> opening files &#123;sync,dsync,direct&#125; []</div><div class="line">  --<span class="keyword">file</span>-fsync-freq=<span class="keyword">N</span>       <span class="keyword">do</span> fsync() after this number of requests (0 - don't <span class="keyword">use</span> fsync()) [100]</div><div class="line">  --<span class="keyword">file</span>-fsync-all[=<span class="keyword">on</span>|off] <span class="keyword">do</span> fsync() after each write operation [off]</div><div class="line">  --<span class="keyword">file</span>-fsync-end[=<span class="keyword">on</span>|off] <span class="keyword">do</span> fsync() at the end of <span class="keyword">test</span> [<span class="keyword">on</span>]</div><div class="line">  --<span class="keyword">file</span>-fsync-mode=STRING  <span class="keyword">which</span> method to <span class="keyword">use</span> <span class="keyword">for</span> synchronization &#123;fsync, fdatasync&#125; [fsync]</div><div class="line">  --<span class="keyword">file</span>-merged-requests=<span class="keyword">N</span>  <span class="keyword">merge</span> at most this number of IO requests <span class="keyword">if</span> possible (0 - don't <span class="keyword">merge</span>) [0]</div><div class="line">  --<span class="keyword">file</span>-rw-<span class="keyword">ratio</span>=<span class="keyword">N</span>         reads/writes <span class="keyword">ratio</span> <span class="keyword">for</span> combined <span class="keyword">test</span> [1.5]</div><div class="line"></div><div class="line">[root@localhost ~]# sysbench <span class="keyword">memory</span> <span class="keyword">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line"><span class="keyword">memory</span> options:</div><div class="line">  --<span class="keyword">memory</span>-block-size=SIZE    size of <span class="keyword">memory</span> block <span class="keyword">for</span> <span class="keyword">test</span> [1K]</div><div class="line">  --<span class="keyword">memory</span>-<span class="keyword">total</span>-size=SIZE    <span class="keyword">total</span> size of data to transfer [100G]</div><div class="line">  --<span class="keyword">memory</span>-scope=STRING       <span class="keyword">memory</span> access scope &#123;<span class="keyword">global</span>,<span class="keyword">local</span>&#125; [<span class="keyword">global</span>]</div><div class="line">  --<span class="keyword">memory</span>-hugetlb[=<span class="keyword">on</span>|off]   allocate <span class="keyword">memory</span> from HugeTLB pool [off]</div><div class="line">  --<span class="keyword">memory</span>-oper=STRING        <span class="keyword">type</span> of <span class="keyword">memory</span> operations &#123;<span class="keyword">read</span>, write, none&#125; [write]</div><div class="line">  --<span class="keyword">memory</span>-access-mode=STRING <span class="keyword">memory</span> access mode &#123;seq,rnd&#125; [seq]</div><div class="line"></div><div class="line">[root@localhost ~]# sysbench threads <span class="keyword">help</span></div><div class="line">sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)</div><div class="line"></div><div class="line">threads options:</div><div class="line">  --thread-yields=<span class="keyword">N</span> number of yields to <span class="keyword">do</span> per request [1000]</div><div class="line">  --thread-locks=<span class="keyword">N</span>  number of locks per thread [8]</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/zhoujinyi/archive/2013/04/19/3029134.html" target="_blank" rel="external">sysbench 安装、使用和测试</a></p>
<p><a href="https://github.com/akopytov/sysbench" target="_blank" rel="external">https://github.com/akopytov/sysbench</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了sysbench的安装和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/categories/MySQL/"/>
    
      <category term="性能测试" scheme="http://wangshengzhuang.com/categories/MySQL/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="MySQL" scheme="http://wangshengzhuang.com/tags/MySQL/"/>
    
      <category term="sysbench" scheme="http://wangshengzhuang.com/tags/sysbench/"/>
    
  </entry>
  
  <entry>
    <title>rmdir命令</title>
    <link href="http://wangshengzhuang.com/2017/05/20/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/rmdir%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/20/Linux/每天一个Linux命令/rmdir命令/</id>
    <published>2017-05-20T14:55:56.000Z</published>
    <updated>2017-06-29T15:49:46.685Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: rmdir (Remove Directory删除目录): 用来删除空目录</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>rmdir</strong> (Remove Directory删除目录): 用来删除空目录，删除某目录时也必须具有对父目录的写权限。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用法：rmdir [选项]... 目录...</div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-ignore-fail-on-non-empty  忽略仅由目录非空产生的所有错误</span></div><div class="line">-<span class="ruby">p, –parents              删除指定目录及其上级文件夹，例如<span class="string">"rmdir -p a/b/c'"</span>  与<span class="string">"rmdir a/b/c a/b a'"</span> 基本相同</span></div><div class="line">-<span class="ruby">v, –verbose              输出处理的目录详情</span></div></pre></td></tr></table></figure>
<h3 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h3><h4 id="实例1：删除一个空目录"><a href="#实例1：删除一个空目录" class="headerlink" title="实例1：删除一个空目录"></a>实例1：删除一个空目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]# rmdir dir1</div></pre></td></tr></table></figure>
<h4 id="实例2：删除空目录显示信息"><a href="#实例2：删除空目录显示信息" class="headerlink" title="实例2：删除空目录显示信息"></a>实例2：删除空目录显示信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]# rmdir -v dir3</div><div class="line">rmdir: 正在删除目录 "dir3"</div></pre></td></tr></table></figure>
<h4 id="实例3：删除一个非空目录"><a href="#实例3：删除一个非空目录" class="headerlink" title="实例3：删除一个非空目录"></a>实例3：删除一个非空目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]# rmdir -v dir2</div><div class="line">rmdir: 正在删除目录 "dir2"</div><div class="line">rmdir: 删除 "dir2" 失败: 目录非空</div></pre></td></tr></table></figure>
<h4 id="实例4：若父目录为空，则递归删除父目录"><a href="#实例4：若父目录为空，则递归删除父目录" class="headerlink" title="实例4：若父目录为空，则递归删除父目录"></a>实例4：若父目录为空，则递归删除父目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]# rmdir -pv dir1/sub1/sub2</div><div class="line">rmdir: 正在删除目录 "dir1/sub1/sub2"</div><div class="line">rmdir: 正在删除目录 "dir1/sub1"</div><div class="line">rmdir: 正在删除目录 "dir1"</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: rmdir (Remove Directory删除目录): 用来删除空目录&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="rmdir" scheme="http://wangshengzhuang.com/tags/rmdir/"/>
    
  </entry>
  
  <entry>
    <title>mkdir命令</title>
    <link href="http://wangshengzhuang.com/2017/05/19/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/mkdir%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangshengzhuang.com/2017/05/19/Linux/每天一个Linux命令/mkdir命令/</id>
    <published>2017-05-19T14:43:25.000Z</published>
    <updated>2017-06-29T15:50:09.721Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: mkdir(Make Directory 创建目录): 若指定目录不存在则创建目录。</p>
<a id="more"></a>
<h3 id="1、命令简介"><a href="#1、命令简介" class="headerlink" title="1、命令简介"></a>1、命令简介</h3><p><strong>mkdir</strong> (Make Directory 创建目录): 若指定目录不存在则创建目录。在创建目录时，要求创建目录的用户具有写权限，并应保证新建的目录没有重名。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用法：mkdir [选项]... 目录...</div></pre></td></tr></table></figure>
<h3 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-m, --mode=模式       设置权限模式(类似chmod)，而不是rwxrwxrwx 减umask</div><div class="line">-p, --parents        需要时创建目标目录的上层目录，但即使这些目录已存在也不当作错误处理</div><div class="line">-v, --verbose        每次创建新目录都显示信息</div><div class="line">-Z, --context=CTX      将每个创建的目录的SELinux 安全环境设置为CTX</div></pre></td></tr></table></figure>
<h3 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h3><h4 id="实例1：创建一个空目录"><a href="#实例1：创建一个空目录" class="headerlink" title="实例1：创建一个空目录"></a>实例1：创建一个空目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir dir1</span></div><div class="line">[root@oracledb study]<span class="comment"># ls</span></div><div class="line">dir1</div></pre></td></tr></table></figure>
<h4 id="实例2：一次创建多个目录"><a href="#实例2：一次创建多个目录" class="headerlink" title="实例2：一次创建多个目录"></a>实例2：一次创建多个目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir dir1 dir2 dir3</span></div><div class="line">[root@oracledb study]<span class="comment"># ls</span></div><div class="line">dir1  dir2  dir3</div></pre></td></tr></table></figure>
<h4 id="实例3：递归创建多个目录"><a href="#实例3：递归创建多个目录" class="headerlink" title="实例3：递归创建多个目录"></a>实例3：递归创建多个目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir -p dir1/sub1/sub2</span></div><div class="line">[root@oracledb study]<span class="comment"># tree</span></div><div class="line">.</div><div class="line">└── dir1</div><div class="line">    └── sub1</div><div class="line">        └── sub2</div><div class="line"></div><div class="line">3 directories, 0 files</div></pre></td></tr></table></figure>
<h4 id="实例4：创建权限为755的目录"><a href="#实例4：创建权限为755的目录" class="headerlink" title="实例4：创建权限为755的目录"></a>实例4：创建权限为755的目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir -m 755 dir1</span></div><div class="line">[root@oracledb study]<span class="comment"># ls</span></div><div class="line">drwxr-xr-x 2 root root 4096 4月  16 15:03 dir1</div></pre></td></tr></table></figure>
<h4 id="实例5：创建新目录都显示信息"><a href="#实例5：创建新目录都显示信息" class="headerlink" title="实例5：创建新目录都显示信息"></a>实例5：创建新目录都显示信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir -v dir3</span></div><div class="line">mkdir: 已创建目录 <span class="string">"dir3"</span></div></pre></td></tr></table></figure>
<h4 id="实例6：一个命令创建项目的目录结构"><a href="#实例6：一个命令创建项目的目录结构" class="headerlink" title="实例6：一个命令创建项目的目录结构"></a>实例6：一个命令创建项目的目录结构</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@oracledb study]<span class="comment"># mkdir -vp tomcat/&#123;bin,lib,conf,logs,webapps/&#123;examples,docs&#125;,work&#125;</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/bin"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/lib"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/conf"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/logs"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/webapps"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/webapps/examples"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/webapps/docs"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"tomcat/work"</span></div><div class="line">[root@oracledb study]<span class="comment"># tree</span></div><div class="line">.</div><div class="line">└── tomcat</div><div class="line">    ├── bin</div><div class="line">    ├── conf</div><div class="line">    ├── lib</div><div class="line">    ├── logs</div><div class="line">    ├── webapps</div><div class="line">    │   ├── docs</div><div class="line">    │   └── examples</div><div class="line">    └── work</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: mkdir(Make Directory 创建目录): 若指定目录不存在则创建目录。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://wangshengzhuang.com/categories/Linux/"/>
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/categories/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="每天一个Linux命令" scheme="http://wangshengzhuang.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="mkdir" scheme="http://wangshengzhuang.com/tags/mkdir/"/>
    
  </entry>
  
  <entry>
    <title>Playbook 角色(Roles) 和 Include 语句</title>
    <link href="http://wangshengzhuang.com/2017/05/18/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Playbook%20%E8%A7%92%E8%89%B2(Roles)%20%E5%92%8C%20Include%20%E8%AF%AD%E5%8F%A5/"/>
    <id>http://wangshengzhuang.com/2017/05/18/运维相关/Ansible/Playbook 角色(Roles) 和 Include 语句/</id>
    <published>2017-05-18T15:26:47.000Z</published>
    <updated>2017-05-23T14:50:07.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="http://www.ansible.com.cn/docs/playbooks_roles.html#id6" target="_blank" rel="external">简介</a></h3><p>当我们刚开始学习运用 playbook 时，可能会把 playbook 写成一个很大的文件，到后来可能你会希望这些文件是可以方便去重用的，所以需要重新去组织这些文件。</p>
<a id="more"></a>  
<h3 id="Include-语句"><a href="#Include-语句" class="headerlink" title="Include 语句"></a><a href="http://www.ansible.com.cn/docs/playbooks_roles.html#id5" target="_blank" rel="external">Include 语句</a></h3><p>基本上，使用 include 语句引用 task 文件的方法，可允许你将一个配置策略分解到更小的文件中。使用 include 语句引用 tasks 是将 tasks 从其他文件拉取过来。因为 handlers 也是 tasks，所以你也可以使用 include 语句去引用 handlers 文件。</p>
<p>Playbook 同样可以使用 include 引用其他 playbook 文件中的 play。这时被引用的 play 会被插入到当前的 playbook 中，当前的 playbook 中就有了一个更长的的 play 列表。Include 指令看起来像下面这样，在一个 playbook 中，Include 指令可以跟普通的 task 混合在一起使用:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">tasks:</span></div><div class="line"></div><div class="line">  - <span class="string">include:</span> tasks/foo.yml</div></pre></td></tr></table></figure>
<p>你也可以给 include 传递变量。我们称之为 ‘参数化的 include’。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">tasks:</span></div><div class="line">  - <span class="string">include:</span> wordpress.yml wp_user=timmy</div></pre></td></tr></table></figure>
<h3 id="Playbook-角色-Roles"><a href="#Playbook-角色-Roles" class="headerlink" title="Playbook 角色(Roles)"></a><a href="http://www.ansible.com.cn/docs/playbooks_roles.html#id5" target="_blank" rel="external">Playbook 角色(Roles)</a></h3><p>那怎样组织 playbook 才是最好的方式呢？简单的回答就是：使用 roles ! Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象。这种方式可使你将注意力更多地放在大局上，只有在需要时才去深入了解细节。Roles 基于一个已知的文件结构，去自动的加载某些 vars_files，tasks 以及 handlers。基于 roles 对内容进行分组，使得我们可以容易地与其他用户分享 roles 。</p>
<!-- more -->
<p><img src="http://image.wangshengzhuang.com/17-05-23/1495543493176.jpg" alt="img"></p>
<p>这个 playbook 为一个角色 ‘x’ 指定了如下的行为：</p>
<ul>
<li>如果 roles/x/tasks/main.yml 存在, 其中列出的 tasks 将被添加到 play 中</li>
<li>如果 roles/x/handlers/main.yml 存在, 其中列出的 handlers 将被添加到 play 中</li>
<li>如果 roles/x/vars/main.yml 存在, 其中列出的 variables 将被添加到 play 中</li>
<li>如果 roles/x/meta/main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中 (1.3 and later)</li>
<li>所有 copy tasks 可以引用 roles/x/files/ 中的文件，不需要指明文件的路径。</li>
<li>所有 script tasks 可以引用 roles/x/files/ 中的脚本，不需要指明文件的路径。</li>
<li>所有 template tasks 可以引用 roles/x/templates/ 中的文件，不需要指明文件的路径。</li>
<li>所有 include tasks 可以引用 roles/x/tasks/ 中的文件，不需要指明文件的路径。</li>
</ul>
<h3 id="角色依赖-Role-Dependencies"><a href="#角色依赖-Role-Dependencies" class="headerlink" title="角色依赖(Role Dependencies)"></a><a href="http://www.ansible.com.cn/docs/playbooks_roles.html#id10" target="_blank" rel="external">角色依赖(Role Dependencies)</a></h3><p>“角色依赖” 使你可以自动地将其他 roles 拉取到现在使用的 role 中。”角色依赖” 保存在 roles 目录下的 meta/main.yml 文件中。这个文件应包含一列 roles 和 为之指定的参数，</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ansible.com.cn/docs/playbooks_roles.html#id6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简介&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;当我们刚开始学习运用 playbook 时，可能会把 playbook 写成一个很大的文件，到后来可能你会希望这些文件是可以方便去重用的，所以需要重新去组织这些文件。&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible Playbook</title>
    <link href="http://wangshengzhuang.com/2017/05/17/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Ansilbe%20Playbook/"/>
    <id>http://wangshengzhuang.com/2017/05/17/运维相关/Ansible/Ansilbe Playbook/</id>
    <published>2017-05-17T15:26:47.000Z</published>
    <updated>2017-05-23T14:07:09.954Z</updated>
    
    <content type="html"><![CDATA[<p>Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.</p>
<a id="more"></a>
<p>Playbooks 的格式是YAML 语法做到最小化,意在避免 playbooks 成为一种编程语言或是脚本</p>
<p>playbook 由一个或多个 ‘plays’ 组成.它的内容是一个以 ‘plays’ 为元素的列表.play 的内容,被称为 tasks,即任务.在基本层次的应用中,一个任务是一个对 ansible 模块的调用。playbook命令根据自上而下的顺序依次执行。‘plays’ 好似音符,playbook 好似由 ‘plays’ 构成的曲谱,通过 playbook,可以编排步骤进行多机器的部署,比如在 webservers 组的所有机器上运行一定的步骤, 然后在 database server 组运行一些步骤,最后回到 webservers 组,再运行一些步骤,诸如此类.使得你可以实现一些复杂的部署机制,这是ansible命令无法实现的。</p>
<p>playbook通过ansible-playbook命令使用,它的参数和ansible命令类似,ansible-playbook的简单使用方法: </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ansible-playbook</span> <span class="selector-tag">example-play</span><span class="selector-class">.yml</span></div></pre></td></tr></table></figure>
<h3 id="一、一个简单的示例"><a href="#一、一个简单的示例" class="headerlink" title="一、一个简单的示例"></a>一、一个简单的示例</h3><p>下面是一个简单的ansible-playbook示例，可以了解其构成:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    http_port:</span> <span class="number">80</span></div><div class="line"><span class="attr">    max_clients:</span> <span class="number">200</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></div><div class="line"><span class="attr">    yum:</span> <span class="string">pkg=httpd</span> <span class="string">state=latest</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">write</span> <span class="string">the</span> <span class="string">apache</span> <span class="string">config</span> <span class="string">file</span></div><div class="line"><span class="attr">    template:</span> <span class="string">src=/srv/httpd.j2</span> <span class="string">dest=/etc/httpd.conf</span></div><div class="line"><span class="attr">    notify:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">restart</span> <span class="string">apache</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></div><div class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></div><div class="line"><span class="attr">  handlers:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></div><div class="line"><span class="attr">      service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></div></pre></td></tr></table></figure>
<h3 id="二、playbook的构成"><a href="#二、playbook的构成" class="headerlink" title="二、playbook的构成"></a>二、playbook的构成</h3><p>playbook 由一个或多个 ‘plays’ 组成.它的内容是一个以 ‘plays’ 为元素的列表.play 的内容,被称为 tasks,即任务.在基本层次的应用中,一个任务是一个对 ansible 模块的调用。将多个play组织在一个playbook中即可以让它们联同起来按事先编排的机制同唱一台大戏。其主要有以下四部分构成:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">playbooks组成：</div><div class="line">  Target section：   定义将要执行 playbook 的远程主机组</div><div class="line">  <span class="keyword">Variable</span> section： 定义 playbook 运行时需要使用的变量</div><div class="line">  Task <span class="comment">section</span>：     定义将要在远程主机上执行的任务列表</div><div class="line">  Handler <span class="comment">section</span>：  定义<span class="comment"> task</span> 执行完成以后需要调用的任务</div></pre></td></tr></table></figure>
<p>而其对应的目录层为五个，如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">一般所需的目录层有：(视情况可变化)</div><div class="line">  vars     变量层</div><div class="line">  tasks    任务层</div><div class="line">  handlers 触发条件</div><div class="line">  files    文件</div><div class="line">  <span class="keyword">template</span> 模板</div></pre></td></tr></table></figure>
<h4 id="1、Hosts和Users"><a href="#1、Hosts和Users" class="headerlink" title="1、Hosts和Users"></a>1、Hosts和Users</h4><p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。</p>
<ul>
<li>hosts：用于指定要执行指定任务的主机其可以是一个或多个由冒号分隔主机组。</li>
<li>remote_user ：用于指定远程主机上的执行任务的用户。不过remote_user也可用于各task中。也可以通过指定其通过sudo的方式在远程主机上执行任务其可用于play全局或某任务。此外甚至可以在sudo时使用sudo_user指定sudo时切换的用户。</li>
<li>user：于remote_user相同</li>
<li>sudo：如果设置为yes，执行该任务组的用户在执行任务的时候，获取root权限</li>
<li>sudo_user：如果设置user为breeze，sudo为yes，sudo_user为bernie时，则breeze用户在执行任务时会获得bernie用户的权限</li>
<li>gather_facts：除非明确说明不需要在远程主机上执行setup模块，否则默认自动执行。如果确实不需要setup模块传递过来的变量，则可以将该选项设置为False</li>
</ul>
<h4 id="2、任务列表和action"><a href="#2、任务列表和action" class="headerlink" title="2、任务列表和action"></a>2、任务列表和action</h4><p>play的主体部分是任务列表。任务列表中的各任务按次序逐个在hosts中指定的所有主机上执行即在所有主机上完成第一个任务后再开始第二个。在自上而下运行某playbook时如果中途发生错误，所有已执行任务都将回滚因此在更正playbook后重新执行一次即可。 </p>
<p>​ task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致。module 具有”幂等”性,所以当远端系统被人改动时,可以重放 playbooks 达到恢复的目的. playbooks 本身可以识别这种改动,并且有一个基本的 event system（事件系统）,可以响应这种改动.</p>
<p>每个task都应该有其name用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name则action的结果将用于输出。 </p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - <span class="built_in">name</span>: make sure apache <span class="keyword">is</span> <span class="built_in">running</span></div><div class="line">    service: <span class="built_in">name</span>=httpd state=<span class="built_in">running</span></div></pre></td></tr></table></figure>
<p>如果命令或脚本的退出码不为零可以使用如下方式替代</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - name: <span class="keyword">run</span><span class="bash"> this <span class="built_in">command</span> and ignore the result</span></div><div class="line">    <span class="keyword">shell</span><span class="bash">: /usr/bin/somecommand || /bin/<span class="literal">true</span></span></div></pre></td></tr></table></figure>
<p>使用ignore_errors来忽略错误信息</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - name: <span class="keyword">run</span><span class="bash"> this <span class="built_in">command</span> and ignore the result</span></div><div class="line">    <span class="keyword">shell</span><span class="bash">: /usr/bin/somecommand</span></div><div class="line">    ignore_errors: True</div></pre></td></tr></table></figure>
<h4 id="3、handlers：-在发生改变时执行的操作"><a href="#3、handlers：-在发生改变时执行的操作" class="headerlink" title="3、handlers： 在发生改变时执行的操作"></a>3、handlers： 在发生改变时执行的操作</h4><p>“notify”这个action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，取而代之仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler也即notify中调用handler中定义的操作。 </p>
<p>注意：在notify中定义内容一定要和tasks中定义的 - name 内容一样，这样才能达到触发的效果，否则会不生效。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> <span class="symbol">name:</span> template configuration file</span></div><div class="line">  template: src=template.j2 dest=/etc/foo.conf</div><div class="line">  notify:</div><div class="line">  -<span class="ruby"> restart memcached</span></div><div class="line">  -<span class="ruby"> restart apache</span></div></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#handler是task列表这些task与前述的task并没有本质上的不同。</span></div><div class="line">handlers:</div><div class="line">  - name: restart memcached</div><div class="line">    service: name=memcached <span class="keyword">state</span>=restarted</div><div class="line">  - name: restart apache</div><div class="line">    service: name=apache <span class="keyword">state</span>=restarted</div></pre></td></tr></table></figure>
<h4 id="4、tags"><a href="#4、tags" class="headerlink" title="4、tags"></a>4、tags</h4><p>tags用于让用户选择运行或略过playbook中的部分代码。ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时如果确信其没有变化就可以通过tags跳过这些代码片断。</p>
<h3 id="三、列出影响的主机"><a href="#三、列出影响的主机" class="headerlink" title="三、列出影响的主机"></a>三、列出影响的主机</h3><p>在执行一个 playbook 之前,想看看这个 playbook 的执行会影响到哪些 hosts,你可以这样做:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook playbook<span class="selector-class">.yml</span> --list-hosts</div></pre></td></tr></table></figure>
<h3 id="执行一个-playbook"><a href="#执行一个-playbook" class="headerlink" title="执行一个 playbook"></a>执行一个 playbook</h3><p>如何运行一个 playbook 呢？这很简单,这里的示例是并行的运行 playbook,并行的级别 是10</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook playbook<span class="selector-class">.yml</span> -f <span class="number">10</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>ad-hoc命令</title>
    <link href="http://wangshengzhuang.com/2017/05/16/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Ad-hoc%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9D%97/"/>
    <id>http://wangshengzhuang.com/2017/05/16/运维相关/Ansible/Ad-hoc与命令执行模块/</id>
    <published>2017-05-16T15:26:47.000Z</published>
    <updated>2017-05-23T14:01:57.134Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了ansible的Ad-hoc命令。</p>
<p><img src="http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg" alt=""></p>
<a id="more"></a>
<p>Ansible提供两种方式去完成任务,一是 ad-hoc 命令,一是写 Ansible playbook.前者可以解决一些简单的任务, 后者解决较复杂的任务.</p>
<p>ad-hoc 是相对于写 Ansible playbook 来说的.类似于在命令行敲入shell命令和 写shell scripts两者之间的关系。 </p>
<p> Ad-Hoc 是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。那我们会在什么情境下去使用ad-hoc 命令呢?比如说因为圣诞节要来了,想要把所有实验室的电源关闭,我们只需要执行一行命令 就可以达成这个任务,而不需要写 playbook 来做这个任务.至于说做配置管理或部署这种事,还是要借助 playbook 来完成,即使用 ‘/usr/bin/ansible-playbook’ 这个命令.</p>
<p>Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。</p>
<h3 id="一、Ad-hoc命令"><a href="#一、Ad-hoc命令" class="headerlink" title="一、Ad-hoc命令"></a>一、Ad-hoc命令</h3><h4 id="1-1、命令格式说明"><a href="#1-1、命令格式说明" class="headerlink" title="1.1、命令格式说明"></a>1.1、命令格式说明</h4><p>一个ad-hoc命令的执行，需要按以下格式进行执行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible 主机或组 -m 模块名  -<span class="selector-tag">a</span> <span class="string">'模块参数'</span>  ansible参数</div></pre></td></tr></table></figure>
<ul>
<li>主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机；</li>
<li>模块名，可以通过ansible-doc -l 查看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的<code>module_name = command</code> 部分，默认模块可以在该配置文件中进行修改；</li>
<li>模块参数，可以通过 “ansible-doc -s 模块名” 查看具体的用法及后面的参数；</li>
<li>ansible参数，可以通过ansible命令的帮助信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> ping</div><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> <span class="keyword">command</span> -<span class="keyword">a</span> <span class="string">'uptime'</span></div><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> yum -<span class="keyword">a</span> <span class="string">'name=nginx state=latest'</span></div><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> service -<span class="keyword">a</span> <span class="comment">"name=nginx state=started enabled=yes“</span></div><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> <span class="keyword">shell</span> -<span class="keyword">a</span> <span class="string">'systemctl status nginx'</span></div><div class="line">ansible <span class="keyword">all</span> -<span class="keyword">m</span> <span class="keyword">shell</span> -<span class="keyword">a</span> <span class="string">'systemctl list-unit-files|grep nginx'</span></div></pre></td></tr></table></figure>
<h4 id="1-2、后台执行"><a href="#1-2、后台执行" class="headerlink" title="1.2、后台执行"></a>1.2、后台执行</h4><p>当命令执行时间比较长时，也可以放到后台执行，使用-B、-P参数，如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ansible all -B <span class="number">3600</span> -a <span class="string">"/usr/bin/long_running_operation --do-stuff"</span>   #后台执行命令<span class="number">3600</span>s，-B 表示后台执行的时间, 命令会返回一个jid</div><div class="line">ansible all -m async_status -a <span class="string">"jid=123456789"</span>  #检查任务的状态</div><div class="line">ansible all -B <span class="number">1800</span> -P <span class="number">60</span> -a <span class="string">"/usr/bin/long_running_operation --do-stuff"</span> #后台执行命令最大时间是<span class="number">1800</span>s即<span class="number">30</span>分钟，-P 每<span class="number">60</span>s检查下状态，默认<span class="number">15</span>s</div></pre></td></tr></table></figure>
<h4 id="1-3、查看所有模块"><a href="#1-3、查看所有模块" class="headerlink" title="1.3、查看所有模块"></a>1.3、查看所有模块</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@ansible</span> ~]<span class="meta"># ansible-doc -l |wc -l</span></div><div class="line"><span class="number">773</span></div></pre></td></tr></table></figure>
<h3 id="二、使用ansible-doc-查看模块使用方法"><a href="#二、使用ansible-doc-查看模块使用方法" class="headerlink" title="二、使用ansible-doc 查看模块使用方法"></a>二、使用ansible-doc 查看模块使用方法</h3><p>可以使用ansible-doc -s module来查看某个模块的参数，也可以使用ansible-doc help module来查看该模块更详细的信息。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">[root@ansible ansible]<span class="comment"># ansible-doc command</span></div><div class="line">&gt; COMMAND</div><div class="line"></div><div class="line">  The [command] module takes <span class="keyword">the</span> command <span class="built_in">name</span> followed <span class="keyword">by</span> a <span class="built_in">list</span> <span class="keyword">of</span> <span class="literal">space</span>-delimited arguments. The <span class="keyword">given</span> command will be executed <span class="keyword">on</span> all</div><div class="line">  selected nodes. It will <span class="keyword">not</span> be processed <span class="keyword">through</span> <span class="keyword">the</span> shell, so variables like `$HOME' <span class="keyword">and</span> operations like `<span class="string">"&lt;"</span>', `<span class="string">"&gt;"</span>', `<span class="string">"|"</span>', `<span class="string">";"</span>' <span class="keyword">and</span></div><div class="line">  `<span class="string">"&amp;"</span>' will <span class="keyword">not</span> work (use <span class="keyword">the</span> [shell] module <span class="keyword">if</span> you need these features).</div><div class="line"></div><div class="line">Options (= <span class="keyword">is</span> mandatory):</div><div class="line"></div><div class="line">- chdir</div><div class="line">        cd <span class="keyword">into</span> this directory <span class="keyword">before</span> <span class="built_in">running</span> <span class="keyword">the</span> command</div><div class="line">        [Default: None]</div><div class="line">- creates</div><div class="line">        a filename <span class="keyword">or</span> (<span class="keyword">since</span> <span class="number">2.0</span>) glob pattern, when <span class="keyword">it</span> already exists, this step will *<span class="keyword">not</span>* be <span class="built_in">run</span>.</div><div class="line">        [Default: None]</div><div class="line">- executable</div><div class="line">        change <span class="keyword">the</span> shell used <span class="keyword">to</span> execute <span class="keyword">the</span> command. Should be an absolute <span class="built_in">path to</span> <span class="keyword">the</span> executable.</div><div class="line">        [Default: None]</div><div class="line">= free_form</div><div class="line">        <span class="keyword">the</span> command module takes a free form command <span class="keyword">to</span> <span class="built_in">run</span>.  There <span class="keyword">is</span> no parameter actually named 'free form'. See <span class="keyword">the</span> examples!</div><div class="line">        [Default: None]</div><div class="line">- removes</div><div class="line">        a filename <span class="keyword">or</span> (<span class="keyword">since</span> <span class="number">2.0</span>) glob pattern, when <span class="keyword">it</span> <span class="keyword">does</span> <span class="keyword">not</span> exist, this step will *<span class="keyword">not</span>* be <span class="built_in">run</span>.</div><div class="line">        [Default: None]</div><div class="line">- warn</div><div class="line">        <span class="keyword">if</span> command warnings are <span class="keyword">on</span> <span class="keyword">in</span> ansible.cfg, do <span class="keyword">not</span> warn <span class="keyword">about</span> this particular line <span class="keyword">if</span> <span class="keyword">set</span> <span class="keyword">to</span> no/<span class="literal">false</span>.</div><div class="line">        [Default: True]</div><div class="line">Notes:</div><div class="line">  * If you want <span class="keyword">to</span> <span class="built_in">run</span> a command <span class="keyword">through</span> <span class="keyword">the</span> shell (<span class="built_in">say</span> you are using `&lt;', `&gt;', `|', etc), you actually want <span class="keyword">the</span> [shell] module</div><div class="line">        instead. The [command] module <span class="keyword">is</span> much more secure <span class="keyword">as</span> <span class="keyword">it</span>'s <span class="keyword">not</span> affected <span class="keyword">by</span> <span class="keyword">the</span> user's environment.</div><div class="line">  *  `creates', `removes', <span class="keyword">and</span> `chdir' can be specified <span class="keyword">after</span> <span class="keyword">the</span> command. For instance, <span class="keyword">if</span> you only want <span class="keyword">to</span> <span class="built_in">run</span> a command <span class="keyword">if</span> a</div><div class="line">        certain <span class="built_in">file</span> <span class="keyword">does</span> <span class="keyword">not</span> exist, use this.</div><div class="line">EXAMPLES:</div><div class="line"><span class="comment"># Example from Ansible Playbooks.</span></div><div class="line">- command: /sbin/shutdown -t now</div><div class="line"></div><div class="line"><span class="comment"># Run the command if the specified file does not exist.</span></div><div class="line">- command: /usr/bin/make_database.sh arg1 arg2 creates=/path/<span class="keyword">to</span>/database</div><div class="line"></div><div class="line"><span class="comment"># You can also use the 'args' form to provide the options. This command</span></div><div class="line"><span class="comment"># will change the working directory to somedir/ and will only run when</span></div><div class="line"><span class="comment"># /path/to/database doesn't exist.</span></div><div class="line">- command: /usr/bin/make_database.sh arg1 arg2</div><div class="line">  args:</div><div class="line">    chdir: somedir/</div><div class="line">    creates: /path/<span class="keyword">to</span>/database</div></pre></td></tr></table></figure>
<h3 id="三、命令执行模块"><a href="#三、命令执行模块" class="headerlink" title="三、命令执行模块"></a>三、命令执行模块</h3><p>命令执行模块包含如下 四个模块：</p>
<ul>
<li><a href="http://docs.ansible.com/command_module.html" target="_blank" rel="external">command模块</a>：该模块通过-a跟上要执行的命令可以直接执行</li>
<li><a href="http://docs.ansible.com/shell_module.html" target="_blank" rel="external">shell 模块</a>：用法基本和command一样，不过其是通过/bin/sh进行执行，所以shell 模块可以执行任何命令，就像在本机执行一样；</li>
<li><a href="http://docs.ansible.com/raw_module.html" target="_blank" rel="external">raw模块</a>：用法和shell 模块一样 ，其也可以执行任意命令，就像在本机执行一样；</li>
<li><a href="http://docs.ansible.com/script_module.html" target="_blank" rel="external">script模块</a>：其是将管理端的shell 在被管理主机上执行，其原理是先将shell 复制到远程主机，再在远程主机上执行，原理类似于raw模块。</li>
</ul>
<p>注：raw模块和comand、shell 模块不同的是其没有chdir、creates、removes参数，chdir参数的作用就是先切到chdir指定的目录后，再执行后面的命令，这在后面很多模块里都会有该参数 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了ansible的Ad-hoc命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible参数配置文件ansible.cfg</title>
    <link href="http://wangshengzhuang.com/2017/05/15/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Ansible%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6ansible.cfg/"/>
    <id>http://wangshengzhuang.com/2017/05/15/运维相关/Ansible/Ansible参数配置文件ansible.cfg/</id>
    <published>2017-05-15T15:26:47.000Z</published>
    <updated>2017-05-23T14:01:46.251Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible默认安装好后有一个配置文件/etc/ansible/ansible.cfg，该配置文件中定义了ansible的主机的默认配置部分，如默认是否需要输入密码、是否开启sudo认证、action_plugins插件的位置、hosts主机组的位置、是否开启log功能、默认端口、key文件位置等等。</p>
<a id="more"></a>
<p>Ansible的一些的设置可以通过配置文件完成.在大多数场景下默认的配置就能满足大多数用户的需求,在一些特殊场景下,用户还是需要自行修改这些配置文件。</p>
<p>用户可以修改一下配置文件来修改设置,他们的被读取的顺序如下:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>ANSIBLE_CONFIG (一个环境变量)</div><div class="line"><span class="bullet">* </span>ansible.cfg (位于当前目录中)</div><div class="line"><span class="bullet">* </span>.ansible.cfg (位于家目录中)</div><div class="line"><span class="bullet">* </span>/etc/ansible/ansible.cfg</div></pre></td></tr></table></figure>
<p>Ansible 将会按以上顺序逐个查询这些文件,直到找到一个为止,并且使用第一个寻找到个配置文件的配置,这些配置将不会被叠加.</p>
<h4 id="ask-pass"><a href="#ask-pass" class="headerlink" title="ask_pass"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id63" target="_blank" rel="external">ask_pass</a></h4><ul>
<li><p>这个可以控制,Ansible 剧本playbook 是否会自动默认弹出弹出密码.默认为no::</p>
<p>ask_pass=True</p>
</li>
</ul>
<p>如果使用SSH 密钥匙做身份认证.可能需要修改这一参数</p>
<h4 id="ask-sudo-pass"><a href="#ask-sudo-pass" class="headerlink" title="ask_sudo_pass"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id64" target="_blank" rel="external">ask_sudo_pass</a></h4><p>类似 ask_pass,用来控制Ansible playbook 在执行sudo之前是否询问sudo密码.默认为no:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ask_sudo_pass</span>=<span class="literal">True</span></div></pre></td></tr></table></figure>
<p>如果用户使用的系统平台开启了sudo 密码的话,应该开绿这一参数</p>
<h4 id="forks"><a href="#forks" class="headerlink" title="forks"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id76" target="_blank" rel="external">forks</a></h4><p>这个选项设置在与主机通信时的默认并行进程数.从Ansible 1.3开始,fork数量默认自动设置为主机数量或者潜在的主机数量, 这将直接控制有多少网络资源活着cpu可以被使用.很多用户把这个设置为50,有些设置为500或者更多.如果你有很多的主机, 高数值将会使得跨主机行为变快.默认值比较保守:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">_forks</span>=<span class="number">5</span></div></pre></td></tr></table></figure>
<h4 id="gathering"><a href="#gathering" class="headerlink" title="gathering"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id77" target="_blank" rel="external">gathering</a></h4><p>1.6版本中的新特性,这个设置控制默认facts收集（远程系统变量）. 默认值为’implicit’, 每一次play,facts都会被手机,除非设置’gather_facts: False’. 选项‘explicit’正好相反,facts不会被收集,直到play中需要. ‘smart’选项意思是,没有facts的新hosts将不会被扫描, 但是如果同样一个主机,在不同的plays里面被记录地址,在playbook运行中将不会通信.这个选项当有需求节省fact收集时比较有用.</p>
<h4 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id81" target="_blank" rel="external">inventory</a></h4><p>这个事默认库文件位置,脚本,或者存放可通信主机的目录:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">inventory</span> = /etc/ansible/hosts</div></pre></td></tr></table></figure>
<h4 id="log-path"><a href="#log-path" class="headerlink" title="log_path"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id84" target="_blank" rel="external">log_path</a></h4><p>如果出现在ansible.cfg文件中.Ansible 将会在选定的位置登陆执行信息.请留意用户运行的Ansible对于logfile有权限:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_path=/<span class="built_in">var</span>/<span class="keyword">log</span>/ansible.<span class="keyword">log</span></div></pre></td></tr></table></figure>
<p>这个特性不是默认开启的.如果不设置,ansible将会吧模块加载纪录在系统日志系统中.不包含用密码.</p>
<p>对于需要了解更多日志系统的企业及用户,你也许对:doc:tower 感兴趣.</p>
<h4 id="module-name"><a href="#module-name" class="headerlink" title="module_name"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id87" target="_blank" rel="external">module_name</a></h4><p>这个是/usr/bin/ansible的默认模块名（-m）. 默认是’command’模块. 之前提到过,command模块不支持shell变量,管道,配额. 所以也许你希望把这个参数改为’shell’:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">module_name</span> = command</div></pre></td></tr></table></figure>
<h4 id="poll-interval"><a href="#poll-interval" class="headerlink" title="poll_interval"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id91" target="_blank" rel="external">poll_interval</a></h4><p>对于Ansible中的异步任务(详见 <a href="http://www.ansible.com.cn/docs/playbooks_async.html" target="_blank" rel="external"><em>异步操作和轮询</em></a>）, 这个是设置定义,当具体的poll interval 没有定义时,多少时间回查一下这些任务的状态, 默认值是一个折中选择15秒钟.这个时间是个回查频率和任务完成叫回频率和当任务完成时的回转频率的这种:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">poll_interval</span>=<span class="number">15</span></div></pre></td></tr></table></figure>
<h4 id="private-key-file"><a href="#private-key-file" class="headerlink" title="private_key_file"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id92" target="_blank" rel="external">private_key_file</a></h4><p>如果你是用pem密钥文件而不是SSH 客户端或秘密啊认证的话,你可以设置这里的默认值,来避免每一次提醒设置密钥文件位置<code>–ansible-private-keyfile</code>:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private_key_file=/path/<span class="keyword">to</span>/<span class="built_in">file</span>.pem</div></pre></td></tr></table></figure>
<h4 id="remote-port"><a href="#remote-port" class="headerlink" title="remote_port"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id93" target="_blank" rel="external">remote_port</a></h4><p>这个设置是你系统默认的远程SSH端口,如果不指定,默认为22号端口:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">remote_port = 22</span></div></pre></td></tr></table></figure>
<h4 id="remote-tmp"><a href="#remote-tmp" class="headerlink" title="remote_tmp"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id94" target="_blank" rel="external">remote_tmp</a></h4><p>Ansible 通过远程传输模块到远程主机,然后远程执行,执行后在清理现场.在有些场景下,你也许想使用默认路径希望像更换补丁一样使用, 这时候你可以使用这个选项.:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">remote_tmp = $HOME/.ansible/tmp</span></div></pre></td></tr></table></figure>
<p>默认路径是在用户家目录下属的目录.Ansible 会在这个目录中使用一个随机的文件夹名称.</p>
<h4 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id95" target="_blank" rel="external">remote_user</a></h4><p>这是个ansible使用/usr/bin/ansible-playbook链接的默认用户名. 注意如果不指定,/usr/bin/ansible默认使用当前用户名称:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">remote_user = root</span></div></pre></td></tr></table></figure>
<h4 id="roles-path"><a href="#roles-path" class="headerlink" title="roles_path"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id96" target="_blank" rel="external">roles_path</a></h4><p>roles 路径指的是’roles/’下的额外目录,用于playbook搜索Ansible roles.比如, 如果我们有个用于common roles源代码控制仓库和一个不同的 playbooks仓库,你也许会建立一个惯例去在 /opt/mysite/roles 里面查找roles.:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">roles_path</span> = /opt/mysite/roles</div></pre></td></tr></table></figure>
<p>多余的路径可以用冒号分隔,类似于其他path字符串:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">roles_path = <span class="regexp">/opt/my</span>site<span class="regexp">/roles:/</span>opt<span class="regexp">/othersite/</span>roles</div></pre></td></tr></table></figure>
<p>Roles将会在playbook目录中开始搜索.如果role没有找到,这个参数指定了其它可能的搜索路径.</p>
<h4 id="sudo-user"><a href="#sudo-user" class="headerlink" title="sudo_user"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id99" target="_blank" rel="external">sudo_user</a></h4><p>这个是sudo使用的默认用户,如果<code>–sudo-user</code> 没有特指或者’sudo_user’ 在Ansible playbooks中没有特指,在大多数的逻辑中 默认为: ‘root’</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sudo_user</span>=root</div></pre></td></tr></table></figure>
<h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id101" target="_blank" rel="external">timeout</a></h4><p>这个事默认SSH链接尝试超市时间:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">timeout</span> = <span class="number">10</span></div></pre></td></tr></table></figure>
<h4 id="vault-password-file"><a href="#vault-password-file" class="headerlink" title="vault_password_file"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id104" target="_blank" rel="external">vault_password_file</a></h4><p>New in version 1.7.</p>
<p>这个用来设置密码文件,也可以通过命令行指定<code>–vault-password-file</code>:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">vault_password_file</span> = /path/to/vault_password_file</div></pre></td></tr></table></figure>
<p>在1.7版本中,这个文件也可以称为一个脚本的形式.如果你使用脚本而不是单纯文件的话,请确保它可以执行并且密码可以在标准输出上打印出来.如果你的脚本需要提示请求数据,请求将会发到标准错误输出中.</p>
<h4 id="record-host-keys"><a href="#record-host-keys" class="headerlink" title="record_host_keys"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id106" target="_blank" rel="external">record_host_keys</a></h4><p>默认设置会记录并验证通过在用户hostfile中新发现的的主机（如果host key checking 被激活的话）. 这个选项在有很多主机的时候将会性能很差.在 这种情况下,建议使用SSH传输代替. 当设置为False时, 性能将会提升,在hostkey checking 被禁用时候,建议使用.:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">record_host_keys</span>=<span class="literal">True</span></div></pre></td></tr></table></figure>
<h4 id="host-key-checking"><a href="#host-key-checking" class="headerlink" title="host_key_checking"></a><a href="http://www.ansible.com.cn/docs/intro_configuration.html#id80" target="_blank" rel="external">host_key_checking</a></h4><p>如果有台被管节点重新安装系统并在known_hosts中有了与之前不同的密钥信息，就会提示一个密钥不匹配的错误信息，直到被纠正为止，在使用Ansible时，如果有台被管理节点没有在known_hosts中被初始化，将会在使用Ansible或定时执行Ansible时提示对key信息的确认。如果你不想出现这种情况，并且你明白禁用此项行为的含义，只要修改该参数为False即可 </p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">host_key_checking</span>=<span class="literal">True</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ansible默认安装好后有一个配置文件/etc/ansible/ansible.cfg，该配置文件中定义了ansible的主机的默认配置部分，如默认是否需要输入密码、是否开启sudo认证、action_plugins插件的位置、hosts主机组的位置、是否开启log功能、默认端口、key文件位置等等。&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible主机清单Inventory文件hosts</title>
    <link href="http://wangshengzhuang.com/2017/05/14/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Ansible%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95Inventory%E6%96%87%E4%BB%B6hosts/"/>
    <id>http://wangshengzhuang.com/2017/05/14/运维相关/Ansible/Ansible主机清单Inventory文件hosts/</id>
    <published>2017-05-14T15:26:47.000Z</published>
    <updated>2017-05-23T14:01:33.718Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible 通过读取默认的主机清单配置,可以同时连接到多个远程主机上执行任务组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/hosts。默认路径可以通过修改 ansible.cfg 的 hostfile 参数指定路径。</p>
<a id="more"></a>
<p>除默认文件外,你还可以同时使用多个 inventory 文件(后面会讲到),也可以从动态源,或云上拉取 inventory 配置信息.详见 <a href="http://www.ansible.com.cn/docs/intro_dynamic_inventory.html" target="_blank" rel="external"><em>动态 Inventory</em></a>.</p>
<h2 id="1-主机与组"><a href="#1-主机与组" class="headerlink" title="1.主机与组"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id8" target="_blank" rel="external">1.主机与组</a></h2><p>/etc/ansible/hosts 文件的格式与windows的ini配置文件类似:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mail<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line"></div><div class="line">[webservers]</div><div class="line">foo<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line">bar<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line"></div><div class="line">[dbservers]</div><div class="line">one<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line">two<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line">three<span class="selector-class">.example</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<ol>
<li>方括号[]中是组名,用于对系统进行分类,便于对不同系统进行个别的管理.可以根据自己的需求将庞大的主机分成具有标识的组，如上面分了两个组webservers和dbservers组；</li>
<li>一个主机可以属于不同的组,比如一台服务器可以同时属于 webserver组 和 dbserver组.这时属于两个组的变量都可以为这台主机所用,</li>
<li>如果有主机的SSH端口不是标准的22端口,可在主机名之后加上端口号,用冒号分隔.</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">badwolf</span><span class="selector-class">.example</span><span class="selector-class">.com</span><span class="selector-pseudo">:5309</span></div></pre></td></tr></table></figure>
<p> 4.假设你有一些静态IP地址,希望设置一些别名,但不是在系统的 host 文件中设置,那么可以设置如下:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jumper ansible_ssh_port=<span class="number">5555</span> ansible_ssh_host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.50</span></div></pre></td></tr></table></figure>
<ol>
<li>可以按照范围指定主机，一组相似的 hostname , 可简写如下:</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[webservers]</span></div><div class="line"><span class="selector-tag">www</span><span class="selector-attr">[01:50]</span><span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line"></div><div class="line"><span class="selector-attr">[databases]</span></div><div class="line"><span class="selector-tag">db-</span><span class="selector-attr">[a:f]</span><span class="selector-class">.example</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<h2 id="2-主机变量"><a href="#2-主机变量" class="headerlink" title="2.主机变量"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id9" target="_blank" rel="external">2.主机变量</a></h2><p>前面已经提到过,分配变量给主机很容易做到,这些变量定义后可在 playbooks 中使用:</p>
<p>对于每一个 host,你还可以选择连接类型和连接用户名:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[targets]</div><div class="line"></div><div class="line">localhost              ansible_connection=local</div><div class="line">other1<span class="selector-class">.example</span><span class="selector-class">.com</span>     ansible_connection=ssh        ansible_ssh_user=mpdehaan</div><div class="line">other2<span class="selector-class">.example</span><span class="selector-class">.com</span>     ansible_connection=ssh        ansible_ssh_user=mdehaan</div></pre></td></tr></table></figure>
<p>定义其他变量</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[atlanta]</div><div class="line">host1 http_port=<span class="number">80</span>  maxRequestsPerChild=<span class="number">808</span></div><div class="line">host2 http_port=<span class="number">303</span> maxRequestsPerChild=<span class="number">909</span></div></pre></td></tr></table></figure>
<h2 id="3-组的变量"><a href="#3-组的变量" class="headerlink" title="3.组的变量"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id10" target="_blank" rel="external">3.组的变量</a></h2><p>也可以定义属于整个组的变量，应用到组内的所有成员：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[atlanta]</div><div class="line">host1</div><div class="line">host2</div><div class="line"></div><div class="line">[atlanta:vars]</div><div class="line">ntp_server=ntp<span class="selector-class">.atlanta</span><span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line">proxy=proxy<span class="selector-class">.atlanta</span><span class="selector-class">.example</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p>上面atlanta组中包含两台主机，通过对atlanta组指定vars变更，相应的host1和host2相当于相应的指定了ntp_server和proxy变量参数值 。</p>
<h2 id="4-把一个组作为另一个组的子成员"><a href="#4-把一个组作为另一个组的子成员" class="headerlink" title="4.把一个组作为另一个组的子成员"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id11" target="_blank" rel="external">4.把一个组作为另一个组的子成员</a></h2><p>可以把一个组作为另一个组的子成员,以及分配变量给整个组使用. 这些变量可以给 /usr/bin/ansible-playbook 使用,但不能给 /usr/bin/ansible 使用:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[atlanta]</div><div class="line">host1</div><div class="line">host2</div><div class="line"></div><div class="line">[raleigh]</div><div class="line">host2</div><div class="line">host3</div><div class="line"></div><div class="line"><span class="section">[southeast:children]</span></div><div class="line">atlanta</div><div class="line">raleigh</div><div class="line"></div><div class="line"><span class="section">[southeast:vars]</span></div><div class="line">some_server=foo.southeast.example.com</div><div class="line">halon_system_timeout=30</div><div class="line">self_destruct_countdown=60</div><div class="line">escape_pods=2</div><div class="line"></div><div class="line"><span class="section">[usa:children]</span></div><div class="line">southeast</div><div class="line">northeast</div><div class="line">southwest</div><div class="line">northwest</div></pre></td></tr></table></figure>
<h2 id="5、分文件定义-Host-和-Group-变量"><a href="#5、分文件定义-Host-和-Group-变量" class="headerlink" title="5、分文件定义 Host 和 Group 变量"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id12" target="_blank" rel="external">5、分文件定义 Host 和 Group 变量</a></h2><p>在 inventory 主文件中保存所有的变量并不是最佳的方式.还可以保存在独立的文件中,这些独立文件与 inventory 文件保持关联. 不同于 inventory 文件(INI 格式),这些独立文件的格式为 YAML.详见 <a href="http://www.ansible.com.cn/docs/YAMLSyntax.html" target="_blank" rel="external"><em>YAML 语法</em></a> .</p>
<p>假设 inventory 文件的路径为:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/</span>ansible<span class="regexp">/hosts</span></div></pre></td></tr></table></figure>
<p>假设有一个主机名为 ‘foosball’, 主机同时属于两个组,一个是 ‘raleigh’, 另一个是 ‘webservers’. 那么以下配置文件(YAML 格式)中的变量可以为 ‘foosball’ 主机所用.依次为 ‘raleigh’ 的组变量,’webservers’ 的组变量,’foosball’ 的主机变量:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/</span>ansible<span class="regexp">/group_vars/</span>raleigh</div><div class="line"><span class="regexp">/etc/</span>ansible<span class="regexp">/group_vars/</span>webservers</div><div class="line"><span class="regexp">/etc/</span>ansible<span class="regexp">/host_vars/</span>foosball</div></pre></td></tr></table></figure>
<h2 id="6-Inventory-参数的说明"><a href="#6-Inventory-参数的说明" class="headerlink" title="6.Inventory 参数的说明"></a><a href="http://www.ansible.com.cn/docs/intro_inventory.html#id13" target="_blank" rel="external">6.Inventory 参数的说明</a></h2><p>如同前面提到的,通过设置下面的参数,可以控制 ansible 与远程主机的交互方式,其中一些我们已经讲到过:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">ansible_ssh_host</div><div class="line">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</div><div class="line"></div><div class="line">ansible_ssh_port</div><div class="line">      ssh端口号.如果不是默认的端口号,通过此变量设置.</div><div class="line"></div><div class="line">ansible_ssh_user</div><div class="line">      默认的 ssh 用户名</div><div class="line"></div><div class="line">ansible_ssh_pass</div><div class="line">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</div><div class="line"></div><div class="line">ansible_sudo_pass</div><div class="line">      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</div><div class="line"></div><div class="line">ansible_sudo_exe (<span class="keyword">new</span> in <span class="keyword">version</span> <span class="number">1.8</span>)</div><div class="line">      sudo 命令路径(适用于<span class="number">1.8</span>及以上版本)</div><div class="line"></div><div class="line">ansible_connection</div><div class="line">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible <span class="number">1.2</span> 以前默认使用 paramiko.<span class="number">1.2</span> 以后默认使用 <span class="string">'smart'</span>,<span class="string">'smart'</span> 方式会根据是否支持 ControlPersist, 来判断<span class="string">'ssh'</span> 方式是否可行.</div><div class="line"></div><div class="line">ansible_ssh_private_key_file</div><div class="line">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</div><div class="line"></div><div class="line">ansible_shell_type</div><div class="line">      目标系统的<span class="keyword">shell</span>类型.默认情况下,命令的执行使用 <span class="string">'sh'</span> 语法,可设置为 <span class="string">'csh'</span> 或 <span class="string">'fish'</span>.</div><div class="line"></div><div class="line">ansible_python_interpreter</div><div class="line">      目标主机的 <span class="keyword">python</span> 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是<span class="string">"/usr/bin/python"</span>,比如  \*BSD, 或者 /usr/bin/<span class="keyword">python</span></div><div class="line">      不是 <span class="number">2</span>.<span class="keyword">X</span> 版本的 Python.我们不使用 <span class="string">"/usr/bin/env"</span> 机制,因为这要求远程用户的路径设置正确,且要求 <span class="string">"python"</span> 可执行程序名不可为 <span class="keyword">python</span>以外的名字(实际有可能名为python26).</div><div class="line"></div><div class="line">      与 ansible_python_interpreter 的工作方式相同,可设定如 <span class="keyword">ruby</span> 或 <span class="keyword">perl</span> 的路径....</div></pre></td></tr></table></figure>
<h2 id="7-一个主机文件的例子"><a href="#7-一个主机文件的例子" class="headerlink" title="7.一个主机文件的例子:"></a>7.一个主机文件的例子:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> This is the default ansible <span class="string">'hosts'</span> file.</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"> It should live <span class="keyword">in</span> /etc/ansible/hosts</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">   - Comments begin with the <span class="string">'#'</span> character</span></div><div class="line"><span class="meta">#</span><span class="bash">   - Blank lines are ignored</span></div><div class="line"><span class="meta">#</span><span class="bash">   - Groups of hosts are delimited by [header] elements</span></div><div class="line"><span class="meta">#</span><span class="bash">   - You can enter hostnames or ip addresses</span></div><div class="line"><span class="meta">#</span><span class="bash">   - A hostname/ip can be a member of multiple groups</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Ex 1: Ungrouped hosts, specify before any group headers.</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment"># green.example.com</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># blue.example.com</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 192.168.100.1</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 192.168.100.10</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Ex 2: A collection of hosts belonging to the <span class="string">'webservers'</span> group</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment"># [webservers]</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># alpha.example.org</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># beta.example.org</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 192.168.1.100</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 192.168.1.110</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> If you have multiple hosts following a pattern you can specify</span></div><div class="line"><span class="meta">#</span><span class="bash"> them like this:</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment"># www[001:006].example.com</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Ex 3: A collection of database servers <span class="keyword">in</span> the <span class="string">'dbservers'</span> group</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment"># [dbservers]</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># db01.intranet.mydomain.net</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># db02.intranet.mydomain.net</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 10.25.1.56</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 10.25.1.57</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Here<span class="string">'s another example of host ranges, this time there are no</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="string"> leading 0s:</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="string"># db-[99:101]-node.example.com</span></span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ansible 通过读取默认的主机清单配置,可以同时连接到多个远程主机上执行任务组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/hosts。默认路径可以通过修改 ansible.cfg 的 hostfile 参数指定路径。&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Ansible安装</title>
    <link href="http://wangshengzhuang.com/2017/05/13/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/Ansible%E5%AE%89%E8%A3%85/"/>
    <id>http://wangshengzhuang.com/2017/05/13/运维相关/Ansible/Ansible安装/</id>
    <published>2017-05-13T15:26:47.000Z</published>
    <updated>2017-05-23T13:58:16.014Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了ansible的安装方法。</p>
<p><img src="http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg" alt=""></p>
<a id="more"></a>
<h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id9" target="_blank" rel="external">一、安装前准备</a></h1><h2 id="需要安装些什么"><a href="#需要安装些什么" class="headerlink" title="需要安装些什么"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id11" target="_blank" rel="external">需要安装些什么</a></h2><p>Ansible默认通过 SSH 协议管理机器.目前,只要机器上安装了 Python 2.6 或 Python 2.7 (windows系统不可以做控制主机),都可以运行Ansible.</p>
<p>主机的系统可以是 Red Hat, Debian, CentOS, OS X, BSD的各种版本,等等.</p>
<p>安装Ansible之后,不需要启动或运行一个后台进程,或是添加一个数据库.只要在一台电脑(可以是一台笔记本)上安装好,就可以通过这台电脑管理一组远程的机器.在远程被管理的机器上,不需要安装运行任何软件,因此升级Ansible版本不会有太多问题.</p>
<h2 id="版本及安装方式选择"><a href="#版本及安装方式选择" class="headerlink" title="版本及安装方式选择?"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id12" target="_blank" rel="external">版本及安装方式选择?</a></h2><p>因为Ansible可以很简单的从源码运行,且不必在远程被管理机器上安装任何软件,很多Ansible用户会跟进使用开发版本.</p>
<p>Ansible一般每两个月出一个发行版本.小bugs一般在下一个发行版本中修复,并在稳定分支中做backports.大bugs会在必要时出一个维护版本,不过这不是很频繁.</p>
<p>若你希望使用Ansible的最新版本,并且你使用的操作系统是 Red Hat Enterprise Linux (TM), CentOS, Fedora, Debian, Ubuntu,<strong>我们建议使用系统的软件包管理器</strong>.</p>
<p>另有一种选择是通过”pip”工具安装,”pip”是一个安装和管理Python包的工具.</p>
<p>若你希望跟进开发版本,想使用和测试最新的功能特性,我们会分享如何从源码运行Ansible的方法.从源码运行程序不需要进行软件安装.</p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id15" target="_blank" rel="external">二、安装</a></h1><h2 id="2-1-通过Yum安装最新发布版本"><a href="#2-1-通过Yum安装最新发布版本" class="headerlink" title="2.1 通过Yum安装最新发布版本"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id17" target="_blank" rel="external">2.1 通过Yum安装最新发布版本</a></h2><p>RHEL或CentOS用户,需要 <a href="http://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">配置 EPEL</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> install the epel-release RPM <span class="keyword">if</span> needed on CentOS, RHEL, or Scientific Linux</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo yum install epel-release</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo yum install ansible</span></div></pre></td></tr></table></figure>
<h2 id="2-2-自己创建RPM软件包"><a href="#2-2-自己创建RPM软件包" class="headerlink" title="2.2 自己创建RPM软件包"></a>2.2 自己创建RPM软件包</h2><p>你也可以自己创建RPM软件包.在Ansible项目的checkout的根目录下,或是在一个tarball中,使用 <code>make rpm</code> 命令创建RPM软件包. 然后可分发这个软件包或是使用它来安装Ansible.在创建之前,先确定你已安装了 <code>rpm-build</code>, <code>make</code>, and <code>python2-devel</code> .</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/ansible/ansible.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ./ansible</span></div><div class="line"><span class="meta">$</span><span class="bash"> make rpm</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rpm -Uvh ~/rpmbuild/ansible-*.noarch.rpm</span></div></pre></td></tr></table></figure>
<h2 id="2-3-通过Apt-Ubuntu-安装最新发布版本"><a href="#2-3-通过Apt-Ubuntu-安装最新发布版本" class="headerlink" title="2.3 通过Apt (Ubuntu)安装最新发布版本"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id18" target="_blank" rel="external">2.3 通过Apt (Ubuntu)安装最新发布版本</a></h2><p>配置PPA及安装ansible,执行如下命令:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install software-properties-common</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository ppa:ansible/ansible</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ansible</span></div></pre></td></tr></table></figure>
<h2 id="2-4-通过-Pip-安装最新发布版本"><a href="#2-4-通过-Pip-安装最新发布版本" class="headerlink" title="2.4 通过 Pip 安装最新发布版本"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id24" target="_blank" rel="external">2.4 通过 Pip 安装最新发布版本</a></h2><p>Ansible可通过 “pip” 安装(安装和管理Python包的工具),若你还没有安装 pip,可执行如下命令安装:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo easy_install pip</span></div></pre></td></tr></table></figure>
<p>然后安装Ansible:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install ansible</span></div></pre></td></tr></table></figure>
<p>如果你是在 OS X Mavericks 上安装,编译器可能或告警或报错,可通过如下设置避免这种情况:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo CFLAGS=-Qunused-<span class="built_in">arguments</span> CPPFLAGS=-Qunused-<span class="built_in">arguments</span> pip install ansible</div></pre></td></tr></table></figure>
<h2 id="2-5-发行版的Tarball"><a href="#2-5-发行版的Tarball" class="headerlink" title="2.5 发行版的Tarball"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id25" target="_blank" rel="external">2.5 发行版的Tarball</a></h2><p>不想通过git checkout 创建Ansible的软件包？在这里可获取Tarball <a href="http://releases.ansible.com/ansible" target="_blank" rel="external">Ansible downloads</a></p>
<h2 id="2-6-在Mac-OSX-上安装最新发布版本"><a href="#2-6-在Mac-OSX-上安装最新发布版本" class="headerlink" title="2.6 在Mac OSX 上安装最新发布版本"></a><a href="http://www.ansible.com.cn/docs/intro_installation.html#id21" target="_blank" rel="external">2.6 在Mac OSX 上安装最新发布版本</a></h2><p>在 Mac 上安装 ansible，最好是通过 pip 安装，参照 <a href="http://www.ansible.com.cn/docs/intro_installation.html#pip" target="_blank" rel="external">通过 Pip 安装最新发布版本</a> .</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了ansible的安装方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>初识Ansible</title>
    <link href="http://wangshengzhuang.com/2017/05/12/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/%E5%88%9D%E8%AF%86Ansible/"/>
    <id>http://wangshengzhuang.com/2017/05/12/运维相关/Ansible/初识Ansible/</id>
    <published>2017-05-12T15:26:47.000Z</published>
    <updated>2017-05-23T14:03:55.504Z</updated>
    
    <content type="html"><![CDATA[<p>初识ansible。</p>
<p><img src="http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg" alt=""></p>
<a id="more"></a>
<h3 id="Ansible是什么？"><a href="#Ansible是什么？" class="headerlink" title="Ansible是什么？"></a>Ansible<strong>是什么</strong>？</h3><p>官方的描述如下 </p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Simple, agentless <span class="built_in">and</span> powerful <span class="keyword">open</span> <span class="keyword">source</span> IT automation</div></pre></td></tr></table></figure>
<p>Ansible是近年越来越火的一款基于Python开发的运维自动化工具，2012.02月出现至今，已成为排名前10的python项目。</p>
<p><img src="http://image.wangshengzhuang.com/17-5-22/53522347-file_1495460433051_500c.png" alt=""></p>
<p>其主要功能是帮助运维实现IT工作的自动化、降低人为操作失误、提高业务自动化率、提升运维工作效率，常用于软件部署自动化、配置自动化、管理自动化、系统化系统任务、持续集成、零宕机平滑升级等。</p>
<h3 id="Ansible名字来源？"><a href="#Ansible名字来源？" class="headerlink" title="Ansible名字来源？"></a>Ansible<strong>名字来源</strong>？</h3><p>Ansible名字其实是来源于作者喜欢的一本书——奥森·斯科特·卡特的《安德的游戏》，该书中Ansible是一种能跨越时空的即时通信工具，使用Ansible可以在相距数光年的距离远程实时控制前线的舰队战斗。Michael DeHaan希望借这个名词比喻控制远端大量的服务器，因此便将自己的这款产品命名为Ansible。</p>
<h3 id="为什么选择Ansible？"><a href="#为什么选择Ansible？" class="headerlink" title="为什么选择Ansible？"></a>为什么选择Ansible？</h3><ol>
<li>noagents：不需要在被管控主机上安装任何客户端</li>
<li>noserver：无服务器daemon进程</li>
<li>基于SSH工作</li>
<li>安装简单</li>
<li>Redhat收购</li>
<li>Ansible galaxy</li>
<li>支持docker的模块管理</li>
</ol>
<h3 id="Ansible架构"><a href="#Ansible架构" class="headerlink" title="Ansible架构"></a>Ansible架构</h3><p><img src="http://image.wangshengzhuang.com/17-5-22/58519827-file_1495460630196_15282.png" alt=""></p>
<p>Ansible没有客户端，因此底层通信依赖于系统软件，Linux系统下基于OpenSSH通信，Windows系统下基于PowerShell，管理端必须是Linux系统，使用者认证通过后在管理节点通过Ansible工具调用各应用模块将指令推送至被管理端执行，并在执行完毕后自动删除产生的临时文件。</p>
<p>ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：</p>
<p>(1)、连接插件connectionplugins：负责和被监控端实现通信；</p>
<p>(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；</p>
<p>(3)、各种模块核心模块、command模块、自定义模块；</p>
<p>(4)、借助于插件完成记录日志邮件等功能；</p>
<p>(5)、playbook：剧本执行多个任务</p>
<h3 id="Ansible任务执行流程"><a href="#Ansible任务执行流程" class="headerlink" title="Ansible任务执行流程"></a>Ansible任务执行流程</h3><p><img src="http://image.wangshengzhuang.com/17-5-22/67984305-file_1495460751602_df86.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初识ansible。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wangshengzhuang.com/17-5-19/88214161-file_1495207716369_76e1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维相关" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Ansible/"/>
    
    
      <category term="Ansible" scheme="http://wangshengzhuang.com/tags/Ansible/"/>
    
  </entry>
  
</feed>
