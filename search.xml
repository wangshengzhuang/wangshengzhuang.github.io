<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多节点3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F05%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%20%E5%A4%9A%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 ip地址 主机名 server_id 192.168.0.101 mysql001 1 192.168.0.102 mysql002 2 192.168.0.103 mysql003 3 192.168.0.104 mysql-router 主要步骤如图所示 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0;此步骤主要是避免Executed_Gtid_Set不一致 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password('admin_123');Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 一句话执行 1mysql -uroot -padmin_123 -e "SET SQL_LOG_BIN=0;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION; flush privileges; SET SQL_LOG_BIN=1" 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.checkInstanceConfiguration('root@localhost:3306')mysql-js&gt; dba.configureLocalInstance('root@localhost:3306') 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3306/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 1shell&gt; systemctl restart mysqld 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. 创建 InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3306: 123mysql-js&gt; \connect root@192.168.0.101:3306或者mysql-js&gt; shell.connect(&apos;root@192.168.0.101:3306&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5.添加 Instances 至 InnoDB Cluster配置/etc/hosts 123192.168.0.101 mysql001192.168.0.102 mysql002192.168.0.103 mysql003 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.101:3306mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.102:3306&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3306&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.101:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3306’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@192.168.0.103:3306 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.101:3306,mysql://192.168.0.102:3306,mysql://192.168.0.103:3306user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 192.168.0.101:3306 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现192.168.0.102:3306已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqldmysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.101:3306&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment MySQL InnoDB Cluster – Real-World Cluster Tutorial for OEL, Fedora, RHEL and CentOS]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单机3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F04%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E5%8D%95%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0; 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;admin_123&apos; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;) 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3301/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 123shell&gt; systemctl restart mysqld@3301shell&gt; systemctl restart mysqld@3302shell&gt; systemctl restart mysqld@3303 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3301: 123mysql-js&gt; \connect root@192.168.0.103:3301或者mysql-js&gt; shell.connect(&apos;root@192.168.0.103:3301&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.103:3301mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3302&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3303&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3301&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3301’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)mysql-js&gt; \connect root@localhost:3302mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3302&apos;)mysql-js&gt; \connect root@localhost:3303mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3303&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3301 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.103:3301,mysql://192.168.0.103:3302,mysql://192.168.0.103:3303user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3301 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 3301 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3302 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3302实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqld@3301mysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.103:3301&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沙盒实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F03%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F3%E6%B2%99%E7%9B%92%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过三个沙盒msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more sandbox MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 2. 创建三个沙盒实例Start MySQL Shell 1shell&gt; mysqlsh MySQL Shell provides two scripting languages: JavaScript and Python. Throughout this guide MySQL Shell is used primarily in JavaScript mode . When MySQL Shell starts it is in JavaScript mode by default. You switch into JavaScript mode, Python mode and SQL mode using the commands \js, \py, and \sql. Ensure you are in JavaScript mode by issuing the \js command, then execute: 123mysql-js&gt; dba.deploySandboxInstance(3310)mysql-js&gt; dba.deploySandboxInstance(3320)mysql-js&gt; dba.deploySandboxInstance(3330) 3. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3310: 123mysql-js&gt; \connect root@localhost:3310或者mysql-js&gt; shell.connect(&apos;root@localhost:3310&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 4. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 1mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3320&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3330&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3310&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 5. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3310 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:testCluster]router_id=3bootstrap_server_addresses=mysql://localhost:3310,mysql://localhost:3320,mysql://localhost:3330user=mysql_router3_c3j5z9t7rjgkmetadata_cluster=testClusterttl=300[routing:testCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:testCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:testCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:testCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3310 |+--------+1 row in set (0.00 sec) 6. Testing Failoverkilling the PRIMARY instance 3310 1mysql-js&gt; dba.killSandboxInstance(3310) 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3330 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3320实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123mysql-js&gt; dba.startSandboxInstance(3310)mysql-js&gt; cluster.rejoinInstance(&apos;root@localhost:3310&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Getting Started with InnoDB Cluster]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[InnoDB Cluster简介]]></title>
    <url>%2F2017%2F05%2F02%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、InnoDB Cluster简介前几天 Mysql 团队愉快的发布了 InnoDB Cluster 的 GA（General Availability 正式发布） 版本 InnoDB Cluster 是 Mysql 的一套完整的高可用解决方案 MySQL InnoDB cluster is a collection of products that work together to provide a complete High Availability solution for MySQL. InnoDB Cluster 由下面3个核心组件构成： MySQL Shell 通过内置的 AdminAPI 来创建和管理整个 InnoDB Clusters Includes the AdminAPI, which enables you to script the creation and administration of an InnoDB cluster, using either JavaScript or Python. MySQL Router 缓存 InnoDB cluster 的元数据，负责把 client 的 read/write 请求路由到当前的主数据库节点，还可以对 client 的请求进行负载均衡，并且在主数据库节点出现故障时，保证 client 的请求被路由到新的主服务器节点 Caches the metadata of the InnoDB cluster and routes read/write client requests to the current primary. If the primary instance becomes unavailable, MySQL Router automatically routes client requests to a promoted secondary (the new primary). Group Replication MySQL Server 5.7.17 or higher. 可以把数据同步到集群内的所有成员中，并支持 容错 、 自动故障转移 、 灵活扩展 等重要特性 This provides the MySQL Group Replication mechanism to allow data to be replicated within the cluster, with built-in failover. Group Replication ​]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[今天是五一劳动节，我的新Blog诞生了。希望在新的一年里，能在此认认真真的记录自己的成长！ 目标：每天一篇学习笔记]]></content>
  </entry>
</search>