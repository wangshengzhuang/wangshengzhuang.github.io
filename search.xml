<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ansible安装]]></title>
    <url>%2F2017%2F05%2F19%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAnsible%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文主要记录了ansible的安装方法。 一、安装前准备需要安装些什么Ansible默认通过 SSH 协议管理机器.目前,只要机器上安装了 Python 2.6 或 Python 2.7 (windows系统不可以做控制主机),都可以运行Ansible. 主机的系统可以是 Red Hat, Debian, CentOS, OS X, BSD的各种版本,等等. 安装Ansible之后,不需要启动或运行一个后台进程,或是添加一个数据库.只要在一台电脑(可以是一台笔记本)上安装好,就可以通过这台电脑管理一组远程的机器.在远程被管理的机器上,不需要安装运行任何软件,因此升级Ansible版本不会有太多问题. 版本及安装方式选择?因为Ansible可以很简单的从源码运行,且不必在远程被管理机器上安装任何软件,很多Ansible用户会跟进使用开发版本. Ansible一般每两个月出一个发行版本.小bugs一般在下一个发行版本中修复,并在稳定分支中做backports.大bugs会在必要时出一个维护版本,不过这不是很频繁. 若你希望使用Ansible的最新版本,并且你使用的操作系统是 Red Hat Enterprise Linux (TM), CentOS, Fedora, Debian, Ubuntu,我们建议使用系统的软件包管理器. 另有一种选择是通过”pip”工具安装,”pip”是一个安装和管理Python包的工具. 若你希望跟进开发版本,想使用和测试最新的功能特性,我们会分享如何从源码运行Ansible的方法.从源码运行程序不需要进行软件安装. 二、安装2.1 通过Yum安装最新发布版本RHEL或CentOS用户,需要 配置 EPEL 123# install the epel-release RPM if needed on CentOS, RHEL, or Scientific Linux$ sudo yum install epel-release$ sudo yum install ansible 2.2 自己创建RPM软件包你也可以自己创建RPM软件包.在Ansible项目的checkout的根目录下,或是在一个tarball中,使用 make rpm 命令创建RPM软件包. 然后可分发这个软件包或是使用它来安装Ansible.在创建之前,先确定你已安装了 rpm-build, make, and python2-devel . 1234$ git clone git://github.com/ansible/ansible.git$ cd ./ansible$ make rpm$ sudo rpm -Uvh ~/rpmbuild/ansible-*.noarch.rpm 2.3 通过Apt (Ubuntu)安装最新发布版本配置PPA及安装ansible,执行如下命令: 1234$ sudo apt-get install software-properties-common$ sudo apt-add-repository ppa:ansible/ansible$ sudo apt-get update$ sudo apt-get install ansible 2.4 通过 Pip 安装最新发布版本Ansible可通过 “pip” 安装(安装和管理Python包的工具),若你还没有安装 pip,可执行如下命令安装: 1$ sudo easy_install pip 然后安装Ansible: 1$ sudo pip install ansible 如果你是在 OS X Mavericks 上安装,编译器可能或告警或报错,可通过如下设置避免这种情况: 1$ sudo CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments pip install ansible 2.5 发行版的Tarball不想通过git checkout 创建Ansible的软件包？在这里可获取Tarball Ansible downloads 2.6 在Mac OSX 上安装最新发布版本在 Mac 上安装 ansible，最好是通过 pip 安装，参照 通过 Pip 安装最新发布版本 .]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Supervisor简介、安装、配置]]></title>
    <url>%2F2017%2F05%2F11%2FLinux%2FSupervisor%2FSupervisor%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[本文主要介绍了supervisor的安装、使用。 1. 什么是supervisor Supervisor是一个Python开发的client/server系统，可以管理和监控类unix上面的进程。类似daemontools 什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式执行的程序，比如一个后台任务，如经常会碰到要写一些守护进程，简单做法放入后台： 1shell&gt; nohup python xxx.py &amp; 除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。 2. 为啥用supervisor方便 为啥简单呢？因为咱们通常管理linux进程的时候，一般来说都需要自己编写一个能够实现进程start/stop/restart/reload功能的脚本，然后丢到/etc/init.d/下面。这么做有很多不好的地方，第一我们要编写这个脚本，这就很耗时耗力了。第二，当这个进程挂掉的时候，linux不会自动重启它的，想要自动重启的话，我们还要自己写一个监控重启脚本。而supervisor则可以完美的解决这些问题。supervisor管理进程，是通过fork/exec的方式把这些被管理的进程，当作supervisor的子进程来启动。这样的话，我们只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去就OK了。这样就省下了我们如同linux管理进程的时自己写控制脚本的麻烦了。第二，被管理进程作为supervisor的子进程，当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，所以当然也就可以对挂掉的子进程进行自动重启了，当然重启还是不重启，也要看你的配置文件里面有木有设置autostart=true了。 精确 Supervisord将进程作为子进程启动，因此可以一直知晓子进程的状态，可以方便查询。而基于pid文件文件获取进程状态有时候不靠谱 权限代理 某些进程需要root或者sudo权限运行，而又不方便把机器的root权限和sudo权限开放给用户的时候，普通用户可以借助supervisor的命令和web UI进行进程的启动和关闭 进程组 linux系统没有批量启动关闭进程的功能，我们想要停止多个进程，只能一个一个的去停止，要么就自己写个脚本去批量停止。Supervisor 允许赋予进程优先级，可以使用supervisorctl 的“start all”, and “restart all”，按照优先级顺序启动。并且进程可以分组，相关的进程可以作为一个单元启动。 3. supervisor特点 简单 :supervisor通过一个 INI-style的文件配置，简单易学。提供了许多诸如重启失败进程、自动日子归档的功能 中心化: 可以在在同一个地方启动 停止 监控子进程，进程可以单独控制，也可以分组控制，并提供命令行和web接口配置supervisor 高效: 通过 fork/exec启动子进程 可扩展: 提供了simple event notification protocol和XML-RPC interface，方便通过各种语言进行配置管理 兼容性强: 类Unix都支持，不支持windows，基于Python 作为一款已经被使用了十多年的软件，可用性已经被广泛证明 4. Supervisor 组成 supervisord：supervisord是supervisor的服务端程序。负责启动子程序，应答客户端命令，重启crash进程，子程序日志记录，对进程变化发送事件通知等 supervisorctl： 客户端命令行工具，可以连接服务器端，进行进程的启动、关闭、重启、状态查看等。重要的一点是，supervisorctl不仅可以连接到本机上的supervisord，还可以连接到远程的supervisord，当然在本机上面是通过UNIX socket连接的，远程是通过TCP socket连接的。supervisorctl和supervisord之间的通信，是通过xml_rpc完成的。 相应的配置在[supervisorctl]块里面 Web Server 可以在界面上管理进程的WEB UI, 通过[inet_http_server] section配置，默认http://localhost:9001/` XML-RPC Interface XML-RPC接口，提供XML-RPC服务来对子进程进行管理，监控，参照 XML-RPC API Documentation. 5 安装5.1 yum 安装(推荐)1yum install supervisor 会自动安装成服务形式，可以使用systemctl进行管理 5.2 使用Setuptools安装123wget -q http://peak.telecommunity.com/dist/ez_setup.pypython ez_setup.pyeasy_install supervisor 或者 12yum install python-setuptoolseasy_install supervisor 5.3 安装方式31234wget https://pypi.python.org/packages/80/37/964c0d53cbd328796b1aeb7abea4c0f7b0e8c7197ea9b0b9967b7d004def/supervisor-3.3.1.tar.gztar -zxvf supervisor-3.3.1.tar.gz cd supervisor-3.3.1python setup.py install 5.4生成配置文件yum 安装方式不需要此步骤，因为已经自动生产了supervisord.conf 和supervisord.d文件夹 安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里： 1echo_supervisord_conf &gt; /etc/supervisord.conf 5.5启动1supervisord -c /etc/supervisord.conf 6. 配置文件/etc/supervisord.conf上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。yum方式安装，会自动配置。 12[include]files = supervisord.d/*.ini ; 可以是 *.conf 或 *.ini /etc/supervisord.conf 参数说明 123456789101112131415161718192021222324252627282930313233[unix_http_server]file=/tmp/supervisor.sock ; UNIX socket 文件，supervisorctl 会使用;chmod=0700 ; socket 文件的 mode，默认是 0700;chown=nobody:nogroup ; socket 文件的 owner，格式： uid:gid ;[inet_http_server] ; HTTP 服务器，提供 web 管理界面;port=127.0.0.1:9001 ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性;username=user ; 登录管理后台的用户名;password=123 ; 登录管理后台的密码 [supervisord]logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.loglogfile_maxbytes=50MB ; 日志文件大小，超出会 rotate，默认 50MBlogfile_backups=10 ; 日志文件保留备份数量默认 10loglevel=info ; 日志级别，默认 info，其它: debug,warn,tracepidfile=/tmp/supervisord.pid ; pid 文件nodaemon=false ; 是否在前台启动，默认是 false，即以 daemon 的方式启动minfds=1024 ; 可以打开的文件描述符的最小值，默认 1024minprocs=200 ; 可以打开的进程数的最小值，默认 200 ; the below section must remain in the config file for RPC; (supervisorctl/web interface) to work, additional interfaces may be; added by defining them in separate rpcinterface: sections[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface [supervisorctl]serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord ; 包含其他的配置文件[include]files = /etc/supervisord.d/*.ini ; 可以是 *.conf 或 *.ini 7. 添加一个被管理的进程我们假如有一个hello.py 123456789import weburls = ( &apos;/(.*)&apos;,&apos;hello&apos; )app = web.application(urls, globals())class hello: def GET(self, name): return &apos;hello: &apos; + nameif __name__ == &apos;__main__&apos;: app.run() 所以直接在命令行启动的方式可能是这样的：(需要先安装web.py easy_install web.py) 1python /opt/hello.py 现在编写一份配置文件/etc/supervisord.d/hello.ini来管理这个进程 12345678910111213[program:hello]directory = /opt ; 程序的启动目录command = python /opt/hello.py ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true ; 在 supervisord 启动的时候也自动启动startsecs = 5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了autorestart = true ; 程序异常退出后自动重启startretries = 3 ; 启动失败自动重试次数，默认是 3user = xqzt ; 用哪个用户启动redirect_stderr = true ; 把 stderr 重定向到 stdout，默认 falsestdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile = /var/log/supervisor/hello.log 一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。 12supervisor&gt; statushello RUNNING pid 2809, uptime 0:00:06 8. 使用 supervisorctlSupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。supervisorctl 这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了，也可以直接在 bash 终端运行。 1234567891011121314# supervisorctl --helpsupervisorctl -- control applications run by supervisord from the cmd line.Usage: /usr/bin/supervisorctl [options] [action [arguments]]Options:-c/--configuration -- configuration file path (default /etc/supervisord.conf)-h/--help -- print usage message and exit-i/--interactive -- start an interactive shell after executing commands-s/--serverurl URL -- URL on which supervisord server is listening (default &quot;http://localhost:9001&quot;).-u/--username -- username to use for authentication with server-p/--password -- password to use for authentication with server-r/--history-file -- keep a readline history (if readline is available) 输入help,可以查看支持的命令及用法 123456789101112supervisor&gt; helpdefault commands (type help &lt;topic&gt;):=====================================add clear fg open quit remove restart start stop update avail exit maintail pid reload reread shutdown status tail versionsupervisor&gt; help startstart &lt;name&gt; Start a processstart &lt;gname&gt;:* Start all processes in a groupstart &lt;name&gt; &lt;name&gt; Start multiple processes or groupsstart all Start all processes 常用命令 12345678910111213141516# 停止某一个进程，program_name 为 [program:x] 里的 xsupervisorctl stop program_name# 启动某个进程supervisorctl start program_name# 重启某个进程supervisorctl restart program_name# 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)supervisorctl stop groupworker:# 结束 groupworker:name1 这个进程 (start，restart 同理)supervisorctl stop groupworker:name1# 停止全部进程，注：start、restart、stop 都不会载入最新的配置文件supervisorctl stop all# 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程supervisorctl reload# 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启supervisorctl update 9. supervisor Web UI除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。将supervisord.conf中[inet_http_server]部分做相应配置，在supervisorctl中reload即可启动web管理界面 1234[inet_http_server] ; HTTP 服务器，提供 web 管理界面port=172.17.84.64:9001 ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性username=user ; 登录管理后台的用户名password=123 ; 登录管理后台的密码 在浏览器中输入http://127.0.0.1:9001，可进入web管理界面 10. 将多个进程按组管理Supervisor 同时还提供了另外一种进程组的管理方式，通过这种方式，可以使用 supervisorctl 命令来管理一组进程。跟 [program:x] 的进程组不同的是，这里的进程是一个个的 [program:x] 。 123[group:thegroupname]programs=progname1,progname2 ; each refers to &apos;x&apos; in [program:x] definitionspriority=999 ; the relative start priority (default 999) 当添加了上述配置后，progname1 和 progname2 的进程名就会变成 thegroupname:progname1 和 thegroupname:progname2 以后就要用这个名字来管理进程了，而不是之前的 progname1。 以后执行 supervisorctl stop thegroupname: 就能同时结束 progname1 和 progname2，执行 supervisorctl stop thegroupname:progname1 就能结束 progname1。如下所示 /etc/supervisord.d/hello.ini文件 12345678910111213141516[group:group1]programs=hello[program:hello]directory = /opt ; 程序的启动目录command = python /opt/hello.py ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true ; 在 supervisord 启动的时候也自动启动startsecs = 5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了autorestart = true ; 程序异常退出后自动重启startretries = 3 ; 启动失败自动重试次数，默认是 3user = xqzt ; 用哪个用户启动redirect_stderr = true ; 把 stderr 重定向到 stdout，默认 falsestdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）; stdout_logfile = /var/log/supervisor/hello.log 进程状态 12[root@centos7 etc]# supervisorctl group1:hello RUNNING pid 2842, uptime 0:02:53 11. Subprocesses进程状态变化 参考官方文档]]></content>
      <categories>
        <category>Linux</category>
        <category>Supervisor</category>
      </categories>
      <tags>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cd命令]]></title>
    <url>%2F2017%2F05%2F10%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fcd%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文主要记录cd命令的用法 1、作用cd（Change Directory 改变目录）命令用来切换工作目录至dirname。 其中dirName表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的home directory(也就是刚login时所在的目录)。另外，~也表示为home directory的意思，.则是表示目前所在的目录，..则表示目前目录位置的上一层目录。 2、用法1cd (选项) (参数) 3、选项123-p 如果要切换到的目标目录是一个符号连接，直接切换到符号连接指向的目标目录-L 如果要切换的目标目录是一个符号的连接，直接切换到字符连接名代表的目录，而非符号连接所指向的目标目录。 - 当仅实用&quot;-&quot;一个选项时，当前工作目录将被切换到环境变量&quot;OLDPWD&quot;所表示的目录。每当你更改目录时，shell都会将上一个目录位置记录在环境变量OLDPWD中 4、实例1、cd 进入用户主目录；123[root@cent6 init.d]# cd[root@cent6 ~]# pwd/root 2、cd ~ 进入用户主目录；1234[root@cent6 ~]# cd ~[root@cent6 ~]# pwd/root[root@cent6 ~]# 3、cd - 返回进入此目录之前所在的目录1234567[root@cent6 ~]# pwd/root[root@cent6 ~]# cd /home[root@cent6 home]# cd -/root[root@cent6 ~]# pwd/root 4、cd .. 返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）； 12345[root@cent6 init.d]# pwd/etc/init.d[root@cent6 init.d]# cd ..[root@cent6 etc]# pwd/etc 5、cd ../.. 返回上两级目录；12345[root@cent6 init.d]# pwd/etc/init.d[root@cent6 init.d]# cd ../..[root@cent6 /]# pwd/ 6、cd !$ 把上个命令的参数作为cd参数使用123456[root@cent6 /]# ls -ld /media/drwxr-xr-x. 2 root root 4096 Sep 23 2011 /media/[root@cent6 /]# cd !$cd /media/[root@cent6 media]# pwd/media]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>cd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pwd命令]]></title>
    <url>%2F2017%2F05%2F09%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fpwd%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文主要记录pwd命令的用法 1、命令简介pwd（print work directory 打印当前目录）命令以绝对路径的方式显示用户当前工作目录。 2、用法1pwd [-LP] 3、选项12-L --logical 当目录为连接路径时，显示连接路径-P --physical 显示实际物理路径，而非使用连接（link）路径 4、实例4.1 显示当前目录所在路径 pwd12[root@cent6 ~]# pwd/root 4.2 显示当前目录的物理路径 pwd –P123[root@cent6 ~]# cd /etc/init.d [root@cent6 init.d]# pwd -P/etc/rc.d/init.d 4.3 显示当前目录的连接路径：pwd -L123[root@cent6 init.d]# cd /etc/init.d [root@cent6 init.d]# pwd -L/etc/init.d]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>pwd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从已有的组复制搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F08%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E4%BB%8E%E5%B7%B2%E6%9C%89%E7%9A%84%E7%BB%84%E5%A4%8D%E5%88%B6%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何基于已有的MySQL Group Replication，创建一个 Innodb cluster。 1. 已有的MySQL Group Replication 环境信息 ip地址 主机名 server_id 172.17.84.71 mysql001 1 172.17.84.72 mysql002 2 172.17.84.73 mysql003 3 查看组复制当前状态 1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 80af8598-1520-11e7-a8b9-08002730b4d8 | mysql001 | 3306 | ONLINE || group_replication_applier | 8abf4eab-1521-11e7-9cc9-080027b95fc4 | mysql002 | 3306 | ONLINE || group_replication_applier | dcd3068d-15bc-11e7-b264-080027dad0d6 | mysql003 | 3306 | ONLINE | 2. Yum 安装MySQL Shellwget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm rpm -ivh mysql57-community-release-el7-10.noarch.rpm yum install mysql-shell -y 3. 创建cluster通过指定 adoptFromGR option，使用dba.createCluster() 12345678910mysqlsh --uri root@172.17.84.71:3306mysql-js&gt; var cluster = dba.createCluster(&apos;prodCluster&apos;, &#123;adoptFromGR: true&#125;);A new InnoDB cluster will be created on instance &apos;root@172.17.84.7:3306&apos;.Creating InnoDB cluster &apos;prodCluster&apos; on &apos;root@172.17.84.72:3306&apos;...Adding Seed Instance...Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.At least 3 instances are needed for the cluster to be able to withstand up toone server failure. 查看cluster状态 12345678910111213141516171819202122232425262728293031323334mysql-js&gt; var cluster=dba.getCluster()mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;prodCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;172.17.84.71:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;172.17.84.71:3306&quot;: &#123; &quot;address&quot;: &quot;172.17.84.71:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql002:3306&quot;: &#123; &quot;address&quot;: &quot;mysql002:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql003:3306&quot;: &#123; &quot;address&quot;: &quot;mysql003:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 4. 持久化配置文件对于已经在cluster中的实例，可以持久化cluster的配置 1dba.configureLocalInstance(root@localhost:3306) 查看配置文件的变化my.cnf 5.简单测试Failover关闭mysql001实例 1systemctl stop mysqld 重启mysql001实例 1systemctl start mysqld 查看cluster状态,发现Primary Master已经切换到mysql002 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;prodCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;172.17.84.72:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;172.17.84.72:3306&quot;: &#123; &quot;address&quot;: &quot;172.17.84.72:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql001:3306&quot;: &#123; &quot;address&quot;: &quot;mysql001:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql003:3306&quot;: &#123; &quot;address&quot;: &quot;mysql003:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6.createCluster语法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061mysql-js&gt; dba.help(createCluster());ReferenceError: createCluster is not definedmysql-js&gt; dba.help(&apos;createCluster&apos;);Creates a MySQL InnoDB cluster.SYNTAX &lt;Dba&gt;.createCluster(name[, options])WHERE name: The name of the cluster object to be created. options: Dictionary with options that modify the behavior of this function.DESCRIPTIONCreates a MySQL InnoDB cluster taking as seed instance the active globalsession.The options dictionary can contain the next values: - clusterAdminType: defines the type of management to be done on the cluster instances. - multiMaster: boolean value used to define an InnoDB cluster with multiple writable instances. - force: boolean, confirms that the multiMaster option must be applied. - adoptFromGR: boolean value used to create the InnoDB cluster based on existing replication group. - memberSslMode: SSL mode used to configure the members of the cluster. - ipWhitelist: The list of hosts allowed to connect to the instance for group replication.The values for clusterAdminType options include: local, manual, guided or ssh,however, at the moment only local is supported and is used as default value ifthis attribute is not specified.A InnoDB cluster may be setup in two ways: - Single Master: One member of the cluster allows write operations while the rest are in read only mode. - Multi Master: All the members in the cluster support both read and write operations.By default this function create a Single Master cluster, use the multiMasteroption set to true if a Multi Master cluster is required.The memberSslMode option supports these values: - REQUIRED: if used, SSL (encryption) will be enabled for the instances to communicate with other members of the cluster - DISABLED: if used, SSL (encryption) will be disabled - AUTO: if used, SSL (encryption) will be enabled if supported by the instance, otherwise disabledIf memberSslMode is not specified AUTO will be used by default.The ipWhitelist format is a comma separated list of IP addresses or subnet CIDRnotation, for example: 192.168.1.0/24,10.0.0.1. By default the value is set toAUTOMATIC, allowing addresses from the instance private network to beautomatically set for the whitelist. 参考 Creating an InnoDB Cluster From an Existing Group Replication Deployment https://ronniethedba.wordpress.com/2017/04/23/creating-an-innodb-cluster-router-from-an-existing-group-replication-deployment/]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
        <tag>Group Replication</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL Group Replication 部署中遇到的错误]]></title>
    <url>%2F2017%2F05%2F07%2FMySQL%2FGroup%20Replication%2FMySQL%20Group%20Replication%20%E9%83%A8%E7%BD%B2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[本文主要描述了MySQL Group Replication 部署中遇到的错误 错误一 未设置白名单导致的无法启动group_replication错误信息1234567891011121314151617181920212223242526272017-04-24T06:23:09.971308Z 3 [Note] Plugin group_replication reported: &apos;[GCS] Added automatically IP ranges 127.0.0.1/8 to the whitelist&apos;2017-04-24T06:23:09.971480Z 3 [Note] Plugin group_replication reported: &apos;[GCS] SSL was not enabled&apos;2017-04-24T06:23:09.971513Z 3 [Note] Plugin group_replication reported: &apos;Initialized group communication with configuration: group_replication_group_name: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;; group_replication_local_address: &quot;172.17.84.71:33061&quot;; group_replication_group_seeds: &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;; group_replication_bootstrap_group: true; group_replication_poll_spin_loops: 0; group_replication_compression_threshold: 1000000; group_replication_ip_whitelist: &quot;AUTOMATIC&quot;&apos;2017-04-24T06:23:09.972386Z 12 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_applier&apos; executed&apos;. Previous state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T06:23:09.982442Z 15 [Note] Slave SQL thread for channel &apos;group_replication_applier&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql001-relay-bin-group_replication_applier.000001&apos; position: 42017-04-24T06:23:09.982441Z 3 [Note] Plugin group_replication reported: &apos;Group Replication applier module successfully initialized!&apos;2017-04-24T06:23:09.982618Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is set to 7&apos;2017-04-24T06:23:09.982637Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is set to 1&apos;2017-04-24T06:23:09.982841Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_init&apos;2017-04-24T06:23:09.982957Z 0 [Note] Plugin group_replication reported: &apos;Successfully bound to 0.0.0.0:33061 (socket=80).&apos;2017-04-24T06:23:09.983104Z 0 [Note] Plugin group_replication reported: &apos;Successfully set listen backlog to 32 (socket=80)!&apos;2017-04-24T06:23:09.983149Z 0 [Note] Plugin group_replication reported: &apos;Successfully unblocked socket (socket=80)!&apos;2017-04-24T06:23:09.983232Z 0 [Note] Plugin group_replication reported: &apos;Ready to accept incoming connections on 0.0.0.0:33061 (socket=80)!&apos;2017-04-24T06:23:09.983302Z 0 [Note] Plugin group_replication reported: &apos;connecting to 172.17.84.71 33061&apos;2017-04-24T06:23:09.983432Z 0 [Note] Plugin group_replication reported: &apos;client connected to 172.17.84.71 33061 fd 83&apos;2017-04-24T06:23:09.983524Z 0 [Warning] Plugin group_replication reported: &apos;[GCS] Connection attempt from IP address 172.17.84.71 refused. Address is not in the IP whitelist.&apos;2017-04-24T06:23:09.983620Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] Error connecting to the local group communication engine instance.&apos;2017-04-24T06:23:09.983647Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_exit&apos;2017-04-24T06:23:09.983926Z 0 [Note] Plugin group_replication reported: &apos;Exiting xcom thread&apos;2017-04-24T06:23:11.014814Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] The member was unable to join the group. Local port: 33061&apos;2017-04-24T06:24:09.991677Z 3 [ERROR] Plugin group_replication reported: &apos;Timeout on wait for view after joining group&apos;2017-04-24T06:24:09.991847Z 3 [Note] Plugin group_replication reported: &apos;Requesting to leave the group despite of not being a member&apos;2017-04-24T06:24:09.991903Z 3 [ERROR] Plugin group_replication reported: &apos;[GCS] The member is leaving a group without being on one.&apos;2017-04-24T06:24:09.992323Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is reset to 1&apos;2017-04-24T06:24:09.992354Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is reset to 1&apos;2017-04-24T06:24:09.992922Z 15 [Note] Error reading relay log event for channel &apos;group_replication_applier&apos;: slave SQL thread was killed2017-04-24T06:24:09.993527Z 12 [Note] Plugin group_replication reported: &apos;The group replication applier thread was killed&apos; 解决办法基于网段或者IP 指定白名单，可以在线动态修改 12set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;set global group_replication_ip_whitelist = &apos;172.17.84.71/24&apos;; 或者添加到my.cnf中 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 错误二 无法解析主机名导致member状态一直未recoving错误信息通过SELECT * FROM performance_schema.replication_group_members;查询，发现MEMBER_STATE一直是recoving 1234567891011121314151617181920212017-04-24T07:01:19.864784Z 0 [Note] Plugin group_replication reported: &apos;Starting group replication recovery with view_id 14930159987057432:2&apos;2017-04-24T07:01:19.865335Z 19 [Note] Plugin group_replication reported: &apos;Establishing group recovery connection with a possible donor. Attempt 1/10&apos;2017-04-24T07:01:19.871742Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:01:19.881203Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 60b61f19-289f-11e7-b97d-08002730b4d8 at mysql001 port: 3306.&apos;2017-04-24T07:01:19.881586Z 21 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:01:19.882339Z 22 [Note] Slave SQL thread for channel &apos;group_replication_recovery&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql002-relay-bin-group_replication_recovery.000001&apos; position: 42017-04-24T07:01:19.883547Z 21 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql001:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:01:19.883573Z 21 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:01:19.883582Z 21 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T07:01:19.883861Z 19 [ERROR] Plugin group_replication reported: &apos;There was an error when connecting to the donor server. Check group replication recovery&apos;s connection credentials.&apos;2017-04-24T07:01:19.884138Z 19 [Note] Plugin group_replication reported: &apos;Retrying group recovery connection with another donor. Attempt 2/10&apos;2017-04-24T07:01:55.338092Z 0 [Note] Plugin group_replication reported: &apos;getstart group_id 4317e324&apos;2017-04-24T07:01:57.362663Z 0 [Note] Plugin group_replication reported: &apos;Marking group replication view change with view_id 14930159987057432:3&apos;2017-04-24T07:01:57.422909Z 0 [Note] Plugin group_replication reported: &apos;The member with address mysql003:3306 was declared online within the replication group&apos;2017-04-24T07:02:19.884808Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql003&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:02:19.890519Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 164b8061-28ba-11e7-9a51-080027dad0d6 at mysql003 port: 3306.&apos;2017-04-24T07:02:19.891514Z 26 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:02:19.893156Z 26 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql003:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:02:19.893186Z 26 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:02:19.893194Z 26 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T0 解决办法方法一 配置hosts 123172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 方法二 或者在配置文件my.cnf使用report_host=ip，显示指定使用IP，而非默认的主机名 错误三：mysql初始化，修改root密码，没有禁用日志，导致各节点Executed_Gtid_Set不同错误信息修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错: 12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 解决办法方法一： 1234567891011121314151617181920mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec) 方法二1set global group_replication_allow_local_disjoint_gtids_join=ON; 方法三 如果是全新的实例，可以通过reset master清空Executed_Gtid_Set 123456789mysql&gt;reset mastermysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000010 Position: 1486 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-101 row in set (0.00 sec)]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Deploying Group Replication in Single-Primary Mode]]></title>
    <url>%2F2017%2F05%2F06%2FMySQL%2FGroup%20Replication%2FDeploying%20Group%20Replication%20in%20Single-Primary%20Mode%2F</url>
    <content type="text"><![CDATA[本文描述了3实例MySQL Group Replication的搭建过程 一、环境信息 ip地址 主机名 server_id 172.17.84.71 mysql001 1 172.17.84.72 mysql002 2 172.17.84.73 mysql003 3 二、搭建前准备 关闭selinux(略) 开启端口3306 33061 12345678910111213##Addfirewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=33061/tcp##Reloadfirewall-cmd --reload ## 检查是否生效firewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --query-port=33061/tcp ## 列出所有的开放端口firewall-cmd --list-all 配置/etc/hosts ip和主机名对应关系 1234[root@mysql003 ~]# cat /etc/hosts172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 三、初始化三个数据库实例3.1 初始化3个mysql实例mysql001配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@mysql001 ~]# cat /usr/local/mysql/etc/my.cnf[client]port = 3306socket = /usr/local/mysql/run/mysql.sock[mysqld]port = 3306socket = /usr/local/mysql/run/mysql.sockpid_file = /usr/local/mysql/run/mysql.piddatadir = /usr/local/mysql/datadefault_storage_engine = InnoDBmax_allowed_packet = 512Mmax_connections = 2048open_files_limit = 65535lower_case_table_names=1character-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=&apos;SET NAMES utf8mb4&apos;innodb_buffer_pool_size = 1024Minnodb_log_file_size = 2048Minnodb_file_per_table = 1innodb_flush_log_at_trx_commit = 0key_buffer_size = 64Mlog-error = /usr/local/mysql/log/mysql_error.loglog-bin = /usr/local/mysql/binlogs/mysql-binslow_query_log = 1slow_query_log_file = /usr/local/mysql/log/mysql_slow_query.loglong_query_time = 5tmp_table_size = 32Mmax_heap_table_size = 32Mquery_cache_type = 0query_cache_size = 0server-id=1gtid_mode = ONenforce_gtid_consistency = ONbinlog_checksum=NONElog_slave_updates = ONmaster_info_repository = TABLErelay_log_info_repository = TABLEtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;loose-group_replication_start_on_boot=offloose-group_replication_local_address= &quot;172.17.84.71:33061&quot;loose-group_replication_group_seeds= &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;loose-group_replication_bootstrap_group= offloose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 参数说明见Group Replication System Variables 初始化实例 并启动 12mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/datasystemctl start mysqld 到错误日志文件中找到临时密码进行登录，登录后修改临时密码12[root@mysql001 /]# grep &apos;temporary password&apos; /usr/local/mysql/log/mysql_error.log2017-04-24T03:37:44.558511Z 1 [Note] A temporary password is generated for root@localhost: 3yFK,#qtjAl; 修改root密码1234567891011121314151617181920212223mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec)ERROR:No query specified 修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错。全新的环境可以通过reset master解决这个问题。12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 四、配置MGR4.1 创建复制账号1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@&apos;%&apos;;Query OK, 0 rows affected (0.01 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 4.2 使用change master命令配置server在下次需要从其他成员恢复其状态时，使用group_replication_recovery复制通道的给定凭据12mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;;Query OK, 0 rows affected, 2 warnings (0.02 sec) 4.3 安装复制组插件12mysql&gt; install plugin group_replication soname &apos;group_replication.so&apos;;Query OK, 0 rows affected (0.26 sec) 4.4 查看插件是否安装成功1234567891011mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+| binlog | ACTIVE | STORAGE ENGINE | NULL | GPL || mysql_native_password | ACTIVE | AUTHENTICATION | NULL | GPL |...| group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+ 4.5、配置引导组，并启动GROUP_REPLICATION此引导应仅有单个server独立完成，该server启动组并且只启动一次123456#### 设置group_replication_bootstrap_group 只需要在mysql001上执行一次，另外两个实例不执行这句mysql&gt; SET GLOBAL group_replication_bootstrap_group=ON; Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;ERROR 3092 (HY000): The server is not configured properly to be an active member of the group. Please see more details on error log. 查看log，发现是白名单问题导致的，my.cnf添加白名单后重新启动组复制12345678mysql&gt; set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec)mysql&gt; SET GLOBAL group_replication_bootstrap_group=OFF;Query OK, 0 rows affected (0.00 sec) 直接添加白名单到my.cnf,防止下次启动再重新问题 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 4.6 查看状态12345678910111213141516mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 60b61f19-289f-11e7-b97d-08002730b4d8 | mysql001 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+1 row in set (0.01 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000003 Position: 434 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:11 row in set (0.00 sec) 4.7 向组中添加实例mysql002 mysql003mysql002 mysql003的操作和mysql001相同，除了不需要SET GLOBAL group_replication_bootstrap_group=ON; 12mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec) 查看最终状态123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 80af8598-1520-11e7-a8b9-08002730b4d8 | mysql001 | 3306 | ONLINE || group_replication_applier | 8abf4eab-1521-11e7-9cc9-080027b95fc4 | mysql002 | 3306 | ONLINE || group_replication_applier | dcd3068d-15bc-11e7-b264-080027dad0d6 | mysql003 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec) 4.8 修改 group_replication_start_on_boot=on1loose-group_replication_start_on_boot=on 参考 Deploying Group Replication in Single-Primary Mode http://www.niugebbs.com/HRT152/1244148.html http://blog.csdn.net/dbaxiaosa/article/details/70226540 MySQL Group Replication多机多实例安装配置 MySQL Group Replication 9节点快速部署]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[多节点3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F05%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%20%E5%A4%9A%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 ip地址 主机名 server_id 192.168.0.101 mysql001 1 192.168.0.102 mysql002 2 192.168.0.103 mysql003 3 192.168.0.104 mysql-router 主要步骤如图所示 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0;此步骤主要是避免Executed_Gtid_Set不一致 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password('admin_123');Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 一句话执行 1mysql -uroot -padmin_123 -e "SET SQL_LOG_BIN=0;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION; flush privileges; SET SQL_LOG_BIN=1" 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.checkInstanceConfiguration('root@localhost:3306')mysql-js&gt; dba.configureLocalInstance('root@localhost:3306') 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3306/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 1shell&gt; systemctl restart mysqld 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. 创建 InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3306: 123mysql-js&gt; \connect root@192.168.0.101:3306或者mysql-js&gt; shell.connect(&apos;root@192.168.0.101:3306&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5.添加 Instances 至 InnoDB Cluster配置/etc/hosts 123192.168.0.101 mysql001192.168.0.102 mysql002192.168.0.103 mysql003 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.101:3306mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.102:3306&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3306&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.101:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3306’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@192.168.0.103:3306 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.101:3306,mysql://192.168.0.102:3306,mysql://192.168.0.103:3306user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 192.168.0.101:3306 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现192.168.0.102:3306已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqldmysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.101:3306&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment MySQL InnoDB Cluster – Real-World Cluster Tutorial for OEL, Fedora, RHEL and CentOS]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单机3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F04%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E5%8D%95%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0; 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;admin_123&apos; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;) 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3301/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 123shell&gt; systemctl restart mysqld@3301shell&gt; systemctl restart mysqld@3302shell&gt; systemctl restart mysqld@3303 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3301: 123mysql-js&gt; \connect root@192.168.0.103:3301或者mysql-js&gt; shell.connect(&apos;root@192.168.0.103:3301&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.103:3301mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3302&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3303&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3301&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3301’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)mysql-js&gt; \connect root@localhost:3302mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3302&apos;)mysql-js&gt; \connect root@localhost:3303mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3303&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3301 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.103:3301,mysql://192.168.0.103:3302,mysql://192.168.0.103:3303user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3301 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 3301 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3302 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3302实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqld@3301mysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.103:3301&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沙盒实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F03%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F3%E6%B2%99%E7%9B%92%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过三个沙盒msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more sandbox MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 2. 创建三个沙盒实例Start MySQL Shell 1shell&gt; mysqlsh MySQL Shell provides two scripting languages: JavaScript and Python. Throughout this guide MySQL Shell is used primarily in JavaScript mode . When MySQL Shell starts it is in JavaScript mode by default. You switch into JavaScript mode, Python mode and SQL mode using the commands \js, \py, and \sql. Ensure you are in JavaScript mode by issuing the \js command, then execute: 123mysql-js&gt; dba.deploySandboxInstance(3310)mysql-js&gt; dba.deploySandboxInstance(3320)mysql-js&gt; dba.deploySandboxInstance(3330) 3. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3310: 123mysql-js&gt; \connect root@localhost:3310或者mysql-js&gt; shell.connect(&apos;root@localhost:3310&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 4. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 1mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3320&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3330&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3310&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 5. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3310 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:testCluster]router_id=3bootstrap_server_addresses=mysql://localhost:3310,mysql://localhost:3320,mysql://localhost:3330user=mysql_router3_c3j5z9t7rjgkmetadata_cluster=testClusterttl=300[routing:testCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:testCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:testCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:testCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3310 |+--------+1 row in set (0.00 sec) 6. Testing Failoverkilling the PRIMARY instance 3310 1mysql-js&gt; dba.killSandboxInstance(3310) 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3330 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3320实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123mysql-js&gt; dba.startSandboxInstance(3310)mysql-js&gt; cluster.rejoinInstance(&apos;root@localhost:3310&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Getting Started with InnoDB Cluster]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[InnoDB Cluster简介]]></title>
    <url>%2F2017%2F05%2F02%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、InnoDB Cluster简介前几天 Mysql 团队愉快的发布了 InnoDB Cluster 的 GA（General Availability 正式发布） 版本 InnoDB Cluster 是 Mysql 的一套完整的高可用解决方案 MySQL InnoDB cluster is a collection of products that work together to provide a complete High Availability solution for MySQL. InnoDB Cluster 由下面3个核心组件构成： MySQL Shell 通过内置的 AdminAPI 来创建和管理整个 InnoDB Clusters Includes the AdminAPI, which enables you to script the creation and administration of an InnoDB cluster, using either JavaScript or Python. MySQL Router 缓存 InnoDB cluster 的元数据，负责把 client 的 read/write 请求路由到当前的主数据库节点，还可以对 client 的请求进行负载均衡，并且在主数据库节点出现故障时，保证 client 的请求被路由到新的主服务器节点 Caches the metadata of the InnoDB cluster and routes read/write client requests to the current primary. If the primary instance becomes unavailable, MySQL Router automatically routes client requests to a promoted secondary (the new primary). Group Replication MySQL Server 5.7.17 or higher. 可以把数据同步到集群内的所有成员中，并支持 容错 、 自动故障转移 、 灵活扩展 等重要特性 This provides the MySQL Group Replication mechanism to allow data to be replicated within the cluster, with built-in failover. Group Replication ​]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[今天是五一劳动节，我的新Blog诞生了。希望在新的一年里，能在此认认真真的记录自己的成长！ 目标：每天一篇学习笔记]]></content>
  </entry>
</search>