<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[rmdir命令]]></title>
    <url>%2F2017%2F05%2F20%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Frmdir%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1、命令简介rmdir (Remove Directory删除目录): 用来删除空目录，删除某目录时也必须具有对父目录的写权限。 2、用法1用法：rmdir [选项]... 目录... 3、选项123--ignore-fail-on-non-empty 忽略仅由目录非空产生的所有错误-p, –parents 删除指定目录及其上级文件夹，例如&quot;rmdir -p a/b/c&apos;&quot; 与&quot;rmdir a/b/c a/b a&apos;&quot; 基本相同-v, –verbose 输出处理的目录详情 4、实例实例1：删除一个空目录1[root@oracledb study]# rmdir dir1 实例2：删除空目录显示信息12[root@oracledb study]# rmdir -v dir3rmdir: 正在删除目录 "dir3" 实例3：删除一个非空目录123[root@oracledb study]# rmdir -v dir2rmdir: 正在删除目录 "dir2"rmdir: 删除 "dir2" 失败: 目录非空 实例4：若父目录为空，则递归删除父目录1234[root@oracledb study]# rmdir -pv dir1/sub1/sub2rmdir: 正在删除目录 "dir1/sub1/sub2"rmdir: 正在删除目录 "dir1/sub1"rmdir: 正在删除目录 "dir1"]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>rmdir</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mkdir命令]]></title>
    <url>%2F2017%2F05%2F19%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fmkdir%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1、命令简介mkdir (Make Directory 创建目录): 若指定目录不存在则创建目录。在创建目录时，要求创建目录的用户具有写权限，并应保证新建的目录没有重名。 2、用法1用法：mkdir [选项]... 目录... 3、选项1234-m, --mode=模式 设置权限模式(类似chmod)，而不是rwxrwxrwx 减umask-p, --parents 需要时创建目标目录的上层目录，但即使这些目录已存在也不当作错误处理-v, --verbose 每次创建新目录都显示信息-Z, --context=CTX 将每个创建的目录的SELinux 安全环境设置为CTX 4、实例实例1：创建一个空目录123[root@oracledb study]# mkdir dir1[root@oracledb study]# lsdir1 实例2：一次创建多个目录123[root@oracledb study]# mkdir dir1 dir2 dir3[root@oracledb study]# lsdir1 dir2 dir3 实例3：递归创建多个目录12345678[root@oracledb study]# mkdir -p dir1/sub1/sub2[root@oracledb study]# tree.└── dir1 └── sub1 └── sub23 directories, 0 files 实例4：创建权限为755的目录123[root@oracledb study]# mkdir -m 755 dir1[root@oracledb study]# lsdrwxr-xr-x 2 root root 4096 4月 16 15:03 dir1 实例5：创建新目录都显示信息12[root@oracledb study]# mkdir -v dir3mkdir: 已创建目录 "dir3" 实例6：一个命令创建项目的目录结构123456789101112131415161718192021[root@oracledb study]# mkdir -vp tomcat/&#123;bin,lib,conf,logs,webapps/&#123;examples,docs&#125;,work&#125;mkdir: 已创建目录 "tomcat"mkdir: 已创建目录 "tomcat/bin"mkdir: 已创建目录 "tomcat/lib"mkdir: 已创建目录 "tomcat/conf"mkdir: 已创建目录 "tomcat/logs"mkdir: 已创建目录 "tomcat/webapps"mkdir: 已创建目录 "tomcat/webapps/examples"mkdir: 已创建目录 "tomcat/webapps/docs"mkdir: 已创建目录 "tomcat/work"[root@oracledb study]# tree.└── tomcat ├── bin ├── conf ├── lib ├── logs ├── webapps │ ├── docs │ └── examples └── work]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个Linux命令</tag>
        <tag>mkdir</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Playbook 角色(Roles) 和 Include 语句]]></title>
    <url>%2F2017%2F05%2F18%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FPlaybook%20%E8%A7%92%E8%89%B2(Roles)%20%E5%92%8C%20Include%20%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[简介当我们刚开始学习运用 playbook 时，可能会把 playbook 写成一个很大的文件，到后来可能你会希望这些文件是可以方便去重用的，所以需要重新去组织这些文件。 Include 语句基本上，使用 include 语句引用 task 文件的方法，可允许你将一个配置策略分解到更小的文件中。使用 include 语句引用 tasks 是将 tasks 从其他文件拉取过来。因为 handlers 也是 tasks，所以你也可以使用 include 语句去引用 handlers 文件。 Playbook 同样可以使用 include 引用其他 playbook 文件中的 play。这时被引用的 play 会被插入到当前的 playbook 中，当前的 playbook 中就有了一个更长的的 play 列表。Include 指令看起来像下面这样，在一个 playbook 中，Include 指令可以跟普通的 task 混合在一起使用: 123tasks: - include: tasks/foo.yml 你也可以给 include 传递变量。我们称之为 ‘参数化的 include’。 12tasks: - include: wordpress.yml wp_user=timmy Playbook 角色(Roles)那怎样组织 playbook 才是最好的方式呢？简单的回答就是：使用 roles ! Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象。这种方式可使你将注意力更多地放在大局上，只有在需要时才去深入了解细节。Roles 基于一个已知的文件结构，去自动的加载某些 vars_files，tasks 以及 handlers。基于 roles 对内容进行分组，使得我们可以容易地与其他用户分享 roles 。 这个 playbook 为一个角色 ‘x’ 指定了如下的行为： 如果 roles/x/tasks/main.yml 存在, 其中列出的 tasks 将被添加到 play 中 如果 roles/x/handlers/main.yml 存在, 其中列出的 handlers 将被添加到 play 中 如果 roles/x/vars/main.yml 存在, 其中列出的 variables 将被添加到 play 中 如果 roles/x/meta/main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中 (1.3 and later) 所有 copy tasks 可以引用 roles/x/files/ 中的文件，不需要指明文件的路径。 所有 script tasks 可以引用 roles/x/files/ 中的脚本，不需要指明文件的路径。 所有 template tasks 可以引用 roles/x/templates/ 中的文件，不需要指明文件的路径。 所有 include tasks 可以引用 roles/x/tasks/ 中的文件，不需要指明文件的路径。 角色依赖(Role Dependencies)“角色依赖” 使你可以自动地将其他 roles 拉取到现在使用的 role 中。”角色依赖” 保存在 roles 目录下的 meta/main.yml 文件中。这个文件应包含一列 roles 和 为之指定的参数，]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible Playbook]]></title>
    <url>%2F2017%2F05%2F17%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAnsilbe%20Playbook%2F</url>
    <content type="text"><![CDATA[Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合. Playbooks 的格式是YAML 语法做到最小化,意在避免 playbooks 成为一种编程语言或是脚本 playbook 由一个或多个 ‘plays’ 组成.它的内容是一个以 ‘plays’ 为元素的列表.play 的内容,被称为 tasks,即任务.在基本层次的应用中,一个任务是一个对 ansible 模块的调用。playbook命令根据自上而下的顺序依次执行。‘plays’ 好似音符,playbook 好似由 ‘plays’ 构成的曲谱,通过 playbook,可以编排步骤进行多机器的部署,比如在 webservers 组的所有机器上运行一定的步骤, 然后在 database server 组运行一些步骤,最后回到 webservers 组,再运行一些步骤,诸如此类.使得你可以实现一些复杂的部署机制,这是ansible命令无法实现的。 playbook通过ansible-playbook命令使用,它的参数和ansible命令类似,ansible-playbook的简单使用方法: 1ansible-playbook example-play.yml 一、一个简单的示例下面是一个简单的ansible-playbook示例，可以了解其构成: 123456789101112131415161718---- hosts: webservers vars: http_port: 80 max_clients: 200 remote_user: root tasks: - name: ensure apache is at the latest version yum: pkg=httpd state=latest - name: write the apache config file template: src=/srv/httpd.j2 dest=/etc/httpd.conf notify: - restart apache - name: ensure apache is running service: name=httpd state=started handlers: - name: restart apache service: name=httpd state=restarted 二、playbook的构成playbook 由一个或多个 ‘plays’ 组成.它的内容是一个以 ‘plays’ 为元素的列表.play 的内容,被称为 tasks,即任务.在基本层次的应用中,一个任务是一个对 ansible 模块的调用。将多个play组织在一个playbook中即可以让它们联同起来按事先编排的机制同唱一台大戏。其主要有以下四部分构成: 12345playbooks组成： Target section： 定义将要执行 playbook 的远程主机组 Variable section： 定义 playbook 运行时需要使用的变量 Task section： 定义将要在远程主机上执行的任务列表 Handler section： 定义 task 执行完成以后需要调用的任务 而其对应的目录层为五个，如下： 123456一般所需的目录层有：(视情况可变化) vars 变量层 tasks 任务层 handlers 触发条件 files 文件 template 模板 1、Hosts和Usersplaybook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。 hosts：用于指定要执行指定任务的主机其可以是一个或多个由冒号分隔主机组。 remote_user ：用于指定远程主机上的执行任务的用户。不过remote_user也可用于各task中。也可以通过指定其通过sudo的方式在远程主机上执行任务其可用于play全局或某任务。此外甚至可以在sudo时使用sudo_user指定sudo时切换的用户。 user：于remote_user相同 sudo：如果设置为yes，执行该任务组的用户在执行任务的时候，获取root权限 sudo_user：如果设置user为breeze，sudo为yes，sudo_user为bernie时，则breeze用户在执行任务时会获得bernie用户的权限 gather_facts：除非明确说明不需要在远程主机上执行setup模块，否则默认自动执行。如果确实不需要setup模块传递过来的变量，则可以将该选项设置为False 2、任务列表和actionplay的主体部分是任务列表。任务列表中的各任务按次序逐个在hosts中指定的所有主机上执行即在所有主机上完成第一个任务后再开始第二个。在自上而下运行某playbook时如果中途发生错误，所有已执行任务都将回滚因此在更正playbook后重新执行一次即可。 ​ task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致。module 具有”幂等”性,所以当远端系统被人改动时,可以重放 playbooks 达到恢复的目的. playbooks 本身可以识别这种改动,并且有一个基本的 event system（事件系统）,可以响应这种改动. 每个task都应该有其name用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name则action的结果将用于输出。 123tasks: - name: make sure apache is running service: name=httpd state=running 如果命令或脚本的退出码不为零可以使用如下方式替代 123tasks: - name: run this command and ignore the result shell: /usr/bin/somecommand || /bin/true 使用ignore_errors来忽略错误信息 1234tasks: - name: run this command and ignore the result shell: /usr/bin/somecommand ignore_errors: True 3、handlers： 在发生改变时执行的操作“notify”这个action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，取而代之仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler也即notify中调用handler中定义的操作。 注意：在notify中定义内容一定要和tasks中定义的 - name 内容一样，这样才能达到触发的效果，否则会不生效。 12345- name: template configuration file template: src=template.j2 dest=/etc/foo.conf notify: - restart memcached - restart apache 123456#handler是task列表这些task与前述的task并没有本质上的不同。handlers: - name: restart memcached service: name=memcached state=restarted - name: restart apache service: name=apache state=restarted 4、tagstags用于让用户选择运行或略过playbook中的部分代码。ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时如果确信其没有变化就可以通过tags跳过这些代码片断。 三、列出影响的主机在执行一个 playbook 之前,想看看这个 playbook 的执行会影响到哪些 hosts,你可以这样做: 1ansible-playbook playbook.yml --list-hosts 执行一个 playbook如何运行一个 playbook 呢？这很简单,这里的示例是并行的运行 playbook,并行的级别 是10 1ansible-playbook playbook.yml -f 10]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ad-hoc命令]]></title>
    <url>%2F2017%2F05%2F16%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAd-hoc%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[本文主要介绍了ansible的Ad-hoc命令。 Ansible提供两种方式去完成任务,一是 ad-hoc 命令,一是写 Ansible playbook.前者可以解决一些简单的任务, 后者解决较复杂的任务. ad-hoc 是相对于写 Ansible playbook 来说的.类似于在命令行敲入shell命令和 写shell scripts两者之间的关系。 Ad-Hoc 是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。那我们会在什么情境下去使用ad-hoc 命令呢?比如说因为圣诞节要来了,想要把所有实验室的电源关闭,我们只需要执行一行命令 就可以达成这个任务,而不需要写 playbook 来做这个任务.至于说做配置管理或部署这种事,还是要借助 playbook 来完成,即使用 ‘/usr/bin/ansible-playbook’ 这个命令. Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。 一、Ad-hoc命令1.1、命令格式说明一个ad-hoc命令的执行，需要按以下格式进行执行： 1ansible 主机或组 -m 模块名 -a &apos;模块参数&apos; ansible参数 主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机； 模块名，可以通过ansible-doc -l 查看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的module_name = command 部分，默认模块可以在该配置文件中进行修改； 模块参数，可以通过 “ansible-doc -s 模块名” 查看具体的用法及后面的参数； ansible参数，可以通过ansible命令的帮助信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。 123456ansible all -m pingansible all -m command -a &apos;uptime&apos;ansible all -m yum -a &apos;name=nginx state=latest&apos;ansible all -m service -a &quot;name=nginx state=started enabled=yes“ansible all -m shell -a &apos;systemctl status nginx&apos;ansible all -m shell -a &apos;systemctl list-unit-files|grep nginx&apos; 1.2、后台执行当命令执行时间比较长时，也可以放到后台执行，使用-B、-P参数，如下： 123ansible all -B 3600 -a &quot;/usr/bin/long_running_operation --do-stuff&quot; #后台执行命令3600s，-B 表示后台执行的时间, 命令会返回一个jidansible all -m async_status -a &quot;jid=123456789&quot; #检查任务的状态ansible all -B 1800 -P 60 -a &quot;/usr/bin/long_running_operation --do-stuff&quot; #后台执行命令最大时间是1800s即30分钟，-P 每60s检查下状态，默认15s 1.3、查看所有模块12[root@ansible ~]# ansible-doc -l |wc -l773 二、使用ansible-doc 查看模块使用方法可以使用ansible-doc -s module来查看某个模块的参数，也可以使用ansible-doc help module来查看该模块更详细的信息。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@ansible ansible]# ansible-doc command&gt; COMMAND The [command] module takes the command name followed by a list of space-delimited arguments. The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like `$HOME&apos; and operations like `&quot;&lt;&quot;&apos;, `&quot;&gt;&quot;&apos;, `&quot;|&quot;&apos;, `&quot;;&quot;&apos; and `&quot;&amp;&quot;&apos; will not work (use the [shell] module if you need these features).Options (= is mandatory):- chdir cd into this directory before running the command [Default: None]- creates a filename or (since 2.0) glob pattern, when it already exists, this step will *not* be run. [Default: None]- executable change the shell used to execute the command. Should be an absolute path to the executable. [Default: None]= free_form the command module takes a free form command to run. There is no parameter actually named &apos;free form&apos;. See the examples! [Default: None]- removes a filename or (since 2.0) glob pattern, when it does not exist, this step will *not* be run. [Default: None]- warn if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false. [Default: True]Notes: * If you want to run a command through the shell (say you are using `&lt;&apos;, `&gt;&apos;, `|&apos;, etc), you actually want the [shell] module instead. The [command] module is much more secure as it&apos;s not affected by the user&apos;s environment. * `creates&apos;, `removes&apos;, and `chdir&apos; can be specified after the command. For instance, if you only want to run a command if a certain file does not exist, use this.EXAMPLES:# Example from Ansible Playbooks.- command: /sbin/shutdown -t now# Run the command if the specified file does not exist.- command: /usr/bin/make_database.sh arg1 arg2 creates=/path/to/database# You can also use the &apos;args&apos; form to provide the options. This command# will change the working directory to somedir/ and will only run when# /path/to/database doesn&apos;t exist.- command: /usr/bin/make_database.sh arg1 arg2 args: chdir: somedir/ creates: /path/to/database 三、命令执行模块命令执行模块包含如下 四个模块： command模块：该模块通过-a跟上要执行的命令可以直接执行 shell 模块：用法基本和command一样，不过其是通过/bin/sh进行执行，所以shell 模块可以执行任何命令，就像在本机执行一样； raw模块：用法和shell 模块一样 ，其也可以执行任意命令，就像在本机执行一样； script模块：其是将管理端的shell 在被管理主机上执行，其原理是先将shell 复制到远程主机，再在远程主机上执行，原理类似于raw模块。 注：raw模块和comand、shell 模块不同的是其没有chdir、creates、removes参数，chdir参数的作用就是先切到chdir指定的目录后，再执行后面的命令，这在后面很多模块里都会有该参数 。]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible参数配置文件ansible.cfg]]></title>
    <url>%2F2017%2F05%2F15%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAnsible%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6ansible.cfg%2F</url>
    <content type="text"><![CDATA[Ansible默认安装好后有一个配置文件/etc/ansible/ansible.cfg，该配置文件中定义了ansible的主机的默认配置部分，如默认是否需要输入密码、是否开启sudo认证、action_plugins插件的位置、hosts主机组的位置、是否开启log功能、默认端口、key文件位置等等。 Ansible的一些的设置可以通过配置文件完成.在大多数场景下默认的配置就能满足大多数用户的需求,在一些特殊场景下,用户还是需要自行修改这些配置文件。 用户可以修改一下配置文件来修改设置,他们的被读取的顺序如下: 1234* ANSIBLE_CONFIG (一个环境变量)* ansible.cfg (位于当前目录中)* .ansible.cfg (位于家目录中)* /etc/ansible/ansible.cfg Ansible 将会按以上顺序逐个查询这些文件,直到找到一个为止,并且使用第一个寻找到个配置文件的配置,这些配置将不会被叠加. ask_pass 这个可以控制,Ansible 剧本playbook 是否会自动默认弹出弹出密码.默认为no:: ask_pass=True 如果使用SSH 密钥匙做身份认证.可能需要修改这一参数 ask_sudo_pass类似 ask_pass,用来控制Ansible playbook 在执行sudo之前是否询问sudo密码.默认为no: 1ask_sudo_pass=True 如果用户使用的系统平台开启了sudo 密码的话,应该开绿这一参数 forks这个选项设置在与主机通信时的默认并行进程数.从Ansible 1.3开始,fork数量默认自动设置为主机数量或者潜在的主机数量, 这将直接控制有多少网络资源活着cpu可以被使用.很多用户把这个设置为50,有些设置为500或者更多.如果你有很多的主机, 高数值将会使得跨主机行为变快.默认值比较保守: 1_forks=5 gathering1.6版本中的新特性,这个设置控制默认facts收集（远程系统变量）. 默认值为’implicit’, 每一次play,facts都会被手机,除非设置’gather_facts: False’. 选项‘explicit’正好相反,facts不会被收集,直到play中需要. ‘smart’选项意思是,没有facts的新hosts将不会被扫描, 但是如果同样一个主机,在不同的plays里面被记录地址,在playbook运行中将不会通信.这个选项当有需求节省fact收集时比较有用. inventory这个事默认库文件位置,脚本,或者存放可通信主机的目录: 1inventory = /etc/ansible/hosts log_path如果出现在ansible.cfg文件中.Ansible 将会在选定的位置登陆执行信息.请留意用户运行的Ansible对于logfile有权限: 1log_path=/var/log/ansible.log 这个特性不是默认开启的.如果不设置,ansible将会吧模块加载纪录在系统日志系统中.不包含用密码. 对于需要了解更多日志系统的企业及用户,你也许对:doc:tower 感兴趣. module_name这个是/usr/bin/ansible的默认模块名（-m）. 默认是’command’模块. 之前提到过,command模块不支持shell变量,管道,配额. 所以也许你希望把这个参数改为’shell’: 1module_name = command poll_interval对于Ansible中的异步任务(详见 异步操作和轮询）, 这个是设置定义,当具体的poll interval 没有定义时,多少时间回查一下这些任务的状态, 默认值是一个折中选择15秒钟.这个时间是个回查频率和任务完成叫回频率和当任务完成时的回转频率的这种: 1poll_interval=15 private_key_file如果你是用pem密钥文件而不是SSH 客户端或秘密啊认证的话,你可以设置这里的默认值,来避免每一次提醒设置密钥文件位置–ansible-private-keyfile: 1private_key_file=/path/to/file.pem remote_port这个设置是你系统默认的远程SSH端口,如果不指定,默认为22号端口: 1remote_port = 22 remote_tmpAnsible 通过远程传输模块到远程主机,然后远程执行,执行后在清理现场.在有些场景下,你也许想使用默认路径希望像更换补丁一样使用, 这时候你可以使用这个选项.: 1remote_tmp = $HOME/.ansible/tmp 默认路径是在用户家目录下属的目录.Ansible 会在这个目录中使用一个随机的文件夹名称. remote_user这是个ansible使用/usr/bin/ansible-playbook链接的默认用户名. 注意如果不指定,/usr/bin/ansible默认使用当前用户名称: 1remote_user = root roles_pathroles 路径指的是’roles/’下的额外目录,用于playbook搜索Ansible roles.比如, 如果我们有个用于common roles源代码控制仓库和一个不同的 playbooks仓库,你也许会建立一个惯例去在 /opt/mysite/roles 里面查找roles.: 1roles_path = /opt/mysite/roles 多余的路径可以用冒号分隔,类似于其他path字符串: 1roles_path = /opt/mysite/roles:/opt/othersite/roles Roles将会在playbook目录中开始搜索.如果role没有找到,这个参数指定了其它可能的搜索路径. sudo_user这个是sudo使用的默认用户,如果–sudo-user 没有特指或者’sudo_user’ 在Ansible playbooks中没有特指,在大多数的逻辑中 默认为: ‘root’ 1sudo_user=root timeout这个事默认SSH链接尝试超市时间: 1timeout = 10 vault_password_fileNew in version 1.7. 这个用来设置密码文件,也可以通过命令行指定–vault-password-file: 1vault_password_file = /path/to/vault_password_file 在1.7版本中,这个文件也可以称为一个脚本的形式.如果你使用脚本而不是单纯文件的话,请确保它可以执行并且密码可以在标准输出上打印出来.如果你的脚本需要提示请求数据,请求将会发到标准错误输出中. record_host_keys默认设置会记录并验证通过在用户hostfile中新发现的的主机（如果host key checking 被激活的话）. 这个选项在有很多主机的时候将会性能很差.在 这种情况下,建议使用SSH传输代替. 当设置为False时, 性能将会提升,在hostkey checking 被禁用时候,建议使用.: 1record_host_keys=True host_key_checking如果有台被管节点重新安装系统并在known_hosts中有了与之前不同的密钥信息，就会提示一个密钥不匹配的错误信息，直到被纠正为止，在使用Ansible时，如果有台被管理节点没有在known_hosts中被初始化，将会在使用Ansible或定时执行Ansible时提示对key信息的确认。如果你不想出现这种情况，并且你明白禁用此项行为的含义，只要修改该参数为False即可 1host_key_checking=True]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible主机清单Inventory文件hosts]]></title>
    <url>%2F2017%2F05%2F14%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAnsible%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95Inventory%E6%96%87%E4%BB%B6hosts%2F</url>
    <content type="text"><![CDATA[Ansible 通过读取默认的主机清单配置,可以同时连接到多个远程主机上执行任务组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/hosts。默认路径可以通过修改 ansible.cfg 的 hostfile 参数指定路径。 除默认文件外,你还可以同时使用多个 inventory 文件(后面会讲到),也可以从动态源,或云上拉取 inventory 配置信息.详见 动态 Inventory. 1.主机与组/etc/ansible/hosts 文件的格式与windows的ini配置文件类似: 12345678910mail.example.com[webservers]foo.example.combar.example.com[dbservers]one.example.comtwo.example.comthree.example.com 方括号[]中是组名,用于对系统进行分类,便于对不同系统进行个别的管理.可以根据自己的需求将庞大的主机分成具有标识的组，如上面分了两个组webservers和dbservers组； 一个主机可以属于不同的组,比如一台服务器可以同时属于 webserver组 和 dbserver组.这时属于两个组的变量都可以为这台主机所用, 如果有主机的SSH端口不是标准的22端口,可在主机名之后加上端口号,用冒号分隔. 1badwolf.example.com:5309 4.假设你有一些静态IP地址,希望设置一些别名,但不是在系统的 host 文件中设置,那么可以设置如下: 1jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50 可以按照范围指定主机，一组相似的 hostname , 可简写如下: 12345[webservers]www[01:50].example.com[databases]db-[a:f].example.com 2.主机变量前面已经提到过,分配变量给主机很容易做到,这些变量定义后可在 playbooks 中使用: 对于每一个 host,你还可以选择连接类型和连接用户名: 12345[targets]localhost ansible_connection=localother1.example.com ansible_connection=ssh ansible_ssh_user=mpdehaanother2.example.com ansible_connection=ssh ansible_ssh_user=mdehaan 定义其他变量 123[atlanta]host1 http_port=80 maxRequestsPerChild=808host2 http_port=303 maxRequestsPerChild=909 3.组的变量也可以定义属于整个组的变量，应用到组内的所有成员： 1234567[atlanta]host1host2[atlanta:vars]ntp_server=ntp.atlanta.example.comproxy=proxy.atlanta.example.com 上面atlanta组中包含两台主机，通过对atlanta组指定vars变更，相应的host1和host2相当于相应的指定了ntp_server和proxy变量参数值 。 4.把一个组作为另一个组的子成员可以把一个组作为另一个组的子成员,以及分配变量给整个组使用. 这些变量可以给 /usr/bin/ansible-playbook 使用,但不能给 /usr/bin/ansible 使用: 1234567891011121314151617181920212223[atlanta]host1host2[raleigh]host2host3[southeast:children]atlantaraleigh[southeast:vars]some_server=foo.southeast.example.comhalon_system_timeout=30self_destruct_countdown=60escape_pods=2[usa:children]southeastnortheastsouthwestnorthwest 5、分文件定义 Host 和 Group 变量在 inventory 主文件中保存所有的变量并不是最佳的方式.还可以保存在独立的文件中,这些独立文件与 inventory 文件保持关联. 不同于 inventory 文件(INI 格式),这些独立文件的格式为 YAML.详见 YAML 语法 . 假设 inventory 文件的路径为: 1/etc/ansible/hosts 假设有一个主机名为 ‘foosball’, 主机同时属于两个组,一个是 ‘raleigh’, 另一个是 ‘webservers’. 那么以下配置文件(YAML 格式)中的变量可以为 ‘foosball’ 主机所用.依次为 ‘raleigh’ 的组变量,’webservers’ 的组变量,’foosball’ 的主机变量: 123/etc/ansible/group_vars/raleigh/etc/ansible/group_vars/webservers/etc/ansible/host_vars/foosball 6.Inventory 参数的说明如同前面提到的,通过设置下面的参数,可以控制 ansible 与远程主机的交互方式,其中一些我们已经讲到过: 1234567891011121314151617181920212223242526272829303132ansible_ssh_host 将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.ansible_ssh_port ssh端口号.如果不是默认的端口号,通过此变量设置.ansible_ssh_user 默认的 ssh 用户名ansible_ssh_pass ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)ansible_sudo_pass sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)ansible_sudo_exe (new in version 1.8) sudo 命令路径(适用于1.8及以上版本)ansible_connection 与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &apos;smart&apos;,&apos;smart&apos; 方式会根据是否支持 ControlPersist, 来判断&apos;ssh&apos; 方式是否可行.ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.ansible_shell_type 目标系统的shell类型.默认情况下,命令的执行使用 &apos;sh&apos; 语法,可设置为 &apos;csh&apos; 或 &apos;fish&apos;.ansible_python_interpreter 目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是&quot;/usr/bin/python&quot;,比如 \*BSD, 或者 /usr/bin/python 不是 2.X 版本的 Python.我们不使用 &quot;/usr/bin/env&quot; 机制,因为这要求远程用户的路径设置正确,且要求 &quot;python&quot; 可执行程序名不可为 python以外的名字(实际有可能名为python26). 与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径.... 7.一个主机文件的例子:12345678910111213141516171819202122232425262728293031323334353637383940414243# This is the default ansible &apos;hosts&apos; file.## It should live in /etc/ansible/hosts## - Comments begin with the &apos;#&apos; character# - Blank lines are ignored# - Groups of hosts are delimited by [header] elements# - You can enter hostnames or ip addresses# - A hostname/ip can be a member of multiple groups# Ex 1: Ungrouped hosts, specify before any group headers.## green.example.com## blue.example.com## 192.168.100.1## 192.168.100.10# Ex 2: A collection of hosts belonging to the &apos;webservers&apos; group## [webservers]## alpha.example.org## beta.example.org## 192.168.1.100## 192.168.1.110# If you have multiple hosts following a pattern you can specify# them like this:## www[001:006].example.com# Ex 3: A collection of database servers in the &apos;dbservers&apos; group## [dbservers]## ## db01.intranet.mydomain.net## db02.intranet.mydomain.net## 10.25.1.56## 10.25.1.57# Here&apos;s another example of host ranges, this time there are no# leading 0s:## db-[99:101]-node.example.com]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible安装]]></title>
    <url>%2F2017%2F05%2F13%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2FAnsible%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文主要记录了ansible的安装方法。 一、安装前准备需要安装些什么Ansible默认通过 SSH 协议管理机器.目前,只要机器上安装了 Python 2.6 或 Python 2.7 (windows系统不可以做控制主机),都可以运行Ansible. 主机的系统可以是 Red Hat, Debian, CentOS, OS X, BSD的各种版本,等等. 安装Ansible之后,不需要启动或运行一个后台进程,或是添加一个数据库.只要在一台电脑(可以是一台笔记本)上安装好,就可以通过这台电脑管理一组远程的机器.在远程被管理的机器上,不需要安装运行任何软件,因此升级Ansible版本不会有太多问题. 版本及安装方式选择?因为Ansible可以很简单的从源码运行,且不必在远程被管理机器上安装任何软件,很多Ansible用户会跟进使用开发版本. Ansible一般每两个月出一个发行版本.小bugs一般在下一个发行版本中修复,并在稳定分支中做backports.大bugs会在必要时出一个维护版本,不过这不是很频繁. 若你希望使用Ansible的最新版本,并且你使用的操作系统是 Red Hat Enterprise Linux (TM), CentOS, Fedora, Debian, Ubuntu,我们建议使用系统的软件包管理器. 另有一种选择是通过”pip”工具安装,”pip”是一个安装和管理Python包的工具. 若你希望跟进开发版本,想使用和测试最新的功能特性,我们会分享如何从源码运行Ansible的方法.从源码运行程序不需要进行软件安装. 二、安装2.1 通过Yum安装最新发布版本RHEL或CentOS用户,需要 配置 EPEL 123# install the epel-release RPM if needed on CentOS, RHEL, or Scientific Linux$ sudo yum install epel-release$ sudo yum install ansible 2.2 自己创建RPM软件包你也可以自己创建RPM软件包.在Ansible项目的checkout的根目录下,或是在一个tarball中,使用 make rpm 命令创建RPM软件包. 然后可分发这个软件包或是使用它来安装Ansible.在创建之前,先确定你已安装了 rpm-build, make, and python2-devel . 1234$ git clone git://github.com/ansible/ansible.git$ cd ./ansible$ make rpm$ sudo rpm -Uvh ~/rpmbuild/ansible-*.noarch.rpm 2.3 通过Apt (Ubuntu)安装最新发布版本配置PPA及安装ansible,执行如下命令: 1234$ sudo apt-get install software-properties-common$ sudo apt-add-repository ppa:ansible/ansible$ sudo apt-get update$ sudo apt-get install ansible 2.4 通过 Pip 安装最新发布版本Ansible可通过 “pip” 安装(安装和管理Python包的工具),若你还没有安装 pip,可执行如下命令安装: 1$ sudo easy_install pip 然后安装Ansible: 1$ sudo pip install ansible 如果你是在 OS X Mavericks 上安装,编译器可能或告警或报错,可通过如下设置避免这种情况: 1$ sudo CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments pip install ansible 2.5 发行版的Tarball不想通过git checkout 创建Ansible的软件包？在这里可获取Tarball Ansible downloads 2.6 在Mac OSX 上安装最新发布版本在 Mac 上安装 ansible，最好是通过 pip 安装，参照 通过 Pip 安装最新发布版本 .]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Ansible]]></title>
    <url>%2F2017%2F05%2F12%2F%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2FAnsible%2F%E5%88%9D%E8%AF%86Ansible%2F</url>
    <content type="text"><![CDATA[初识ansible。 Ansible是什么？官方的描述如下 1Simple, agentless and powerful open source IT automation Ansible是近年越来越火的一款基于Python开发的运维自动化工具，2012.02月出现至今，已成为排名前10的python项目。 其主要功能是帮助运维实现IT工作的自动化、降低人为操作失误、提高业务自动化率、提升运维工作效率，常用于软件部署自动化、配置自动化、管理自动化、系统化系统任务、持续集成、零宕机平滑升级等。 Ansible名字来源？Ansible名字其实是来源于作者喜欢的一本书——奥森·斯科特·卡特的《安德的游戏》，该书中Ansible是一种能跨越时空的即时通信工具，使用Ansible可以在相距数光年的距离远程实时控制前线的舰队战斗。Michael DeHaan希望借这个名词比喻控制远端大量的服务器，因此便将自己的这款产品命名为Ansible。 为什么选择Ansible？ noagents：不需要在被管控主机上安装任何客户端 noserver：无服务器daemon进程 基于SSH工作 安装简单 Redhat收购 Ansible galaxy 支持docker的模块管理 Ansible架构 Ansible没有客户端，因此底层通信依赖于系统软件，Linux系统下基于OpenSSH通信，Windows系统下基于PowerShell，管理端必须是Linux系统，使用者认证通过后在管理节点通过Ansible工具调用各应用模块将指令推送至被管理端执行，并在执行完毕后自动删除产生的临时文件。 ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括： (1)、连接插件connectionplugins：负责和被监控端实现通信； (2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机； (3)、各种模块核心模块、command模块、自定义模块； (4)、借助于插件完成记录日志邮件等功能； (5)、playbook：剧本执行多个任务 Ansible任务执行流程]]></content>
      <categories>
        <category>运维相关</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ls命令]]></title>
    <url>%2F2017%2F05%2F12%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fls%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1、命令简介ls（list 列出目录内容）命令用来列出显示指定目录里的文件及文件夹清单，缺省下ls用来打印出当前目录的清单。通过ls 命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限、大小、更改时间等等 2、用法1ls [OPTION]... [FILE]... 3、选项123456789101112131415161718192021222324252627282930313233343536-a 列出目录下的所有文件，包括以 . 开头的隐含文件。-A 显示除“.”和“..”外的所有文件。 -b 把文件名中不可输出的字符用反斜杠加字符编号(就象在C语言里一样)的形式列出。 -B 不输出以“~”结尾的备份文件。-c 与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则显示状态改变时间，并以名称排序；其他根据ctime排揎-C 多列显示输出结果，纵向排序，这是默认选项。--color显示彩色文件名 [always|never|auto] -d 将目录像文件一样显示，而不是显示其下的文件。 -e 输出时间的全部信息，而不是输出简略信息。 -f 此参数的效果和同时指定“aU”参数相同，并关闭“lst”参数的效果；-F 在文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通 文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套接字---g 类似于-l 但是不列出owner。 -G 输出文件的组的信息。-h 和-l一起，以human-readable的格式输出大小信息-i --inode输出文件节点的索引信息。 -k 以 k 字节的形式表示文件的大小。 -l 列出文件的详细信息。 -L 列出链接文件名而不是链接到的文件。 -m 横向输出文件名，并以“，”作分格符。 -n 用数字的 UID,GID 代替名称。 -N 不限制文件长度。-o 显示文件的除组信息外的详细信息。 -p 文件夹后添加/-q 用?代替不可输出的字符。-Q 把输出的文件名用双引号括起来。 -r 对目录反向排序。 -R 列出所有子目录下的文件。-s 在每个文件名后输出该文件的大小,单位为block。-S 以文件大小排序。 -t 以时间排序。 -u 与“-lt”选项连用时，按照访问时间排序输出目录内容。与“-l”选项连用时，则显示访问时间，并以名称排序；其他根据访问时间排序-U 对输出的文件不排序。-x 按列输出，横向排序。 -X 以文件的扩展名(最后一个 . 后的字符)排序。 -1 一行只输出一个文件。 --help 在标准输出上显示帮助信息。 --version 在标准输出上输出版本信息并退出。 4、实例1. 不带任何选项列出文件 不带选项的ls命令来光秃秃地列出文件和目录，我们是不能看到像文件类型、大小、修改日期和时间、权限以及链接这样具体的信息的。 12[root@cent6 tmp]# lshsperfdata_root nginx_log_stat pulse-IhiwHnejlPBk tomcat-redis-session-manager 2. 带–l 选项列出文件列表 123456[root@cent6 tmp]# ls -ltotal 16drwxr-xr-x 2 root root 4096 Apr 9 09:01 hsperfdata_root-rw-r--r--. 1 root root 4 Mar 22 17:58 nginx_log_statdrwx------. 2 cloud cloud 4096 Feb 16 2015 pulse-IhiwHnejlPBkdrwxr-xr-x. 3 root root 4096 Feb 24 21:32 tomcat-redis-session-manager 可以看到，用ls -l命令查看某一个目录会得到一个7个字段的列表。 第1行:总计(total) Total后面的数字是指当前目录下所有文件所占用的空间总和,单位kb。可以使用ls –lh查看， 第1字段: 文件属性字段 文件属性字段总共有10个字母组成；第一个字符代表文件的类型。 1234567“-”表示该文件是一个普通文件“d”表示该文件是一个目录，字母&quot;d&quot;，是dirtectory(目录)的缩写“l”表示该文件是一个链接文件。字母&quot;l&quot;是link(链接)的缩写，类似于windows下的快捷方式“b”的表示块设备文件(block)，一般置于/dev目录下，设备文件是普通文件和程序访问硬件设备的入口，是很特殊的文件。，如硬盘、光盘等。最小数据传输单位为一个数据块(通常一个数据块的大小为512字节) 12345“c”表示该文件是一个字符设备文件(character)，一般置于/dev目录下，一次传输一个字节的设备被称为字符设备，如键盘、字符终端等，传输数据的最小单位为一个字节。“p”表示该文件为命令管道文件。与shell编程有关的文件。“s”表示该文件为sock文件。与shell编程有关的文件。 第2字段：如果是一个文件，此时这一字段表示这个文件所具有的硬链接数；如果是一个目录，则第2字段表示该目录所含子目录的个数。新建一个空目录，这个目录的第二字段就是2，表示该目录下有两个子目录。为什么新建的目录下面会有两个子目录呢?因为每一个目录都有一个指向它本身的子目录”。” 和指向它上级目录的子目录”。。”， 第3字段：文件（目录）拥有者 第4字段：文件（目录）拥有者所在的组 第5字段: 文件所占用的空间(以字节为单位) 第6字段：文件（目录）最近访问（修改）时间 第7字段：文件名 3. 计算当前目录下的文件数和目录数 1234[root@zabbix zabbix]# ls -l |grep "^d"|wc -l 3[root@zabbix zabbix]# ls -l |grep "^-"|wc -l6 4. 用 -lh 选项来以易读方式列出文件 1234[root@cent6 ~]# ls -lhtotal 16K-rwxr-xr-x. 1 root root 1.3K Feb 16 2015 anaconda-ks.cfg-rwxr-xr-x. 1 root root 9.0K Feb 16 2015 install.log.syslog 5. 浏览隐藏文件 列出所有文件包括以‘.’开头的隐藏文件。 12[root@cent6 ~]# ls -a. anaconda-ks.cfg .bash_logout .bashrc .cshrc .gconfd install.log.syslog 6. 列出目录信息 用ls -l命令列出/tmp目录下的文件，其中-ld参数可以只显示/tmp目录的信息。 12[root@cent6 ~]# ls -ld /tmpdrwxrwxrwt. 7 root root 4096 Apr 12 20:34 /tmp 7. 以尾部以‘/’字符结尾的方式列出文件和目录 使用 ls 命令的 -F 选项，会在每个目录的末尾添加“/”字符显示。 12[root@cent6 ~]# ls -Fanaconda-ks.cfg* directory/ install.log.syslog* 8. 只列出文件下的子目录 利用使用-F选项时，目录以/结尾 1234[root@zabbix zabbix]# ls -F |grep /$alertscripts/web/zabbix_agentd.d/ 利用使用-l选项时，目录以d开头 1234[root@zabbix zabbix]# ls -l |grep "^d"drwxrwxrwx 2 root root 97 Jan 28 09:23 alertscriptsdrwxr-x--- 2 apache apache 54 Feb 17 21:10 webdrwxr-xr-x 2 root root 45 Feb 17 21:10 zabbix_agentd.d 9. 按文件大小排序 带-lS组合选项能按文件从大到小的次序显示。 12345[root@cent6 ~]# ls -lStotal 20-rwxr-xr-x. 1 root root 9154 Feb 16 2015 install.log.syslogdrwxr-xr-x 2 root root 4096 Apr 12 21:25 directory-rwxr-xr-x. 1 root root 1264 Feb 16 2015 anaconda-ks.cfg 10.列出当前目录中所有以“zabbix”开头的目录和文件的详细内容 12345[root@zabbix zabbix]# ls zabbix*zabbix_agentd.conf zabbix_java_gateway.conf zabbix_java_gateway_logback.xml zabbix_server.conf zabbix_server.conf_bak zabbix_server.conf.rpmnew_bakzabbix_agentd.d:userparameter_mysql.conf 11. 倒序列出文件 ls -r 选项能以倒序方式显示文件和目录。 12[root@cent6 ~]# ls -rinstall.log.syslog directory anaconda-ks.cfg 12. 以修改时间列出，最近修改的在上面 12345[root@cent6 ~]# ls -lttotal 20drwxr-xr-x 2 root root 4096 Apr 12 21:25 directory-rwxr-xr-x. 1 root root 1264 Feb 16 2015 anaconda-ks.cfg-rwxr-xr-x. 1 root root 9154 Feb 16 2015 install.log.syslog 13. 以修改时间倒序列出 带-ltr组合选项能以文件或目录的最新修改时间的次序来显示它们。 12345[root@cent6 ~]# ls -ltrtotal 20-rwxr-xr-x. 1 root root 9154 Feb 16 2015 install.log.syslog-rwxr-xr-x. 1 root root 1264 Feb 16 2015 anaconda-ks.cfgdrwxr-xr-x 2 root root 4096 Apr 12 21:25 directory 14.指定文件时间输出格式 1234567891011[root@zabbix zabbix]# ls -lt --time-style=long-isototal 68-rw-r--r-- 1 root root 14938 2016-04-14 11:48 zabbix_server.confdrwxr-xr-x 2 root root 45 2016-02-17 21:10 zabbix_agentd.ddrwxr-x--- 2 apache apache 54 2016-02-17 21:10 web-rw-r--r-- 1 root root 10341 2016-02-16 00:16 zabbix_agentd.conf-rw-r--r-- 1 root root 813 2016-02-16 00:16 zabbix_java_gateway.conf-rw-r--r-- 1 root root 770 2016-02-16 00:16 zabbix_java_gateway_logback.xml-rw-r----- 1 root zabbix 14912 2016-02-16 00:16 zabbix_server.conf.rpmnew_bak-rw-r----- 1 root zabbix 13657 2016-02-04 10:19 zabbix_server.conf_bakdrwxrwxrwx 2 root root 97 2016-01-28 09:23 alertscripts 更详细的时间 1234567891011[root@zabbix zabbix]# ls -tl --time-style=full-isototal 68-rw-r--r-- 1 root root 14938 2016-04-14 11:48:26.231666438 +0800 zabbix_server.confdrwxr-xr-x 2 root root 45 2016-02-17 21:10:03.471004045 +0800 zabbix_agentd.ddrwxr-x--- 2 apache apache 54 2016-02-17 21:10:00.024943223 +0800 web-rw-r--r-- 1 root root 10341 2016-02-16 00:16:47.000000000 +0800 zabbix_agentd.conf-rw-r--r-- 1 root root 813 2016-02-16 00:16:47.000000000 +0800 zabbix_java_gateway.conf-rw-r--r-- 1 root root 770 2016-02-16 00:16:47.000000000 +0800 zabbix_java_gateway_logback.xml-rw-r----- 1 root zabbix 14912 2016-02-16 00:16:47.000000000 +0800 zabbix_server.conf.rpmnew_bak-rw-r----- 1 root zabbix 13657 2016-02-04 10:19:44.837012771 +0800 zabbix_server.conf_bakdrwxrwxrwx 2 root root 97 2016-01-28 09:23:44.034478732 +0800 alertscripts 15. **递归列出子目录** ls -R 选项能递归列出子目录 12345678910[root@cent6 ~]# ls -lR.:total 20-rwxr-xr-x. 1 root root 1264 Feb 16 2015 anaconda-ks.cfgdrwxr-xr-x 2 root root 4096 Apr 12 21:25 directory-rwxr-xr-x. 1 root root 9154 Feb 16 2015 install.log.syslog./directory:total 0-rw-r--r-- 1 root root 0 Apr 12 21:25 subtext.txt 16.列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归 1234567891011[root@zabbix zabbix]# find $PWD -maxdepth 1 | xargs ls -lddrwxr-xr-x 5 root root 4096 Apr 14 11:48 /etc/zabbixdrwxrwxrwx 2 root root 97 Jan 28 09:23 /etc/zabbix/alertscriptsdrwxr-x--- 2 apache apache 54 Feb 17 21:10 /etc/zabbix/web-rw-r--r-- 1 root root 10341 Feb 16 00:16 /etc/zabbix/zabbix_agentd.confdrwxr-xr-x 2 root root 45 Feb 17 21:10 /etc/zabbix/zabbix_agentd.d-rw-r--r-- 1 root root 813 Feb 16 00:16 /etc/zabbix/zabbix_java_gateway.conf-rw-r--r-- 1 root root 770 Feb 16 00:16 /etc/zabbix/zabbix_java_gateway_logback.xml-rw-r--r-- 1 root root 14938 Apr 14 11:48 /etc/zabbix/zabbix_server.conf-rw-r----- 1 root zabbix 13657 Feb 4 10:19 /etc/zabbix/zabbix_server.conf_bak-rw-r----- 1 root zabbix 14912 Feb 16 00:16 /etc/zabbix/zabbix_server.conf.rpmnew_bak 17.递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径 123456789101112131415161718[root@zabbix zabbix]# find $PWD | xargs ls -ld drwxr-xr-x 5 root root 4096 Apr 14 11:48 /etc/zabbixdrwxrwxrwx 2 root root 97 Jan 28 09:23 /etc/zabbix/alertscripts-rwxrwxrwx 1 root root 2924 Jan 28 09:23 /etc/zabbix/alertscripts/sendim.py-rwxrwxrwx 1 root root 835 Jan 27 06:51 /etc/zabbix/alertscripts/sendmail.py-rwxrwxrwx 1 root root 611 Jan 27 06:51 /etc/zabbix/alertscripts/sendsms.sh-rwxrwxrwx 1 root root 2930 Jan 27 06:51 /etc/zabbix/alertscripts/sendwechat.pydrwxr-x--- 2 apache apache 54 Feb 17 21:10 /etc/zabbix/web-rw-r--r-- 1 root root 1036 Feb 15 20:25 /etc/zabbix/web/maintenance.inc.php-rw-r--r-- 1 apache apache 431 Jan 27 06:27 /etc/zabbix/web/zabbix.conf.php-rw-r--r-- 1 root root 10341 Feb 16 00:16 /etc/zabbix/zabbix_agentd.confdrwxr-xr-x 2 root root 45 Feb 17 21:10 /etc/zabbix/zabbix_agentd.d-rw-r--r-- 1 root root 1517 Feb 16 00:16 /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf-rw-r--r-- 1 root root 813 Feb 16 00:16 /etc/zabbix/zabbix_java_gateway.conf-rw-r--r-- 1 root root 770 Feb 16 00:16 /etc/zabbix/zabbix_java_gateway_logback.xml-rw-r--r-- 1 root root 14938 Apr 14 11:48 /etc/zabbix/zabbix_server.conf-rw-r----- 1 root zabbix 13657 Feb 4 10:19 /etc/zabbix/zabbix_server.conf_bak-rw-r----- 1 root zabbix 14912 Feb 16 00:16 /etc/zabbix/zabbix_server.conf.rpmnew_bak 18. 显示文件或目录的索引节点号 带-i选项能列出文件或目录的索引节点号。索引节点（index inode简称为“inode”）是Linux中一个特殊的概念，具有相同的索引节点号的两个文本本质上是同一个文件（除文件名不同外）。 12[root@cent6 ~]# ls -i1058854 anaconda-ks.cfg 1061385 directory 1048579 install.log.syslog 19. 显示文件的UID和GID 用ls -n命令来显示文件和目录的UID和GID（root的均为0） 12345[root@cent6 ~]# ls -ntotal 20-rwxr-xr-x. 1 0 0 1264 Feb 16 2015 anaconda-ks.cfgdrwxr-xr-x 2 0 0 4096 Apr 12 21:25 directory-rwxr-xr-x. 1 0 0 9154 Feb 16 2015 install.log.syslog 20. 水平输出文件列表，以逗号分隔 12[root@cent6 ~]# ls -manaconda-ks.cfg, directory, install.log.syslog 21. 列出文件并标记颜色分类 12[root@cent6 ~]# ls --color=autoanaconda-ks.cfg directory install.log.syslog 22.在ls中列出文件的绝对路径 12345678910[root@zabbix zabbix]# ls | sed "s:^:`pwd`/:"/etc/zabbix/alertscripts/etc/zabbix/web/etc/zabbix/zabbix_agentd.conf/etc/zabbix/zabbix_agentd.d/etc/zabbix/zabbix_java_gateway.conf/etc/zabbix/zabbix_java_gateway_logback.xml/etc/zabbix/zabbix_server.conf/etc/zabbix/zabbix_server.conf_bak/etc/zabbix/zabbix_server.conf.rpmnew_bak 23. ls命令和它的别名 我们给ls命令设置如下别名之后，当我们执行ls命令的时候它会默认执行-l选项并且像上文提到的那样显示长列表。 12alias ls=&quot;ls -l --color&quot; unalias ls]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>ls</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Supervisor简介、安装、配置]]></title>
    <url>%2F2017%2F05%2F11%2FLinux%2FSupervisor%2FSupervisor%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[本文主要介绍了supervisor的安装、使用。 1. 什么是supervisor Supervisor是一个Python开发的client/server系统，可以管理和监控类unix上面的进程。类似daemontools 什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式执行的程序，比如一个后台任务，如经常会碰到要写一些守护进程，简单做法放入后台： 1shell&gt; nohup python xxx.py &amp; 除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。 2. 为啥用supervisor方便 为啥简单呢？因为咱们通常管理linux进程的时候，一般来说都需要自己编写一个能够实现进程start/stop/restart/reload功能的脚本，然后丢到/etc/init.d/下面。这么做有很多不好的地方，第一我们要编写这个脚本，这就很耗时耗力了。第二，当这个进程挂掉的时候，linux不会自动重启它的，想要自动重启的话，我们还要自己写一个监控重启脚本。而supervisor则可以完美的解决这些问题。supervisor管理进程，是通过fork/exec的方式把这些被管理的进程，当作supervisor的子进程来启动。这样的话，我们只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去就OK了。这样就省下了我们如同linux管理进程的时自己写控制脚本的麻烦了。第二，被管理进程作为supervisor的子进程，当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，所以当然也就可以对挂掉的子进程进行自动重启了，当然重启还是不重启，也要看你的配置文件里面有木有设置autostart=true了。 精确 Supervisord将进程作为子进程启动，因此可以一直知晓子进程的状态，可以方便查询。而基于pid文件文件获取进程状态有时候不靠谱 权限代理 某些进程需要root或者sudo权限运行，而又不方便把机器的root权限和sudo权限开放给用户的时候，普通用户可以借助supervisor的命令和web UI进行进程的启动和关闭 进程组 linux系统没有批量启动关闭进程的功能，我们想要停止多个进程，只能一个一个的去停止，要么就自己写个脚本去批量停止。Supervisor 允许赋予进程优先级，可以使用supervisorctl 的“start all”, and “restart all”，按照优先级顺序启动。并且进程可以分组，相关的进程可以作为一个单元启动。 3. supervisor特点 简单 :supervisor通过一个 INI-style的文件配置，简单易学。提供了许多诸如重启失败进程、自动日子归档的功能 中心化: 可以在在同一个地方启动 停止 监控子进程，进程可以单独控制，也可以分组控制，并提供命令行和web接口配置supervisor 高效: 通过 fork/exec启动子进程 可扩展: 提供了simple event notification protocol和XML-RPC interface，方便通过各种语言进行配置管理 兼容性强: 类Unix都支持，不支持windows，基于Python 作为一款已经被使用了十多年的软件，可用性已经被广泛证明 4. Supervisor 组成 supervisord：supervisord是supervisor的服务端程序。负责启动子程序，应答客户端命令，重启crash进程，子程序日志记录，对进程变化发送事件通知等 supervisorctl： 客户端命令行工具，可以连接服务器端，进行进程的启动、关闭、重启、状态查看等。重要的一点是，supervisorctl不仅可以连接到本机上的supervisord，还可以连接到远程的supervisord，当然在本机上面是通过UNIX socket连接的，远程是通过TCP socket连接的。supervisorctl和supervisord之间的通信，是通过xml_rpc完成的。 相应的配置在[supervisorctl]块里面 Web Server 可以在界面上管理进程的WEB UI, 通过[inet_http_server] section配置，默认http://localhost:9001/` XML-RPC Interface XML-RPC接口，提供XML-RPC服务来对子进程进行管理，监控，参照 XML-RPC API Documentation. 5 安装5.1 yum 安装(推荐)1yum install supervisor 会自动安装成服务形式，可以使用systemctl进行管理 5.2 使用Setuptools安装123wget -q http://peak.telecommunity.com/dist/ez_setup.pypython ez_setup.pyeasy_install supervisor 或者 12yum install python-setuptoolseasy_install supervisor 5.3 安装方式31234wget https://pypi.python.org/packages/80/37/964c0d53cbd328796b1aeb7abea4c0f7b0e8c7197ea9b0b9967b7d004def/supervisor-3.3.1.tar.gztar -zxvf supervisor-3.3.1.tar.gz cd supervisor-3.3.1python setup.py install 5.4生成配置文件yum 安装方式不需要此步骤，因为已经自动生产了supervisord.conf 和supervisord.d文件夹 安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里： 1echo_supervisord_conf &gt; /etc/supervisord.conf 5.5启动1supervisord -c /etc/supervisord.conf 6. 配置文件/etc/supervisord.conf上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。yum方式安装，会自动配置。 12[include]files = supervisord.d/*.ini ; 可以是 *.conf 或 *.ini /etc/supervisord.conf 参数说明 123456789101112131415161718192021222324252627282930313233[unix_http_server]file=/tmp/supervisor.sock ; UNIX socket 文件，supervisorctl 会使用;chmod=0700 ; socket 文件的 mode，默认是 0700;chown=nobody:nogroup ; socket 文件的 owner，格式： uid:gid ;[inet_http_server] ; HTTP 服务器，提供 web 管理界面;port=127.0.0.1:9001 ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性;username=user ; 登录管理后台的用户名;password=123 ; 登录管理后台的密码 [supervisord]logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.loglogfile_maxbytes=50MB ; 日志文件大小，超出会 rotate，默认 50MBlogfile_backups=10 ; 日志文件保留备份数量默认 10loglevel=info ; 日志级别，默认 info，其它: debug,warn,tracepidfile=/tmp/supervisord.pid ; pid 文件nodaemon=false ; 是否在前台启动，默认是 false，即以 daemon 的方式启动minfds=1024 ; 可以打开的文件描述符的最小值，默认 1024minprocs=200 ; 可以打开的进程数的最小值，默认 200 ; the below section must remain in the config file for RPC; (supervisorctl/web interface) to work, additional interfaces may be; added by defining them in separate rpcinterface: sections[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface [supervisorctl]serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord ; 包含其他的配置文件[include]files = /etc/supervisord.d/*.ini ; 可以是 *.conf 或 *.ini 7. 添加一个被管理的进程我们假如有一个hello.py 123456789import weburls = ( &apos;/(.*)&apos;,&apos;hello&apos; )app = web.application(urls, globals())class hello: def GET(self, name): return &apos;hello: &apos; + nameif __name__ == &apos;__main__&apos;: app.run() 所以直接在命令行启动的方式可能是这样的：(需要先安装web.py easy_install web.py) 1python /opt/hello.py 现在编写一份配置文件/etc/supervisord.d/hello.ini来管理这个进程 12345678910111213[program:hello]directory = /opt ; 程序的启动目录command = python /opt/hello.py ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true ; 在 supervisord 启动的时候也自动启动startsecs = 5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了autorestart = true ; 程序异常退出后自动重启startretries = 3 ; 启动失败自动重试次数，默认是 3user = xqzt ; 用哪个用户启动redirect_stderr = true ; 把 stderr 重定向到 stdout，默认 falsestdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile = /var/log/supervisor/hello.log 一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。 12supervisor&gt; statushello RUNNING pid 2809, uptime 0:00:06 8. 使用 supervisorctlSupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。supervisorctl 这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了，也可以直接在 bash 终端运行。 1234567891011121314# supervisorctl --helpsupervisorctl -- control applications run by supervisord from the cmd line.Usage: /usr/bin/supervisorctl [options] [action [arguments]]Options:-c/--configuration -- configuration file path (default /etc/supervisord.conf)-h/--help -- print usage message and exit-i/--interactive -- start an interactive shell after executing commands-s/--serverurl URL -- URL on which supervisord server is listening (default &quot;http://localhost:9001&quot;).-u/--username -- username to use for authentication with server-p/--password -- password to use for authentication with server-r/--history-file -- keep a readline history (if readline is available) 输入help,可以查看支持的命令及用法 123456789101112supervisor&gt; helpdefault commands (type help &lt;topic&gt;):=====================================add clear fg open quit remove restart start stop update avail exit maintail pid reload reread shutdown status tail versionsupervisor&gt; help startstart &lt;name&gt; Start a processstart &lt;gname&gt;:* Start all processes in a groupstart &lt;name&gt; &lt;name&gt; Start multiple processes or groupsstart all Start all processes 常用命令 12345678910111213141516# 停止某一个进程，program_name 为 [program:x] 里的 xsupervisorctl stop program_name# 启动某个进程supervisorctl start program_name# 重启某个进程supervisorctl restart program_name# 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)supervisorctl stop groupworker:# 结束 groupworker:name1 这个进程 (start，restart 同理)supervisorctl stop groupworker:name1# 停止全部进程，注：start、restart、stop 都不会载入最新的配置文件supervisorctl stop all# 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程supervisorctl reload# 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启supervisorctl update 9. supervisor Web UI除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。将supervisord.conf中[inet_http_server]部分做相应配置，在supervisorctl中reload即可启动web管理界面 1234[inet_http_server] ; HTTP 服务器，提供 web 管理界面port=172.17.84.64:9001 ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性username=user ; 登录管理后台的用户名password=123 ; 登录管理后台的密码 在浏览器中输入http://127.0.0.1:9001，可进入web管理界面 10. 将多个进程按组管理Supervisor 同时还提供了另外一种进程组的管理方式，通过这种方式，可以使用 supervisorctl 命令来管理一组进程。跟 [program:x] 的进程组不同的是，这里的进程是一个个的 [program:x] 。 123[group:thegroupname]programs=progname1,progname2 ; each refers to &apos;x&apos; in [program:x] definitionspriority=999 ; the relative start priority (default 999) 当添加了上述配置后，progname1 和 progname2 的进程名就会变成 thegroupname:progname1 和 thegroupname:progname2 以后就要用这个名字来管理进程了，而不是之前的 progname1。 以后执行 supervisorctl stop thegroupname: 就能同时结束 progname1 和 progname2，执行 supervisorctl stop thegroupname:progname1 就能结束 progname1。如下所示 /etc/supervisord.d/hello.ini文件 12345678910111213141516[group:group1]programs=hello[program:hello]directory = /opt ; 程序的启动目录command = python /opt/hello.py ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true ; 在 supervisord 启动的时候也自动启动startsecs = 5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了autorestart = true ; 程序异常退出后自动重启startretries = 3 ; 启动失败自动重试次数，默认是 3user = xqzt ; 用哪个用户启动redirect_stderr = true ; 把 stderr 重定向到 stdout，默认 falsestdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）; stdout_logfile = /var/log/supervisor/hello.log 进程状态 12[root@centos7 etc]# supervisorctl group1:hello RUNNING pid 2842, uptime 0:02:53 11. Subprocesses进程状态变化 参考官方文档]]></content>
      <categories>
        <category>Linux</category>
        <category>Supervisor</category>
      </categories>
      <tags>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cd命令]]></title>
    <url>%2F2017%2F05%2F10%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fcd%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文主要记录cd命令的用法 1、作用cd（Change Directory 改变目录）命令用来切换工作目录至dirname。 其中dirName表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的home directory(也就是刚login时所在的目录)。另外，~也表示为home directory的意思，.则是表示目前所在的目录，..则表示目前目录位置的上一层目录。 2、用法1cd (选项) (参数) 3、选项123-p 如果要切换到的目标目录是一个符号连接，直接切换到符号连接指向的目标目录-L 如果要切换的目标目录是一个符号的连接，直接切换到字符连接名代表的目录，而非符号连接所指向的目标目录。 - 当仅实用&quot;-&quot;一个选项时，当前工作目录将被切换到环境变量&quot;OLDPWD&quot;所表示的目录。每当你更改目录时，shell都会将上一个目录位置记录在环境变量OLDPWD中 4、实例1、cd 进入用户主目录；123[root@cent6 init.d]# cd[root@cent6 ~]# pwd/root 2、cd ~ 进入用户主目录；1234[root@cent6 ~]# cd ~[root@cent6 ~]# pwd/root[root@cent6 ~]# 3、cd - 返回进入此目录之前所在的目录1234567[root@cent6 ~]# pwd/root[root@cent6 ~]# cd /home[root@cent6 home]# cd -/root[root@cent6 ~]# pwd/root 4、cd .. 返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）； 12345[root@cent6 init.d]# pwd/etc/init.d[root@cent6 init.d]# cd ..[root@cent6 etc]# pwd/etc 5、cd ../.. 返回上两级目录；12345[root@cent6 init.d]# pwd/etc/init.d[root@cent6 init.d]# cd ../..[root@cent6 /]# pwd/ 6、cd !$ 把上个命令的参数作为cd参数使用123456[root@cent6 /]# ls -ld /media/drwxr-xr-x. 2 root root 4096 Sep 23 2011 /media/[root@cent6 /]# cd !$cd /media/[root@cent6 media]# pwd/media]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>cd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pwd命令]]></title>
    <url>%2F2017%2F05%2F09%2FLinux%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%2Fpwd%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文主要记录pwd命令的用法 1、命令简介pwd（print work directory 打印当前目录）命令以绝对路径的方式显示用户当前工作目录。 2、用法1pwd [-LP] 3、选项12-L --logical 当目录为连接路径时，显示连接路径-P --physical 显示实际物理路径，而非使用连接（link）路径 4、实例4.1 显示当前目录所在路径 pwd12[root@cent6 ~]# pwd/root 4.2 显示当前目录的物理路径 pwd –P123[root@cent6 ~]# cd /etc/init.d [root@cent6 init.d]# pwd -P/etc/rc.d/init.d 4.3 显示当前目录的连接路径：pwd -L123[root@cent6 init.d]# cd /etc/init.d [root@cent6 init.d]# pwd -L/etc/init.d]]></content>
      <categories>
        <category>Linux</category>
        <category>每天一个Linux命令</category>
      </categories>
      <tags>
        <tag>每天一个linux命令</tag>
        <tag>pwd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从已有的组复制搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F08%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E4%BB%8E%E5%B7%B2%E6%9C%89%E7%9A%84%E7%BB%84%E5%A4%8D%E5%88%B6%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何基于已有的MySQL Group Replication，创建一个 Innodb cluster。 1. 已有的MySQL Group Replication 环境信息 ip地址 主机名 server_id 172.17.84.71 mysql001 1 172.17.84.72 mysql002 2 172.17.84.73 mysql003 3 查看组复制当前状态 1234567mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 80af8598-1520-11e7-a8b9-08002730b4d8 | mysql001 | 3306 | ONLINE || group_replication_applier | 8abf4eab-1521-11e7-9cc9-080027b95fc4 | mysql002 | 3306 | ONLINE || group_replication_applier | dcd3068d-15bc-11e7-b264-080027dad0d6 | mysql003 | 3306 | ONLINE | 2. Yum 安装MySQL Shellwget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm rpm -ivh mysql57-community-release-el7-10.noarch.rpm yum install mysql-shell -y 3. 创建cluster通过指定 adoptFromGR option，使用dba.createCluster() 12345678910mysqlsh --uri root@172.17.84.71:3306mysql-js&gt; var cluster = dba.createCluster(&apos;prodCluster&apos;, &#123;adoptFromGR: true&#125;);A new InnoDB cluster will be created on instance &apos;root@172.17.84.7:3306&apos;.Creating InnoDB cluster &apos;prodCluster&apos; on &apos;root@172.17.84.72:3306&apos;...Adding Seed Instance...Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.At least 3 instances are needed for the cluster to be able to withstand up toone server failure. 查看cluster状态 12345678910111213141516171819202122232425262728293031323334mysql-js&gt; var cluster=dba.getCluster()mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;prodCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;172.17.84.71:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;172.17.84.71:3306&quot;: &#123; &quot;address&quot;: &quot;172.17.84.71:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql002:3306&quot;: &#123; &quot;address&quot;: &quot;mysql002:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql003:3306&quot;: &#123; &quot;address&quot;: &quot;mysql003:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 4. 持久化配置文件对于已经在cluster中的实例，可以持久化cluster的配置 1dba.configureLocalInstance(root@localhost:3306) 查看配置文件的变化my.cnf 5.简单测试Failover关闭mysql001实例 1systemctl stop mysqld 重启mysql001实例 1systemctl start mysqld 查看cluster状态,发现Primary Master已经切换到mysql002 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;prodCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;172.17.84.72:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;172.17.84.72:3306&quot;: &#123; &quot;address&quot;: &quot;172.17.84.72:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql001:3306&quot;: &#123; &quot;address&quot;: &quot;mysql001:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;mysql003:3306&quot;: &#123; &quot;address&quot;: &quot;mysql003:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6.createCluster语法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061mysql-js&gt; dba.help(createCluster());ReferenceError: createCluster is not definedmysql-js&gt; dba.help(&apos;createCluster&apos;);Creates a MySQL InnoDB cluster.SYNTAX &lt;Dba&gt;.createCluster(name[, options])WHERE name: The name of the cluster object to be created. options: Dictionary with options that modify the behavior of this function.DESCRIPTIONCreates a MySQL InnoDB cluster taking as seed instance the active globalsession.The options dictionary can contain the next values: - clusterAdminType: defines the type of management to be done on the cluster instances. - multiMaster: boolean value used to define an InnoDB cluster with multiple writable instances. - force: boolean, confirms that the multiMaster option must be applied. - adoptFromGR: boolean value used to create the InnoDB cluster based on existing replication group. - memberSslMode: SSL mode used to configure the members of the cluster. - ipWhitelist: The list of hosts allowed to connect to the instance for group replication.The values for clusterAdminType options include: local, manual, guided or ssh,however, at the moment only local is supported and is used as default value ifthis attribute is not specified.A InnoDB cluster may be setup in two ways: - Single Master: One member of the cluster allows write operations while the rest are in read only mode. - Multi Master: All the members in the cluster support both read and write operations.By default this function create a Single Master cluster, use the multiMasteroption set to true if a Multi Master cluster is required.The memberSslMode option supports these values: - REQUIRED: if used, SSL (encryption) will be enabled for the instances to communicate with other members of the cluster - DISABLED: if used, SSL (encryption) will be disabled - AUTO: if used, SSL (encryption) will be enabled if supported by the instance, otherwise disabledIf memberSslMode is not specified AUTO will be used by default.The ipWhitelist format is a comma separated list of IP addresses or subnet CIDRnotation, for example: 192.168.1.0/24,10.0.0.1. By default the value is set toAUTOMATIC, allowing addresses from the instance private network to beautomatically set for the whitelist. 参考 Creating an InnoDB Cluster From an Existing Group Replication Deployment https://ronniethedba.wordpress.com/2017/04/23/creating-an-innodb-cluster-router-from-an-existing-group-replication-deployment/]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
        <tag>Group Replication</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL Group Replication 部署中遇到的错误]]></title>
    <url>%2F2017%2F05%2F07%2FMySQL%2FGroup%20Replication%2FMySQL%20Group%20Replication%20%E9%83%A8%E7%BD%B2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[本文主要描述了MySQL Group Replication 部署中遇到的错误 错误一 未设置白名单导致的无法启动group_replication错误信息1234567891011121314151617181920212223242526272017-04-24T06:23:09.971308Z 3 [Note] Plugin group_replication reported: &apos;[GCS] Added automatically IP ranges 127.0.0.1/8 to the whitelist&apos;2017-04-24T06:23:09.971480Z 3 [Note] Plugin group_replication reported: &apos;[GCS] SSL was not enabled&apos;2017-04-24T06:23:09.971513Z 3 [Note] Plugin group_replication reported: &apos;Initialized group communication with configuration: group_replication_group_name: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;; group_replication_local_address: &quot;172.17.84.71:33061&quot;; group_replication_group_seeds: &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;; group_replication_bootstrap_group: true; group_replication_poll_spin_loops: 0; group_replication_compression_threshold: 1000000; group_replication_ip_whitelist: &quot;AUTOMATIC&quot;&apos;2017-04-24T06:23:09.972386Z 12 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_applier&apos; executed&apos;. Previous state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T06:23:09.982442Z 15 [Note] Slave SQL thread for channel &apos;group_replication_applier&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql001-relay-bin-group_replication_applier.000001&apos; position: 42017-04-24T06:23:09.982441Z 3 [Note] Plugin group_replication reported: &apos;Group Replication applier module successfully initialized!&apos;2017-04-24T06:23:09.982618Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is set to 7&apos;2017-04-24T06:23:09.982637Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is set to 1&apos;2017-04-24T06:23:09.982841Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_init&apos;2017-04-24T06:23:09.982957Z 0 [Note] Plugin group_replication reported: &apos;Successfully bound to 0.0.0.0:33061 (socket=80).&apos;2017-04-24T06:23:09.983104Z 0 [Note] Plugin group_replication reported: &apos;Successfully set listen backlog to 32 (socket=80)!&apos;2017-04-24T06:23:09.983149Z 0 [Note] Plugin group_replication reported: &apos;Successfully unblocked socket (socket=80)!&apos;2017-04-24T06:23:09.983232Z 0 [Note] Plugin group_replication reported: &apos;Ready to accept incoming connections on 0.0.0.0:33061 (socket=80)!&apos;2017-04-24T06:23:09.983302Z 0 [Note] Plugin group_replication reported: &apos;connecting to 172.17.84.71 33061&apos;2017-04-24T06:23:09.983432Z 0 [Note] Plugin group_replication reported: &apos;client connected to 172.17.84.71 33061 fd 83&apos;2017-04-24T06:23:09.983524Z 0 [Warning] Plugin group_replication reported: &apos;[GCS] Connection attempt from IP address 172.17.84.71 refused. Address is not in the IP whitelist.&apos;2017-04-24T06:23:09.983620Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] Error connecting to the local group communication engine instance.&apos;2017-04-24T06:23:09.983647Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_exit&apos;2017-04-24T06:23:09.983926Z 0 [Note] Plugin group_replication reported: &apos;Exiting xcom thread&apos;2017-04-24T06:23:11.014814Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] The member was unable to join the group. Local port: 33061&apos;2017-04-24T06:24:09.991677Z 3 [ERROR] Plugin group_replication reported: &apos;Timeout on wait for view after joining group&apos;2017-04-24T06:24:09.991847Z 3 [Note] Plugin group_replication reported: &apos;Requesting to leave the group despite of not being a member&apos;2017-04-24T06:24:09.991903Z 3 [ERROR] Plugin group_replication reported: &apos;[GCS] The member is leaving a group without being on one.&apos;2017-04-24T06:24:09.992323Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is reset to 1&apos;2017-04-24T06:24:09.992354Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is reset to 1&apos;2017-04-24T06:24:09.992922Z 15 [Note] Error reading relay log event for channel &apos;group_replication_applier&apos;: slave SQL thread was killed2017-04-24T06:24:09.993527Z 12 [Note] Plugin group_replication reported: &apos;The group replication applier thread was killed&apos; 解决办法基于网段或者IP 指定白名单，可以在线动态修改 12set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;set global group_replication_ip_whitelist = &apos;172.17.84.71/24&apos;; 或者添加到my.cnf中 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 错误二 无法解析主机名导致member状态一直未recoving错误信息通过SELECT * FROM performance_schema.replication_group_members;查询，发现MEMBER_STATE一直是recoving 1234567891011121314151617181920212017-04-24T07:01:19.864784Z 0 [Note] Plugin group_replication reported: &apos;Starting group replication recovery with view_id 14930159987057432:2&apos;2017-04-24T07:01:19.865335Z 19 [Note] Plugin group_replication reported: &apos;Establishing group recovery connection with a possible donor. Attempt 1/10&apos;2017-04-24T07:01:19.871742Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:01:19.881203Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 60b61f19-289f-11e7-b97d-08002730b4d8 at mysql001 port: 3306.&apos;2017-04-24T07:01:19.881586Z 21 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:01:19.882339Z 22 [Note] Slave SQL thread for channel &apos;group_replication_recovery&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql002-relay-bin-group_replication_recovery.000001&apos; position: 42017-04-24T07:01:19.883547Z 21 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql001:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:01:19.883573Z 21 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:01:19.883582Z 21 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T07:01:19.883861Z 19 [ERROR] Plugin group_replication reported: &apos;There was an error when connecting to the donor server. Check group replication recovery&apos;s connection credentials.&apos;2017-04-24T07:01:19.884138Z 19 [Note] Plugin group_replication reported: &apos;Retrying group recovery connection with another donor. Attempt 2/10&apos;2017-04-24T07:01:55.338092Z 0 [Note] Plugin group_replication reported: &apos;getstart group_id 4317e324&apos;2017-04-24T07:01:57.362663Z 0 [Note] Plugin group_replication reported: &apos;Marking group replication view change with view_id 14930159987057432:3&apos;2017-04-24T07:01:57.422909Z 0 [Note] Plugin group_replication reported: &apos;The member with address mysql003:3306 was declared online within the replication group&apos;2017-04-24T07:02:19.884808Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql003&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:02:19.890519Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 164b8061-28ba-11e7-9a51-080027dad0d6 at mysql003 port: 3306.&apos;2017-04-24T07:02:19.891514Z 26 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:02:19.893156Z 26 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql003:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:02:19.893186Z 26 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:02:19.893194Z 26 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T0 解决办法方法一 配置hosts 123172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 方法二 或者在配置文件my.cnf使用report_host=ip，显示指定使用IP，而非默认的主机名 错误三：mysql初始化，修改root密码，没有禁用日志，导致各节点Executed_Gtid_Set不同错误信息修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错: 12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 解决办法方法一： 1234567891011121314151617181920mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec) 方法二1set global group_replication_allow_local_disjoint_gtids_join=ON; 方法三 如果是全新的实例，可以通过reset master清空Executed_Gtid_Set 123456789mysql&gt;reset mastermysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000010 Position: 1486 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-101 row in set (0.00 sec)]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Deploying Group Replication in Single-Primary Mode]]></title>
    <url>%2F2017%2F05%2F06%2FMySQL%2FGroup%20Replication%2FDeploying%20Group%20Replication%20in%20Single-Primary%20Mode%2F</url>
    <content type="text"><![CDATA[本文描述了3实例MySQL Group Replication的搭建过程 一、环境信息 ip地址 主机名 server_id 172.17.84.71 mysql001 1 172.17.84.72 mysql002 2 172.17.84.73 mysql003 3 二、搭建前准备 关闭selinux(略) 开启端口3306 33061 12345678910111213##Addfirewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=33061/tcp##Reloadfirewall-cmd --reload ## 检查是否生效firewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --query-port=33061/tcp ## 列出所有的开放端口firewall-cmd --list-all 配置/etc/hosts ip和主机名对应关系 1234[root@mysql003 ~]# cat /etc/hosts172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 三、初始化三个数据库实例3.1 初始化3个mysql实例mysql001配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@mysql001 ~]# cat /usr/local/mysql/etc/my.cnf[client]port = 3306socket = /usr/local/mysql/run/mysql.sock[mysqld]port = 3306socket = /usr/local/mysql/run/mysql.sockpid_file = /usr/local/mysql/run/mysql.piddatadir = /usr/local/mysql/datadefault_storage_engine = InnoDBmax_allowed_packet = 512Mmax_connections = 2048open_files_limit = 65535lower_case_table_names=1character-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=&apos;SET NAMES utf8mb4&apos;innodb_buffer_pool_size = 1024Minnodb_log_file_size = 2048Minnodb_file_per_table = 1innodb_flush_log_at_trx_commit = 0key_buffer_size = 64Mlog-error = /usr/local/mysql/log/mysql_error.loglog-bin = /usr/local/mysql/binlogs/mysql-binslow_query_log = 1slow_query_log_file = /usr/local/mysql/log/mysql_slow_query.loglong_query_time = 5tmp_table_size = 32Mmax_heap_table_size = 32Mquery_cache_type = 0query_cache_size = 0server-id=1gtid_mode = ONenforce_gtid_consistency = ONbinlog_checksum=NONElog_slave_updates = ONmaster_info_repository = TABLErelay_log_info_repository = TABLEtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;loose-group_replication_start_on_boot=offloose-group_replication_local_address= &quot;172.17.84.71:33061&quot;loose-group_replication_group_seeds= &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;loose-group_replication_bootstrap_group= offloose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 参数说明见Group Replication System Variables 初始化实例 并启动 12mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/datasystemctl start mysqld 到错误日志文件中找到临时密码进行登录，登录后修改临时密码12[root@mysql001 /]# grep &apos;temporary password&apos; /usr/local/mysql/log/mysql_error.log2017-04-24T03:37:44.558511Z 1 [Note] A temporary password is generated for root@localhost: 3yFK,#qtjAl; 修改root密码1234567891011121314151617181920212223mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec)ERROR:No query specified 修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错。全新的环境可以通过reset master解决这个问题。12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 四、配置MGR4.1 创建复制账号1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@&apos;%&apos;;Query OK, 0 rows affected (0.01 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 4.2 使用change master命令配置server在下次需要从其他成员恢复其状态时，使用group_replication_recovery复制通道的给定凭据12mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;;Query OK, 0 rows affected, 2 warnings (0.02 sec) 4.3 安装复制组插件12mysql&gt; install plugin group_replication soname &apos;group_replication.so&apos;;Query OK, 0 rows affected (0.26 sec) 4.4 查看插件是否安装成功1234567891011mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+| binlog | ACTIVE | STORAGE ENGINE | NULL | GPL || mysql_native_password | ACTIVE | AUTHENTICATION | NULL | GPL |...| group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+ 4.5、配置引导组，并启动GROUP_REPLICATION此引导应仅有单个server独立完成，该server启动组并且只启动一次123456#### 设置group_replication_bootstrap_group 只需要在mysql001上执行一次，另外两个实例不执行这句mysql&gt; SET GLOBAL group_replication_bootstrap_group=ON; Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;ERROR 3092 (HY000): The server is not configured properly to be an active member of the group. Please see more details on error log. 查看log，发现是白名单问题导致的，my.cnf添加白名单后重新启动组复制12345678mysql&gt; set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec)mysql&gt; SET GLOBAL group_replication_bootstrap_group=OFF;Query OK, 0 rows affected (0.00 sec) 直接添加白名单到my.cnf,防止下次启动再重新问题 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 4.6 查看状态12345678910111213141516mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 60b61f19-289f-11e7-b97d-08002730b4d8 | mysql001 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+1 row in set (0.01 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000003 Position: 434 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:11 row in set (0.00 sec) 4.7 向组中添加实例mysql002 mysql003mysql002 mysql003的操作和mysql001相同，除了不需要SET GLOBAL group_replication_bootstrap_group=ON; 12mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec) 查看最终状态123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 80af8598-1520-11e7-a8b9-08002730b4d8 | mysql001 | 3306 | ONLINE || group_replication_applier | 8abf4eab-1521-11e7-9cc9-080027b95fc4 | mysql002 | 3306 | ONLINE || group_replication_applier | dcd3068d-15bc-11e7-b264-080027dad0d6 | mysql003 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec) 4.8 修改 group_replication_start_on_boot=on1loose-group_replication_start_on_boot=on 参考 Deploying Group Replication in Single-Primary Mode http://www.niugebbs.com/HRT152/1244148.html http://blog.csdn.net/dbaxiaosa/article/details/70226540 MySQL Group Replication多机多实例安装配置 MySQL Group Replication 9节点快速部署]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[多节点3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F05%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%20%E5%A4%9A%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 ip地址 主机名 server_id 192.168.0.101 mysql001 1 192.168.0.102 mysql002 2 192.168.0.103 mysql003 3 192.168.0.104 mysql-router 主要步骤如图所示 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0;此步骤主要是避免Executed_Gtid_Set不一致 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password('admin_123');Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 一句话执行 1mysql -uroot -padmin_123 -e "SET SQL_LOG_BIN=0;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION; flush privileges; SET SQL_LOG_BIN=1" 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.checkInstanceConfiguration('root@localhost:3306')mysql-js&gt; dba.configureLocalInstance('root@localhost:3306') 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3306/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 1shell&gt; systemctl restart mysqld 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. 创建 InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3306: 123mysql-js&gt; \connect root@192.168.0.101:3306或者mysql-js&gt; shell.connect(&apos;root@192.168.0.101:3306&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5.添加 Instances 至 InnoDB Cluster配置/etc/hosts 123192.168.0.101 mysql001192.168.0.102 mysql002192.168.0.103 mysql003 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.101:3306mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.102:3306&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3306&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.101:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3306’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@192.168.0.103:3306 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.101:3306,mysql://192.168.0.102:3306,mysql://192.168.0.103:3306user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 192.168.0.101:3306 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现192.168.0.102:3306已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqldmysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.101:3306&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment MySQL InnoDB Cluster – Real-World Cluster Tutorial for OEL, Fedora, RHEL and CentOS]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单机3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F04%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E5%8D%95%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0; 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;admin_123&apos; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;) 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3301/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 123shell&gt; systemctl restart mysqld@3301shell&gt; systemctl restart mysqld@3302shell&gt; systemctl restart mysqld@3303 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3301: 123mysql-js&gt; \connect root@192.168.0.103:3301或者mysql-js&gt; shell.connect(&apos;root@192.168.0.103:3301&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.103:3301mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3302&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3303&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3301&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3301’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)mysql-js&gt; \connect root@localhost:3302mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3302&apos;)mysql-js&gt; \connect root@localhost:3303mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3303&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3301 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.103:3301,mysql://192.168.0.103:3302,mysql://192.168.0.103:3303user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3301 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 3301 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3302 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3302实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqld@3301mysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.103:3301&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沙盒实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F03%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F3%E6%B2%99%E7%9B%92%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过三个沙盒msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more sandbox MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 2. 创建三个沙盒实例Start MySQL Shell 1shell&gt; mysqlsh MySQL Shell provides two scripting languages: JavaScript and Python. Throughout this guide MySQL Shell is used primarily in JavaScript mode . When MySQL Shell starts it is in JavaScript mode by default. You switch into JavaScript mode, Python mode and SQL mode using the commands \js, \py, and \sql. Ensure you are in JavaScript mode by issuing the \js command, then execute: 123mysql-js&gt; dba.deploySandboxInstance(3310)mysql-js&gt; dba.deploySandboxInstance(3320)mysql-js&gt; dba.deploySandboxInstance(3330) 3. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3310: 123mysql-js&gt; \connect root@localhost:3310或者mysql-js&gt; shell.connect(&apos;root@localhost:3310&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 4. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 1mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3320&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3330&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3310&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 5. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3310 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:testCluster]router_id=3bootstrap_server_addresses=mysql://localhost:3310,mysql://localhost:3320,mysql://localhost:3330user=mysql_router3_c3j5z9t7rjgkmetadata_cluster=testClusterttl=300[routing:testCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:testCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:testCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:testCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3310 |+--------+1 row in set (0.00 sec) 6. Testing Failoverkilling the PRIMARY instance 3310 1mysql-js&gt; dba.killSandboxInstance(3310) 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3330 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3320实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123mysql-js&gt; dba.startSandboxInstance(3310)mysql-js&gt; cluster.rejoinInstance(&apos;root@localhost:3310&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Getting Started with InnoDB Cluster]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[InnoDB Cluster简介]]></title>
    <url>%2F2017%2F05%2F02%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、InnoDB Cluster简介前几天 Mysql 团队愉快的发布了 InnoDB Cluster 的 GA（General Availability 正式发布） 版本 InnoDB Cluster 是 Mysql 的一套完整的高可用解决方案 MySQL InnoDB cluster is a collection of products that work together to provide a complete High Availability solution for MySQL. InnoDB Cluster 由下面3个核心组件构成： MySQL Shell 通过内置的 AdminAPI 来创建和管理整个 InnoDB Clusters Includes the AdminAPI, which enables you to script the creation and administration of an InnoDB cluster, using either JavaScript or Python. MySQL Router 缓存 InnoDB cluster 的元数据，负责把 client 的 read/write 请求路由到当前的主数据库节点，还可以对 client 的请求进行负载均衡，并且在主数据库节点出现故障时，保证 client 的请求被路由到新的主服务器节点 Caches the metadata of the InnoDB cluster and routes read/write client requests to the current primary. If the primary instance becomes unavailable, MySQL Router automatically routes client requests to a promoted secondary (the new primary). Group Replication MySQL Server 5.7.17 or higher. 可以把数据同步到集群内的所有成员中，并支持 容错 、 自动故障转移 、 灵活扩展 等重要特性 This provides the MySQL Group Replication mechanism to allow data to be replicated within the cluster, with built-in failover. Group Replication ​]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[今天是五一劳动节，我的新Blog诞生了。希望在新的一年里，能在此认认真真的记录自己的成长！ 目标：每天一篇学习笔记]]></content>
  </entry>
</search>