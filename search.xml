<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL Group Replication 部署中遇到的错误]]></title>
    <url>%2F2017%2F05%2F07%2FMySQL%2FGroup%20Replication%2FMySQL%20Group%20Replication%20%E9%83%A8%E7%BD%B2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[本文主要描述了MySQL Group Replication 部署中遇到的错误 错误一 未设置白名单导致的无法启动group_replication错误信息1234567891011121314151617181920212223242526272017-04-24T06:23:09.971308Z 3 [Note] Plugin group_replication reported: &apos;[GCS] Added automatically IP ranges 127.0.0.1/8 to the whitelist&apos;2017-04-24T06:23:09.971480Z 3 [Note] Plugin group_replication reported: &apos;[GCS] SSL was not enabled&apos;2017-04-24T06:23:09.971513Z 3 [Note] Plugin group_replication reported: &apos;Initialized group communication with configuration: group_replication_group_name: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;; group_replication_local_address: &quot;172.17.84.71:33061&quot;; group_replication_group_seeds: &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;; group_replication_bootstrap_group: true; group_replication_poll_spin_loops: 0; group_replication_compression_threshold: 1000000; group_replication_ip_whitelist: &quot;AUTOMATIC&quot;&apos;2017-04-24T06:23:09.972386Z 12 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_applier&apos; executed&apos;. Previous state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;&lt;NULL&gt;&apos;, master_port= 0, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T06:23:09.982442Z 15 [Note] Slave SQL thread for channel &apos;group_replication_applier&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql001-relay-bin-group_replication_applier.000001&apos; position: 42017-04-24T06:23:09.982441Z 3 [Note] Plugin group_replication reported: &apos;Group Replication applier module successfully initialized!&apos;2017-04-24T06:23:09.982618Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is set to 7&apos;2017-04-24T06:23:09.982637Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is set to 1&apos;2017-04-24T06:23:09.982841Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_init&apos;2017-04-24T06:23:09.982957Z 0 [Note] Plugin group_replication reported: &apos;Successfully bound to 0.0.0.0:33061 (socket=80).&apos;2017-04-24T06:23:09.983104Z 0 [Note] Plugin group_replication reported: &apos;Successfully set listen backlog to 32 (socket=80)!&apos;2017-04-24T06:23:09.983149Z 0 [Note] Plugin group_replication reported: &apos;Successfully unblocked socket (socket=80)!&apos;2017-04-24T06:23:09.983232Z 0 [Note] Plugin group_replication reported: &apos;Ready to accept incoming connections on 0.0.0.0:33061 (socket=80)!&apos;2017-04-24T06:23:09.983302Z 0 [Note] Plugin group_replication reported: &apos;connecting to 172.17.84.71 33061&apos;2017-04-24T06:23:09.983432Z 0 [Note] Plugin group_replication reported: &apos;client connected to 172.17.84.71 33061 fd 83&apos;2017-04-24T06:23:09.983524Z 0 [Warning] Plugin group_replication reported: &apos;[GCS] Connection attempt from IP address 172.17.84.71 refused. Address is not in the IP whitelist.&apos;2017-04-24T06:23:09.983620Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] Error connecting to the local group communication engine instance.&apos;2017-04-24T06:23:09.983647Z 0 [Note] Plugin group_replication reported: &apos;state 4257 action xa_exit&apos;2017-04-24T06:23:09.983926Z 0 [Note] Plugin group_replication reported: &apos;Exiting xcom thread&apos;2017-04-24T06:23:11.014814Z 0 [ERROR] Plugin group_replication reported: &apos;[GCS] The member was unable to join the group. Local port: 33061&apos;2017-04-24T06:24:09.991677Z 3 [ERROR] Plugin group_replication reported: &apos;Timeout on wait for view after joining group&apos;2017-04-24T06:24:09.991847Z 3 [Note] Plugin group_replication reported: &apos;Requesting to leave the group despite of not being a member&apos;2017-04-24T06:24:09.991903Z 3 [ERROR] Plugin group_replication reported: &apos;[GCS] The member is leaving a group without being on one.&apos;2017-04-24T06:24:09.992323Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_increment is reset to 1&apos;2017-04-24T06:24:09.992354Z 3 [Note] Plugin group_replication reported: &apos;auto_increment_offset is reset to 1&apos;2017-04-24T06:24:09.992922Z 15 [Note] Error reading relay log event for channel &apos;group_replication_applier&apos;: slave SQL thread was killed2017-04-24T06:24:09.993527Z 12 [Note] Plugin group_replication reported: &apos;The group replication applier thread was killed&apos; 解决办法基于网段或者IP 指定白名单，可以在线动态修改 12set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;set global group_replication_ip_whitelist = &apos;172.17.84.71/24&apos;; 或者添加到my.cnf中 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 错误二 无法解析主机名导致member状态一直未recoving错误信息通过SELECT * FROM performance_schema.replication_group_members;查询，发现MEMBER_STATE一直是recoving 1234567891011121314151617181920212017-04-24T07:01:19.864784Z 0 [Note] Plugin group_replication reported: &apos;Starting group replication recovery with view_id 14930159987057432:2&apos;2017-04-24T07:01:19.865335Z 19 [Note] Plugin group_replication reported: &apos;Establishing group recovery connection with a possible donor. Attempt 1/10&apos;2017-04-24T07:01:19.871742Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:01:19.881203Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 60b61f19-289f-11e7-b97d-08002730b4d8 at mysql001 port: 3306.&apos;2017-04-24T07:01:19.881586Z 21 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:01:19.882339Z 22 [Note] Slave SQL thread for channel &apos;group_replication_recovery&apos; initialized, starting replication in log &apos;FIRST&apos; at position 0, relay log &apos;./mysql002-relay-bin-group_replication_recovery.000001&apos; position: 42017-04-24T07:01:19.883547Z 21 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql001:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:01:19.883573Z 21 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:01:19.883582Z 21 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T07:01:19.883861Z 19 [ERROR] Plugin group_replication reported: &apos;There was an error when connecting to the donor server. Check group replication recovery&apos;s connection credentials.&apos;2017-04-24T07:01:19.884138Z 19 [Note] Plugin group_replication reported: &apos;Retrying group recovery connection with another donor. Attempt 2/10&apos;2017-04-24T07:01:55.338092Z 0 [Note] Plugin group_replication reported: &apos;getstart group_id 4317e324&apos;2017-04-24T07:01:57.362663Z 0 [Note] Plugin group_replication reported: &apos;Marking group replication view change with view_id 14930159987057432:3&apos;2017-04-24T07:01:57.422909Z 0 [Note] Plugin group_replication reported: &apos;The member with address mysql003:3306 was declared online within the replication group&apos;2017-04-24T07:02:19.884808Z 19 [Note] &apos;CHANGE MASTER TO FOR CHANNEL &apos;group_replication_recovery&apos; executed&apos;. Previous state master_host=&apos;mysql001&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;. New state master_host=&apos;mysql003&apos;, master_port= 3306, master_log_file=&apos;&apos;, master_log_pos= 4, master_bind=&apos;&apos;.2017-04-24T07:02:19.890519Z 19 [Note] Plugin group_replication reported: &apos;Establishing connection to a group replication recovery donor 164b8061-28ba-11e7-9a51-080027dad0d6 at mysql003 port: 3306.&apos;2017-04-24T07:02:19.891514Z 26 [Warning] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the &apos;START SLAVE Syntax&apos; in the MySQL Manual for more information.2017-04-24T07:02:19.893156Z 26 [ERROR] Slave I/O for channel &apos;group_replication_recovery&apos;: error connecting to master &apos;rpl_user@mysql003:3306&apos; - retry-time: 60 retries: 1, Error_code: 20052017-04-24T07:02:19.893186Z 26 [Note] Slave I/O thread for channel &apos;group_replication_recovery&apos; killed while connecting to master2017-04-24T07:02:19.893194Z 26 [Note] Slave I/O thread exiting for channel &apos;group_replication_recovery&apos;, read up to log &apos;FIRST&apos;, position 42017-04-24T0 解决办法方法一 配置hosts 123172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 方法二 或者在配置文件my.cnf使用report_host=ip，显示指定使用IP，而非默认的主机名 错误三：mysql初始化，修改root密码，没有禁用日志，导致各节点Executed_Gtid_Set不同错误信息修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错: 12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 解决办法方法一： 1234567891011121314151617181920mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec) 方法二1set global group_replication_allow_local_disjoint_gtids_join=ON; 方法三 如果是全新的实例，可以通过reset master清空Executed_Gtid_Set 123456789mysql&gt;reset mastermysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000010 Position: 1486 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-101 row in set (0.00 sec)]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Deploying Group Replication in Single-Primary Mode]]></title>
    <url>%2F2017%2F05%2F06%2FMySQL%2FGroup%20Replication%2FDeploying%20Group%20Replication%20in%20Single-Primary%20Mode%2F</url>
    <content type="text"><![CDATA[本文描述了3实例MySQL Group Replication的搭建过程 一、环境信息 ip地址 主机名 server_id 172.17.84.71 mysql001 1 172.17.84.72 mysql002 2 172.17.84.73 mysql003 3 二、搭建前准备 关闭selinux(略) 开启端口3306 33061 12345678910111213##Addfirewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=33061/tcp##Reloadfirewall-cmd --reload ## 检查是否生效firewall-cmd --zone=public --query-port=3306/tcpfirewall-cmd --zone=public --query-port=33061/tcp ## 列出所有的开放端口firewall-cmd --list-all 配置/etc/hosts ip和主机名对应关系 1234[root@mysql003 ~]# cat /etc/hosts172.17.84.71 mysql001172.17.84.72 msyql002172.17.84.73 mysql003 三、初始化三个数据库实例3.1 初始化3个mysql实例mysql001配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@mysql001 ~]# cat /usr/local/mysql/etc/my.cnf[client]port = 3306socket = /usr/local/mysql/run/mysql.sock[mysqld]port = 3306socket = /usr/local/mysql/run/mysql.sockpid_file = /usr/local/mysql/run/mysql.piddatadir = /usr/local/mysql/datadefault_storage_engine = InnoDBmax_allowed_packet = 512Mmax_connections = 2048open_files_limit = 65535lower_case_table_names=1character-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=&apos;SET NAMES utf8mb4&apos;innodb_buffer_pool_size = 1024Minnodb_log_file_size = 2048Minnodb_file_per_table = 1innodb_flush_log_at_trx_commit = 0key_buffer_size = 64Mlog-error = /usr/local/mysql/log/mysql_error.loglog-bin = /usr/local/mysql/binlogs/mysql-binslow_query_log = 1slow_query_log_file = /usr/local/mysql/log/mysql_slow_query.loglong_query_time = 5tmp_table_size = 32Mmax_heap_table_size = 32Mquery_cache_type = 0query_cache_size = 0server-id=1gtid_mode = ONenforce_gtid_consistency = ONbinlog_checksum=NONElog_slave_updates = ONmaster_info_repository = TABLErelay_log_info_repository = TABLEtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;loose-group_replication_start_on_boot=offloose-group_replication_local_address= &quot;172.17.84.71:33061&quot;loose-group_replication_group_seeds= &quot;172.17.84.71:33061,172.17.84.72:33061,172.17.84.73:33061&quot;loose-group_replication_bootstrap_group= offloose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 参数说明见Group Replication System Variables 初始化实例 并启动 12mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/datasystemctl start mysqld 到错误日志文件中找到临时密码进行登录，登录后修改临时密码12[root@mysql001 /]# grep &apos;temporary password&apos; /usr/local/mysql/log/mysql_error.log2017-04-24T03:37:44.558511Z 1 [Note] A temporary password is generated for root@localhost: 3yFK,#qtjAl; 修改root密码1234567891011121314151617181920212223mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000002 Position: 150 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set:1 row in set (0.00 sec)ERROR:No query specified 修改密码操作必须设置binlog不记录，执行后再打开，否则会引起START GROUP_REPLICATION执行报错。全新的环境可以通过reset master解决这个问题。12[ERROR] Plugin group_replication reported: &apos;The member contains transactions not present in the group. The member will now exit the group.&apos;[Note] Plugin group_replication reported: &apos;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&apos; 四、配置MGR4.1 创建复制账号1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@&apos;%&apos;;Query OK, 0 rows affected (0.01 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&apos;%&apos; IDENTIFIED BY &apos;rpl_pass&apos;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 4.2 使用change master命令配置server在下次需要从其他成员恢复其状态时，使用group_replication_recovery复制通道的给定凭据12mysql&gt; CHANGE MASTER TO MASTER_USER=&apos;rpl_user&apos;, MASTER_PASSWORD=&apos;rpl_pass&apos; FOR CHANNEL &apos;group_replication_recovery&apos;;Query OK, 0 rows affected, 2 warnings (0.02 sec) 4.3 安装复制组插件12mysql&gt; install plugin group_replication soname &apos;group_replication.so&apos;;Query OK, 0 rows affected (0.26 sec) 4.4 查看插件是否安装成功1234567891011mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+| binlog | ACTIVE | STORAGE ENGINE | NULL | GPL || mysql_native_password | ACTIVE | AUTHENTICATION | NULL | GPL |...| group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+ 4.5、配置引导组，并启动GROUP_REPLICATION此引导应仅有单个server独立完成，该server启动组并且只启动一次123456#### 设置group_replication_bootstrap_group 只需要在mysql001上执行一次，另外两个实例不执行这句mysql&gt; SET GLOBAL group_replication_bootstrap_group=ON; Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;ERROR 3092 (HY000): The server is not configured properly to be an active member of the group. Please see more details on error log. 查看log，发现是白名单问题导致的，my.cnf添加白名单后重新启动组复制12345678mysql&gt; set global group_replication_ip_whitelist = &apos;172.17.84.71,172.17.84.72,172.17.84.73&apos;;Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec)mysql&gt; SET GLOBAL group_replication_bootstrap_group=OFF;Query OK, 0 rows affected (0.00 sec) 直接添加白名单到my.cnf,防止下次启动再重新问题 1loose-group_replication_ip_whitelist=&apos;172.17.84.71,172.17.84.72,172.17.84.73&apos; 4.6 查看状态12345678910111213141516mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 60b61f19-289f-11e7-b97d-08002730b4d8 | mysql001 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+1 row in set (0.01 sec)mysql&gt; show master status \G;*************************** 1. row *************************** File: mysql-bin.000003 Position: 434 Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:11 row in set (0.00 sec) 4.7 向组中添加实例mysql002 mysql003mysql002 mysql003的操作和mysql001相同，除了不需要SET GLOBAL group_replication_bootstrap_group=ON; 12mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (1.02 sec) 查看最终状态123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | 80af8598-1520-11e7-a8b9-08002730b4d8 | mysql001 | 3306 | ONLINE || group_replication_applier | 8abf4eab-1521-11e7-9cc9-080027b95fc4 | mysql002 | 3306 | ONLINE || group_replication_applier | dcd3068d-15bc-11e7-b264-080027dad0d6 | mysql003 | 3306 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec) 4.8 修改 group_replication_start_on_boot=on1loose-group_replication_start_on_boot=on 参考 Deploying Group Replication in Single-Primary Mode http://www.niugebbs.com/HRT152/1244148.html http://blog.csdn.net/dbaxiaosa/article/details/70226540 MySQL Group Replication多机多实例安装配置 MySQL Group Replication 9节点快速部署]]></content>
      <categories>
        <category>MySQL</category>
        <category>Group Replication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[多节点3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F05%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%20%E5%A4%9A%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 ip地址 主机名 server_id 192.168.0.101 mysql001 1 192.168.0.102 mysql002 2 192.168.0.103 mysql003 3 192.168.0.104 mysql-router 主要步骤如图所示 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0;此步骤主要是避免Executed_Gtid_Set不一致 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password('admin_123');Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 一句话执行 1mysql -uroot -padmin_123 -e "SET SQL_LOG_BIN=0;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'admin_123' WITH GRANT OPTION; flush privileges; SET SQL_LOG_BIN=1" 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.checkInstanceConfiguration('root@localhost:3306')mysql-js&gt; dba.configureLocalInstance('root@localhost:3306') 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3306/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 1shell&gt; systemctl restart mysqld 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3306&apos;)Please provide the password for &apos;root@localhost:3306&apos;: Validating instance...The instance &apos;localhost:3306&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. 创建 InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3306: 123mysql-js&gt; \connect root@192.168.0.101:3306或者mysql-js&gt; shell.connect(&apos;root@192.168.0.101:3306&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5.添加 Instances 至 InnoDB Cluster配置/etc/hosts 123192.168.0.101 mysql001192.168.0.102 mysql002192.168.0.103 mysql003 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.101:3306mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.102:3306&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3306&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.101:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3306’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;)mysql-js&gt; \connect root@localhost:3306mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3306&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@192.168.0.103:3306 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.101:3306,mysql://192.168.0.102:3306,mysql://192.168.0.103:3306user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 192.168.0.101:3306 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3306 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现192.168.0.102:3306已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.101:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.102:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqldmysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.101:3306&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.102:3306&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.101:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.102:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3306&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3306&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment MySQL InnoDB Cluster – Real-World Cluster Tutorial for OEL, Fedora, RHEL and CentOS]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单机3实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F04%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F%E5%8D%95%E6%9C%BA3%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过单机三个msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. 安装3个mysql实例注意：修改root密码时候设置SQL_LOG_BIN=0; 1234567891011121314mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set password=password(&apos;admin_123&apos;);Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;admin_123&apos; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec) 2. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 3. Configuring the Instance检查并配置3个数据库实例 123mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;) 详细过程如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is not valid for Cluster usage.The following issues were encountered: - Some configuration options need to be fixed.+----------------------------------+---------------+----------------+--------------------------------------------------+| Variable | Current Value | Required Value | Note |+----------------------------------+---------------+----------------+--------------------------------------------------+| binlog_checksum | CRC32 | NONE | Update the server variable or restart the server || enforce_gtid_consistency | OFF | ON | Restart the server || gtid_mode | OFF | ON | Restart the server || log_slave_updates | 0 | ON | Restart the server || master_info_repository | FILE | TABLE | Restart the server || relay_log_info_repository | FILE | TABLE | Restart the server || transaction_write_set_extraction | OFF | XXHASH64 | Restart the server |+----------------------------------+---------------+----------------+--------------------------------------------------+Please fix these issues , restart the serverand try again.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;server_update&quot;, &quot;current&quot;: &quot;CRC32&quot;, &quot;option&quot;: &quot;binlog_checksum&quot;, &quot;required&quot;: &quot;NONE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125;mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /usr/local/mysql/mysql_3301/etc/my.cnfValidating instance...The configuration has been updated but it is required to restart the server.&#123; &quot;config_errors&quot;: [ &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;enforce_gtid_consistency&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;gtid_mode&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;0&quot;, &quot;option&quot;: &quot;log_slave_updates&quot;, &quot;required&quot;: &quot;ON&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;master_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;FILE&quot;, &quot;option&quot;: &quot;relay_log_info_repository&quot;, &quot;required&quot;: &quot;TABLE&quot; &#125;, &#123; &quot;action&quot;: &quot;restart&quot;, &quot;current&quot;: &quot;OFF&quot;, &quot;option&quot;: &quot;transaction_write_set_extraction&quot;, &quot;required&quot;: &quot;XXHASH64&quot; &#125; ], &quot;errors&quot;: [], &quot;restart_required&quot;: true, &quot;status&quot;: &quot;error&quot;&#125; 重启3个数据库实例 123shell&gt; systemctl restart mysqld@3301shell&gt; systemctl restart mysqld@3302shell&gt; systemctl restart mysqld@3303 重新检查3个实例，确保结果ok 12345678mysql-js&gt; dba.checkInstanceConfiguration(&apos;root@localhost:3301&apos;)Please provide the password for &apos;root@localhost:3301&apos;: Validating instance...The instance &apos;localhost:3301&apos; is valid for Cluster usage&#123; &quot;status&quot;: &quot;ok&quot;&#125; 4. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3301: 123mysql-js&gt; \connect root@192.168.0.103:3301或者mysql-js&gt; shell.connect(&apos;root@192.168.0.103:3301&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 5. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 12mysql-js&gt; \connect root@192.168.0.103:3301mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3302&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@192.168.0.103:3303&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3301&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 6. 持久化配置文件已经在cluster中的实例，第二次运行dba.configureLocalInstance(‘root@localhost:3301’)，会将配置cluster的配置持久化到my.cnf 必须使用localhost连接后在每个实例单独执行 123456mysql-js&gt; \connect root@localhost:3301mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3301&apos;)mysql-js&gt; \connect root@localhost:3302mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3302&apos;)mysql-js&gt; \connect root@localhost:3303mysql-js&gt; dba.configureLocalInstance(&apos;root@localhost:3303&apos;) 7. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3301 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:devCluster]router_id=1bootstrap_server_addresses=mysql://192.168.0.103:3301,mysql://192.168.0.103:3302,mysql://192.168.0.103:3303user=mysql_router1_m55oiq8bjdrymetadata_cluster=devClusterttl=300[routing:devCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:devCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:devCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://devCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:devCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://devCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3301 |+--------+1 row in set (0.00 sec) 8. Testing Failoverkilling the PRIMARY instance 3301 1systemctl stop mysqld@3301 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3302 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3302实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123systemctl start mysqld@3301mysql-js&gt; cluster.rejoinInstance(&apos;root@192.168.0.103:3301&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;devCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;192.168.0.103:3302&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;192.168.0.103:3301&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3301&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3302&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3302&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;192.168.0.103:3303&quot;: &#123; &quot;address&quot;: &quot;192.168.0.103:3303&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Working with a Production Deployment]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沙盒实例搭建InnoDB Cluster环境]]></title>
    <url>%2F2017%2F05%2F03%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2F3%E6%B2%99%E7%9B%92%E5%AE%9E%E4%BE%8B%E6%90%AD%E5%BB%BAInnoDB%20Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[本文描述了如何通过三个沙盒msyql实例，创建一个Single-Primary Innodb cluster，并通过mysql Router对connections实现路由，实现高可用性。 This section explains how to set up a single-primary InnoDB cluster and configure MySQL Router to achieve high availability. This tutorial shows how to use MySQL Shell to create an InnoDB cluster consisting of a MySQL Server instance which provides the seed instance of the InnoDB cluster and holds the initial data set. Two more sandbox MySQL server instances are created and added to the InnoDB cluster. Then MySQL Router is deployed and used to route connections to the InnoDB cluster, and high availability is tested. 1. Yum 安装MySQL Shell123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-shell -y 2. 创建三个沙盒实例Start MySQL Shell 1shell&gt; mysqlsh MySQL Shell provides two scripting languages: JavaScript and Python. Throughout this guide MySQL Shell is used primarily in JavaScript mode . When MySQL Shell starts it is in JavaScript mode by default. You switch into JavaScript mode, Python mode and SQL mode using the commands \js, \py, and \sql. Ensure you are in JavaScript mode by issuing the \js command, then execute: 123mysql-js&gt; dba.deploySandboxInstance(3310)mysql-js&gt; dba.deploySandboxInstance(3320)mysql-js&gt; dba.deploySandboxInstance(3330) 3. Creating the InnoDB ClusterConnect MySQL Shell to the seed instance, in this case the one at port 3310: 123mysql-js&gt; \connect root@localhost:3310或者mysql-js&gt; shell.connect(&apos;root@localhost:3310&apos;) Use the createCluster() method to create the InnoDB cluster with the currently connected instance as the seed: 1mysql-js&gt; var cluster = dba.createCluster(&apos;testCluster&apos;) 4. Adding Instances to an InnoDB Cluster配置/etc/hosts 1127.0.0.1 mysql001 Obtaining the cluster Instance Variable 1mysql-js&gt; var cluster = dba.getCluster(&quot;testCluster&quot;) Add the second instance to the InnoDB cluster: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3320&apos;) Add the third instance: 1mysql-js&gt; cluster.addInstance(&apos;root@localhost:3330&apos;) 查看cluster 状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3310&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 5. 安装配置 MySQL RouterYum安装 123wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmrpm -ivh mysql57-community-release-el7-10.noarch.rpmyum install mysql-router -y bootstrap 生成配置文件 1shell&gt; mysqlrouter --bootstrap root@localhost:3310 --user=mysqlrouter 配置文件/etc/mysqlrouter/mysqlrouter.conf内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445shell &gt; cat /etc/mysqlrouter/mysqlrouter.conf# File automatically generated during MySQL Router bootstrap[DEFAULT]name=systemuser=mysqlrouterkeyring_path=/var/lib/mysqlrouter/keyringmaster_key_path=/etc/mysqlrouter/mysqlrouter.key[logger]level = INFO[metadata_cache:testCluster]router_id=3bootstrap_server_addresses=mysql://localhost:3310,mysql://localhost:3320,mysql://localhost:3330user=mysql_router3_c3j5z9t7rjgkmetadata_cluster=testClusterttl=300[routing:testCluster_default_rw]bind_address=0.0.0.0bind_port=6446destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=classic[routing:testCluster_default_ro]bind_address=0.0.0.0bind_port=6447destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=classic[routing:testCluster_default_x_rw]bind_address=0.0.0.0bind_port=64460destinations=metadata-cache://testCluster/default?role=PRIMARYmode=read-writeprotocol=x[routing:testCluster_default_x_ro]bind_address=0.0.0.0bind_port=64470destinations=metadata-cache://testCluster/default?role=SECONDARYmode=read-onlyprotocol=x 启动mysqlrouter(记得修改下权限 默认权限不对) 12chown mysqlrouter.mysqlrouter /var/lib/mysqlroutersystemctl start mysqlrouter 测试连接 12345678910shell&gt; mysqlsh --uri root@localhost:6446mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3310 |+--------+1 row in set (0.00 sec) 6. Testing Failoverkilling the PRIMARY instance 3310 1mysql-js&gt; dba.killSandboxInstance(3310) 测试连接（第一次失败，第二次成功） 1234567891011121314mysql-js&gt; \sqlSwitching to SQL mode... Commands end with ;mysql-sql&gt; SELECT @@port;ERROR: 2013 (HY000): Lost connection to MySQL server during queryThe global session got disconnected.Attempting to reconnect to &apos;root@localhost:6446&apos;...The global session was successfully reconnected.mysql-sql&gt; select @@port;+--------+| @@port |+--------+| 3330 |+--------+1 row in set (0.00 sec) 查看cluster状态, 可以发现3320实例已经变成Primary 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;, &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures. 1 member is not active&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;(MISSING)&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; bring the instance that you killed back online. 123mysql-js&gt; dba.startSandboxInstance(3310)mysql-js&gt; cluster.rejoinInstance(&apos;root@localhost:3310&apos;)mysql-js&gt; cluster.status() 重新查看cluster状态 123456789101112131415161718192021222324252627282930313233mysql-js&gt; cluster.status()&#123; &quot;clusterName&quot;: &quot;testCluster&quot;, &quot;defaultReplicaSet&quot;: &#123; &quot;name&quot;: &quot;default&quot;, &quot;primary&quot;: &quot;localhost:3320&quot;, &quot;status&quot;: &quot;OK&quot;, &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, &quot;topology&quot;: &#123; &quot;localhost:3310&quot;: &#123; &quot;address&quot;: &quot;localhost:3310&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3320&quot;: &#123; &quot;address&quot;: &quot;localhost:3320&quot;, &quot;mode&quot;: &quot;R/W&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125;, &quot;localhost:3330&quot;: &#123; &quot;address&quot;: &quot;localhost:3330&quot;, &quot;mode&quot;: &quot;R/O&quot;, &quot;readReplicas&quot;: &#123;&#125;, &quot;role&quot;: &quot;HA&quot;, &quot;status&quot;: &quot;ONLINE&quot; &#125; &#125; &#125;&#125; 参考 Getting Started with InnoDB Cluster]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[InnoDB Cluster简介]]></title>
    <url>%2F2017%2F05%2F02%2FMySQL%2FMySQL%20HA%2FInnoDB%20Cluster%2FInnoDB%20Cluster%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、InnoDB Cluster简介前几天 Mysql 团队愉快的发布了 InnoDB Cluster 的 GA（General Availability 正式发布） 版本 InnoDB Cluster 是 Mysql 的一套完整的高可用解决方案 MySQL InnoDB cluster is a collection of products that work together to provide a complete High Availability solution for MySQL. InnoDB Cluster 由下面3个核心组件构成： MySQL Shell 通过内置的 AdminAPI 来创建和管理整个 InnoDB Clusters Includes the AdminAPI, which enables you to script the creation and administration of an InnoDB cluster, using either JavaScript or Python. MySQL Router 缓存 InnoDB cluster 的元数据，负责把 client 的 read/write 请求路由到当前的主数据库节点，还可以对 client 的请求进行负载均衡，并且在主数据库节点出现故障时，保证 client 的请求被路由到新的主服务器节点 Caches the metadata of the InnoDB cluster and routes read/write client requests to the current primary. If the primary instance becomes unavailable, MySQL Router automatically routes client requests to a promoted secondary (the new primary). Group Replication MySQL Server 5.7.17 or higher. 可以把数据同步到集群内的所有成员中，并支持 容错 、 自动故障转移 、 灵活扩展 等重要特性 This provides the MySQL Group Replication mechanism to allow data to be replicated within the cluster, with built-in failover. Group Replication ​]]></content>
      <categories>
        <category>MySQL</category>
        <category>MySQL HA</category>
        <category>InnoDB Cluster</category>
      </categories>
      <tags>
        <tag>InnoDB Cluster</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[今天是五一劳动节，我的新Blog诞生了。希望在新的一年里，能在此认认真真的记录自己的成长！ 目标：每天一篇学习笔记]]></content>
  </entry>
</search>